{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport RCTDeviceEventEmitter from \"../EventEmitter/RCTDeviceEventEmitter\";\nimport NativeRedBox from \"../NativeModules/specs/NativeRedBox\";\nimport NativeBugReporting from \"./NativeBugReporting\";\n\nfunction defaultExtras() {\n  BugReporting.addFileSource('react_hierarchy.txt', function () {\n    return require(\"./dumpReactTree\")();\n  });\n}\n\nvar BugReporting = function () {\n  function BugReporting() {\n    _classCallCheck(this, BugReporting);\n  }\n\n  _createClass(BugReporting, null, [{\n    key: \"_maybeInit\",\n    value: function _maybeInit() {\n      if (!BugReporting._subscription) {\n        BugReporting._subscription = RCTDeviceEventEmitter.addListener('collectBugExtraData', BugReporting.collectExtraData, null);\n        defaultExtras();\n      }\n\n      if (!BugReporting._redboxSubscription) {\n        BugReporting._redboxSubscription = RCTDeviceEventEmitter.addListener('collectRedBoxExtraData', BugReporting.collectExtraData, null);\n      }\n    }\n  }, {\n    key: \"addSource\",\n    value: function addSource(key, callback) {\n      return this._addSource(key, callback, BugReporting._extraSources);\n    }\n  }, {\n    key: \"addFileSource\",\n    value: function addFileSource(key, callback) {\n      return this._addSource(key, callback, BugReporting._fileSources);\n    }\n  }, {\n    key: \"_addSource\",\n    value: function _addSource(key, callback, source) {\n      BugReporting._maybeInit();\n\n      if (source.has(key)) {\n        console.warn(\"BugReporting.add* called multiple times for same key '\" + key + \"'\");\n      }\n\n      source.set(key, callback);\n      return {\n        remove: function remove() {\n          source.delete(key);\n        }\n      };\n    }\n  }, {\n    key: \"collectExtraData\",\n    value: function collectExtraData() {\n      var extraData = {};\n\n      for (var _iterator = _createForOfIteratorHelperLoose(BugReporting._extraSources), _step; !(_step = _iterator()).done;) {\n        var _ref = _step.value;\n\n        var _ref2 = _slicedToArray(_ref, 2);\n\n        var _key = _ref2[0];\n        var callback = _ref2[1];\n        extraData[_key] = callback();\n      }\n\n      var fileData = {};\n\n      for (var _iterator2 = _createForOfIteratorHelperLoose(BugReporting._fileSources), _step2; !(_step2 = _iterator2()).done;) {\n        var _ref3 = _step2.value;\n\n        var _ref4 = _slicedToArray(_ref3, 2);\n\n        var _key2 = _ref4[0];\n        var _callback = _ref4[1];\n        fileData[_key2] = _callback();\n      }\n\n      if (NativeBugReporting != null && NativeBugReporting.setExtraData != null) {\n        NativeBugReporting.setExtraData(extraData, fileData);\n      }\n\n      if (NativeRedBox != null && NativeRedBox.setExtraData != null) {\n        NativeRedBox.setExtraData(extraData, 'From BugReporting.js');\n      }\n\n      return {\n        extras: extraData,\n        files: fileData\n      };\n    }\n  }]);\n\n  return BugReporting;\n}();\n\nBugReporting._extraSources = new Map();\nBugReporting._fileSources = new Map();\nBugReporting._subscription = null;\nBugReporting._redboxSubscription = null;\nmodule.exports = BugReporting;","map":{"version":3,"names":["RCTDeviceEventEmitter","NativeRedBox","NativeBugReporting","defaultExtras","BugReporting","addFileSource","require","_subscription","addListener","collectExtraData","_redboxSubscription","key","callback","_addSource","_extraSources","_fileSources","source","_maybeInit","has","console","warn","set","remove","delete","extraData","fileData","setExtraData","extras","files","Map","module","exports"],"sources":["/Users/zagarellagabriele/Desktop/Progetti/React Native/React-Native-Exercises/node_modules/react-native/Libraries/BugReporting/BugReporting.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport RCTDeviceEventEmitter from '../EventEmitter/RCTDeviceEventEmitter';\nimport NativeRedBox from '../NativeModules/specs/NativeRedBox';\nimport {type EventSubscription} from '../vendor/emitter/EventEmitter';\nimport NativeBugReporting from './NativeBugReporting';\n\ntype ExtraData = {[key: string]: string, ...};\ntype SourceCallback = () => string;\ntype DebugData = {\n  extras: ExtraData,\n  files: ExtraData,\n  ...\n};\n\nfunction defaultExtras() {\n  BugReporting.addFileSource('react_hierarchy.txt', () =>\n    require('./dumpReactTree')(),\n  );\n}\n\n/**\n * A simple class for collecting bug report data. Components can add sources that will be queried when a bug report\n * is created via `collectExtraData`. For example, a list component might add a source that provides the list of rows\n * that are currently visible on screen. Components should also remember to call `remove()` on the object that is\n * returned by `addSource` when they are unmounted.\n */\nclass BugReporting {\n  static _extraSources: Map<string, SourceCallback> = new Map();\n  static _fileSources: Map<string, SourceCallback> = new Map();\n  static _subscription: ?EventSubscription = null;\n  static _redboxSubscription: ?EventSubscription = null;\n\n  static _maybeInit() {\n    if (!BugReporting._subscription) {\n      BugReporting._subscription = RCTDeviceEventEmitter.addListener(\n        'collectBugExtraData',\n        // $FlowFixMe[method-unbinding]\n        BugReporting.collectExtraData,\n        null,\n      );\n      defaultExtras();\n    }\n\n    if (!BugReporting._redboxSubscription) {\n      BugReporting._redboxSubscription = RCTDeviceEventEmitter.addListener(\n        'collectRedBoxExtraData',\n        // $FlowFixMe[method-unbinding]\n        BugReporting.collectExtraData,\n        null,\n      );\n    }\n  }\n\n  /**\n   * Maps a string key to a simple callback that should return a string payload to be attached\n   * to a bug report. Source callbacks are called when `collectExtraData` is called.\n   *\n   * Returns an object to remove the source when the component unmounts.\n   *\n   * Conflicts trample with a warning.\n   */\n  static addSource(\n    key: string,\n    callback: SourceCallback,\n  ): {remove: () => void, ...} {\n    return this._addSource(key, callback, BugReporting._extraSources);\n  }\n\n  /**\n   * Maps a string key to a simple callback that should return a string payload to be attached\n   * to a bug report. Source callbacks are called when `collectExtraData` is called.\n   *\n   * Returns an object to remove the source when the component unmounts.\n   *\n   * Conflicts trample with a warning.\n   */\n  static addFileSource(\n    key: string,\n    callback: SourceCallback,\n  ): {remove: () => void, ...} {\n    return this._addSource(key, callback, BugReporting._fileSources);\n  }\n\n  static _addSource(\n    key: string,\n    callback: SourceCallback,\n    source: Map<string, SourceCallback>,\n  ): {remove: () => void, ...} {\n    BugReporting._maybeInit();\n    if (source.has(key)) {\n      console.warn(\n        `BugReporting.add* called multiple times for same key '${key}'`,\n      );\n    }\n    source.set(key, callback);\n    return {\n      remove: () => {\n        source.delete(key);\n      },\n    };\n  }\n\n  /**\n   * This can be called from a native bug reporting flow, or from JS code.\n   *\n   * If available, this will call `NativeModules.BugReporting.setExtraData(extraData)`\n   * after collecting `extraData`.\n   */\n  static collectExtraData(): DebugData {\n    const extraData: ExtraData = {};\n    for (const [key, callback] of BugReporting._extraSources) {\n      extraData[key] = callback();\n    }\n    const fileData: ExtraData = {};\n    for (const [key, callback] of BugReporting._fileSources) {\n      fileData[key] = callback();\n    }\n\n    if (NativeBugReporting != null && NativeBugReporting.setExtraData != null) {\n      NativeBugReporting.setExtraData(extraData, fileData);\n    }\n\n    if (NativeRedBox != null && NativeRedBox.setExtraData != null) {\n      NativeRedBox.setExtraData(extraData, 'From BugReporting.js');\n    }\n\n    return {extras: extraData, files: fileData};\n  }\n}\n\nmodule.exports = BugReporting;\n"],"mappings":";;;;;;;;;;AAUA,OAAOA,qBAAP;AACA,OAAOC,YAAP;AAEA,OAAOC,kBAAP;;AAUA,SAASC,aAAT,GAAyB;EACvBC,YAAY,CAACC,aAAb,CAA2B,qBAA3B,EAAkD;IAAA,OAChDC,OAAO,mBAAP,EADgD;EAAA,CAAlD;AAGD;;IAQKF,Y;;;;;;;WAMJ,sBAAoB;MAClB,IAAI,CAACA,YAAY,CAACG,aAAlB,EAAiC;QAC/BH,YAAY,CAACG,aAAb,GAA6BP,qBAAqB,CAACQ,WAAtB,CAC3B,qBAD2B,EAG3BJ,YAAY,CAACK,gBAHc,EAI3B,IAJ2B,CAA7B;QAMAN,aAAa;MACd;;MAED,IAAI,CAACC,YAAY,CAACM,mBAAlB,EAAuC;QACrCN,YAAY,CAACM,mBAAb,GAAmCV,qBAAqB,CAACQ,WAAtB,CACjC,wBADiC,EAGjCJ,YAAY,CAACK,gBAHoB,EAIjC,IAJiC,CAAnC;MAMD;IACF;;;WAUD,mBACEE,GADF,EAEEC,QAFF,EAG6B;MAC3B,OAAO,KAAKC,UAAL,CAAgBF,GAAhB,EAAqBC,QAArB,EAA+BR,YAAY,CAACU,aAA5C,CAAP;IACD;;;WAUD,uBACEH,GADF,EAEEC,QAFF,EAG6B;MAC3B,OAAO,KAAKC,UAAL,CAAgBF,GAAhB,EAAqBC,QAArB,EAA+BR,YAAY,CAACW,YAA5C,CAAP;IACD;;;WAED,oBACEJ,GADF,EAEEC,QAFF,EAGEI,MAHF,EAI6B;MAC3BZ,YAAY,CAACa,UAAb;;MACA,IAAID,MAAM,CAACE,GAAP,CAAWP,GAAX,CAAJ,EAAqB;QACnBQ,OAAO,CAACC,IAAR,4DAC2DT,GAD3D;MAGD;;MACDK,MAAM,CAACK,GAAP,CAAWV,GAAX,EAAgBC,QAAhB;MACA,OAAO;QACLU,MAAM,EAAE,kBAAM;UACZN,MAAM,CAACO,MAAP,CAAcZ,GAAd;QACD;MAHI,CAAP;IAKD;;;WAQD,4BAAqC;MACnC,IAAMa,SAAoB,GAAG,EAA7B;;MACA,qDAA8BpB,YAAY,CAACU,aAA3C,wCAA0D;QAAA;;QAAA;;QAAA,IAA9CH,IAA8C;QAAA,IAAzCC,QAAyC;QACxDY,SAAS,CAACb,IAAD,CAAT,GAAiBC,QAAQ,EAAzB;MACD;;MACD,IAAMa,QAAmB,GAAG,EAA5B;;MACA,sDAA8BrB,YAAY,CAACW,YAA3C,2CAAyD;QAAA;;QAAA;;QAAA,IAA7CJ,KAA6C;QAAA,IAAxCC,SAAwC;QACvDa,QAAQ,CAACd,KAAD,CAAR,GAAgBC,SAAQ,EAAxB;MACD;;MAED,IAAIV,kBAAkB,IAAI,IAAtB,IAA8BA,kBAAkB,CAACwB,YAAnB,IAAmC,IAArE,EAA2E;QACzExB,kBAAkB,CAACwB,YAAnB,CAAgCF,SAAhC,EAA2CC,QAA3C;MACD;;MAED,IAAIxB,YAAY,IAAI,IAAhB,IAAwBA,YAAY,CAACyB,YAAb,IAA6B,IAAzD,EAA+D;QAC7DzB,YAAY,CAACyB,YAAb,CAA0BF,SAA1B,EAAqC,sBAArC;MACD;;MAED,OAAO;QAACG,MAAM,EAAEH,SAAT;QAAoBI,KAAK,EAAEH;MAA3B,CAAP;IACD;;;;;;AArGGrB,Y,CACGU,a,GAA6C,IAAIe,GAAJ,E;AADhDzB,Y,CAEGW,Y,GAA4C,IAAIc,GAAJ,E;AAF/CzB,Y,CAGGG,a,GAAoC,I;AAHvCH,Y,CAIGM,mB,GAA0C,I;AAoGnDoB,MAAM,CAACC,OAAP,GAAiB3B,YAAjB"},"metadata":{},"sourceType":"module"}