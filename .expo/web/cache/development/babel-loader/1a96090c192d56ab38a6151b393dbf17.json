{"ast":null,"code":"var TRACE_TAG_REACT_APPS = 1 << 17;\nvar _asyncCookie = 0;\nexport function isEnabled() {\n  return global.nativeTraceIsTracing ? global.nativeTraceIsTracing(TRACE_TAG_REACT_APPS) : Boolean(global.__RCTProfileIsProfiling);\n}\nexport function setEnabled(_doEnable) {}\nexport function beginEvent(eventName, args) {\n  if (isEnabled()) {\n    var eventNameString = typeof eventName === 'function' ? eventName() : eventName;\n    global.nativeTraceBeginSection(TRACE_TAG_REACT_APPS, eventNameString, args);\n  }\n}\nexport function endEvent(args) {\n  if (isEnabled()) {\n    global.nativeTraceEndSection(TRACE_TAG_REACT_APPS, args);\n  }\n}\nexport function beginAsyncEvent(eventName, args) {\n  var cookie = _asyncCookie;\n\n  if (isEnabled()) {\n    _asyncCookie++;\n    var eventNameString = typeof eventName === 'function' ? eventName() : eventName;\n    global.nativeTraceBeginAsyncSection(TRACE_TAG_REACT_APPS, eventNameString, cookie, args);\n  }\n\n  return cookie;\n}\nexport function endAsyncEvent(eventName, cookie, args) {\n  if (isEnabled()) {\n    var eventNameString = typeof eventName === 'function' ? eventName() : eventName;\n    global.nativeTraceEndAsyncSection(TRACE_TAG_REACT_APPS, eventNameString, cookie, args);\n  }\n}\nexport function counterEvent(eventName, value) {\n  if (isEnabled()) {\n    var eventNameString = typeof eventName === 'function' ? eventName() : eventName;\n    global.nativeTraceCounter && global.nativeTraceCounter(TRACE_TAG_REACT_APPS, eventNameString, value);\n  }\n}\n\nif (__DEV__) {\n  var Systrace = {\n    isEnabled: isEnabled,\n    setEnabled: setEnabled,\n    beginEvent: beginEvent,\n    endEvent: endEvent,\n    beginAsyncEvent: beginAsyncEvent,\n    endAsyncEvent: endAsyncEvent,\n    counterEvent: counterEvent\n  };\n  global[(global.__METRO_GLOBAL_PREFIX__ || '') + '__SYSTRACE'] = Systrace;\n}","map":{"version":3,"names":["TRACE_TAG_REACT_APPS","_asyncCookie","isEnabled","global","nativeTraceIsTracing","Boolean","__RCTProfileIsProfiling","setEnabled","_doEnable","beginEvent","eventName","args","eventNameString","nativeTraceBeginSection","endEvent","nativeTraceEndSection","beginAsyncEvent","cookie","nativeTraceBeginAsyncSection","endAsyncEvent","nativeTraceEndAsyncSection","counterEvent","value","nativeTraceCounter","__DEV__","Systrace","__METRO_GLOBAL_PREFIX__"],"sources":["/Users/zagarellagabriele/Desktop/Progetti/React Native/React-Native-Exercises/node_modules/react-native/Libraries/Performance/Systrace.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport typeof * as SystraceModule from './Systrace';\n\nconst TRACE_TAG_REACT_APPS = 1 << 17; // eslint-disable-line no-bitwise\n\nlet _asyncCookie = 0;\n\ntype EventName = string | (() => string);\ntype EventArgs = ?{[string]: string};\n\n/**\n * Indicates if the application is currently being traced.\n *\n * Calling methods on this module when the application isn't being traced is\n * cheap, but this method can be used to avoid computing expensive values for\n * those functions.\n *\n * @example\n * if (Systrace.isEnabled()) {\n *   const expensiveArgs = computeExpensiveArgs();\n *   Systrace.beginEvent('myEvent', expensiveArgs);\n * }\n */\nexport function isEnabled(): boolean {\n  return global.nativeTraceIsTracing\n    ? global.nativeTraceIsTracing(TRACE_TAG_REACT_APPS)\n    : Boolean(global.__RCTProfileIsProfiling);\n}\n\n/**\n * @deprecated This function is now a no-op but it's left for backwards\n * compatibility. `isEnabled` will now synchronously check if we're actively\n * profiling or not. This is necessary because we don't have callbacks to know\n * when profiling has started/stopped on Android APIs.\n */\nexport function setEnabled(_doEnable: boolean): void {}\n\n/**\n * Marks the start of a synchronous event that should end in the same stack\n * frame. The end of this event should be marked using the `endEvent` function.\n */\nexport function beginEvent(eventName: EventName, args?: EventArgs): void {\n  if (isEnabled()) {\n    const eventNameString =\n      typeof eventName === 'function' ? eventName() : eventName;\n    global.nativeTraceBeginSection(TRACE_TAG_REACT_APPS, eventNameString, args);\n  }\n}\n\n/**\n * Marks the end of a synchronous event started in the same stack frame.\n */\nexport function endEvent(args?: EventArgs): void {\n  if (isEnabled()) {\n    global.nativeTraceEndSection(TRACE_TAG_REACT_APPS, args);\n  }\n}\n\n/**\n * Marks the start of a potentially asynchronous event. The end of this event\n * should be marked calling the `endAsyncEvent` function with the cookie\n * returned by this function.\n */\nexport function beginAsyncEvent(\n  eventName: EventName,\n  args?: EventArgs,\n): number {\n  const cookie = _asyncCookie;\n  if (isEnabled()) {\n    _asyncCookie++;\n    const eventNameString =\n      typeof eventName === 'function' ? eventName() : eventName;\n    global.nativeTraceBeginAsyncSection(\n      TRACE_TAG_REACT_APPS,\n      eventNameString,\n      cookie,\n      args,\n    );\n  }\n  return cookie;\n}\n\n/**\n * Marks the end of a potentially asynchronous event, which was started with\n * the given cookie.\n */\nexport function endAsyncEvent(\n  eventName: EventName,\n  cookie: number,\n  args?: EventArgs,\n): void {\n  if (isEnabled()) {\n    const eventNameString =\n      typeof eventName === 'function' ? eventName() : eventName;\n    global.nativeTraceEndAsyncSection(\n      TRACE_TAG_REACT_APPS,\n      eventNameString,\n      cookie,\n      args,\n    );\n  }\n}\n\n/**\n * Registers a new value for a counter event.\n */\nexport function counterEvent(eventName: EventName, value: number): void {\n  if (isEnabled()) {\n    const eventNameString =\n      typeof eventName === 'function' ? eventName() : eventName;\n    global.nativeTraceCounter &&\n      global.nativeTraceCounter(TRACE_TAG_REACT_APPS, eventNameString, value);\n  }\n}\n\nif (__DEV__) {\n  const Systrace: SystraceModule = {\n    isEnabled,\n    setEnabled,\n    beginEvent,\n    endEvent,\n    beginAsyncEvent,\n    endAsyncEvent,\n    counterEvent,\n  };\n\n  // The metro require polyfill can not have dependencies (true for all polyfills).\n  // Ensure that `Systrace` is available in polyfill by exposing it globally.\n  global[(global.__METRO_GLOBAL_PREFIX__ || '') + '__SYSTRACE'] = Systrace;\n}\n"],"mappings":"AAYA,IAAMA,oBAAoB,GAAG,KAAK,EAAlC;AAEA,IAAIC,YAAY,GAAG,CAAnB;AAkBA,OAAO,SAASC,SAAT,GAA8B;EACnC,OAAOC,MAAM,CAACC,oBAAP,GACHD,MAAM,CAACC,oBAAP,CAA4BJ,oBAA5B,CADG,GAEHK,OAAO,CAACF,MAAM,CAACG,uBAAR,CAFX;AAGD;AAQD,OAAO,SAASC,UAAT,CAAoBC,SAApB,EAA8C,CAAE;AAMvD,OAAO,SAASC,UAAT,CAAoBC,SAApB,EAA0CC,IAA1C,EAAkE;EACvE,IAAIT,SAAS,EAAb,EAAiB;IACf,IAAMU,eAAe,GACnB,OAAOF,SAAP,KAAqB,UAArB,GAAkCA,SAAS,EAA3C,GAAgDA,SADlD;IAEAP,MAAM,CAACU,uBAAP,CAA+Bb,oBAA/B,EAAqDY,eAArD,EAAsED,IAAtE;EACD;AACF;AAKD,OAAO,SAASG,QAAT,CAAkBH,IAAlB,EAA0C;EAC/C,IAAIT,SAAS,EAAb,EAAiB;IACfC,MAAM,CAACY,qBAAP,CAA6Bf,oBAA7B,EAAmDW,IAAnD;EACD;AACF;AAOD,OAAO,SAASK,eAAT,CACLN,SADK,EAELC,IAFK,EAGG;EACR,IAAMM,MAAM,GAAGhB,YAAf;;EACA,IAAIC,SAAS,EAAb,EAAiB;IACfD,YAAY;IACZ,IAAMW,eAAe,GACnB,OAAOF,SAAP,KAAqB,UAArB,GAAkCA,SAAS,EAA3C,GAAgDA,SADlD;IAEAP,MAAM,CAACe,4BAAP,CACElB,oBADF,EAEEY,eAFF,EAGEK,MAHF,EAIEN,IAJF;EAMD;;EACD,OAAOM,MAAP;AACD;AAMD,OAAO,SAASE,aAAT,CACLT,SADK,EAELO,MAFK,EAGLN,IAHK,EAIC;EACN,IAAIT,SAAS,EAAb,EAAiB;IACf,IAAMU,eAAe,GACnB,OAAOF,SAAP,KAAqB,UAArB,GAAkCA,SAAS,EAA3C,GAAgDA,SADlD;IAEAP,MAAM,CAACiB,0BAAP,CACEpB,oBADF,EAEEY,eAFF,EAGEK,MAHF,EAIEN,IAJF;EAMD;AACF;AAKD,OAAO,SAASU,YAAT,CAAsBX,SAAtB,EAA4CY,KAA5C,EAAiE;EACtE,IAAIpB,SAAS,EAAb,EAAiB;IACf,IAAMU,eAAe,GACnB,OAAOF,SAAP,KAAqB,UAArB,GAAkCA,SAAS,EAA3C,GAAgDA,SADlD;IAEAP,MAAM,CAACoB,kBAAP,IACEpB,MAAM,CAACoB,kBAAP,CAA0BvB,oBAA1B,EAAgDY,eAAhD,EAAiEU,KAAjE,CADF;EAED;AACF;;AAED,IAAIE,OAAJ,EAAa;EACX,IAAMC,QAAwB,GAAG;IAC/BvB,SAAS,EAATA,SAD+B;IAE/BK,UAAU,EAAVA,UAF+B;IAG/BE,UAAU,EAAVA,UAH+B;IAI/BK,QAAQ,EAARA,QAJ+B;IAK/BE,eAAe,EAAfA,eAL+B;IAM/BG,aAAa,EAAbA,aAN+B;IAO/BE,YAAY,EAAZA;EAP+B,CAAjC;EAYAlB,MAAM,CAAC,CAACA,MAAM,CAACuB,uBAAP,IAAkC,EAAnC,IAAyC,YAA1C,CAAN,GAAgED,QAAhE;AACD"},"metadata":{},"sourceType":"module"}