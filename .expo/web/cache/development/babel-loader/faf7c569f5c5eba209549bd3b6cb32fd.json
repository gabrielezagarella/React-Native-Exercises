{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport InteractionManager from \"react-native-web/dist/exports/InteractionManager\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { PanGestureHandler, State as GestureState } from 'react-native-gesture-handler';\nimport Animated, { interpolate, runOnJS, useAnimatedGestureHandler, useAnimatedStyle, useDerivedValue, useSharedValue, withSpring } from 'react-native-reanimated';\nimport DrawerProgressContext from \"../../utils/DrawerProgressContext\";\nimport Overlay from \"./Overlay\";\nvar SWIPE_DISTANCE_MINIMUM = 5;\nvar DEFAULT_DRAWER_WIDTH = '80%';\n\nvar minmax = function () {\n  var _f = function _f(value, start, end) {\n    return Math.min(Math.max(value, start), end);\n  };\n\n  _f._closure = {};\n  _f.asString = \"function _f(value,start,end){return Math.min(Math.max(value,start),end);}\";\n  _f.__workletHash = 12387352865556;\n  _f.__location = \"/Users/zagarellagabriele/Desktop/Progetti/React Native/React-Native-Exercises/node_modules/@react-navigation/drawer/lib/module/views/modern/Drawer.js (10:15)\";\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\n\nexport default function Drawer(_ref) {\n  var dimensions = _ref.dimensions,\n      drawerPosition = _ref.drawerPosition,\n      drawerStyle = _ref.drawerStyle,\n      drawerType = _ref.drawerType,\n      gestureHandlerProps = _ref.gestureHandlerProps,\n      hideStatusBarOnOpen = _ref.hideStatusBarOnOpen,\n      keyboardDismissMode = _ref.keyboardDismissMode,\n      onClose = _ref.onClose,\n      onOpen = _ref.onOpen,\n      open = _ref.open,\n      overlayStyle = _ref.overlayStyle,\n      renderDrawerContent = _ref.renderDrawerContent,\n      renderSceneContent = _ref.renderSceneContent,\n      statusBarAnimation = _ref.statusBarAnimation,\n      swipeDistanceThreshold = _ref.swipeDistanceThreshold,\n      swipeEdgeWidth = _ref.swipeEdgeWidth,\n      swipeEnabled = _ref.swipeEnabled,\n      swipeVelocityThreshold = _ref.swipeVelocityThreshold,\n      overlayAccessibilityLabel = _ref.overlayAccessibilityLabel;\n\n  var getDrawerWidth = function getDrawerWidth() {\n    var _ref3 = StyleSheet.flatten(drawerStyle) || {},\n        _ref3$width = _ref3.width,\n        width = _ref3$width === void 0 ? DEFAULT_DRAWER_WIDTH : _ref3$width;\n\n    if (typeof width === 'string' && width.endsWith('%')) {\n      var percentage = Number(width.replace(/%$/, ''));\n\n      if (Number.isFinite(percentage)) {\n        return dimensions.width * (percentage / 100);\n      }\n    }\n\n    return typeof width === 'number' ? width : 0;\n  };\n\n  var drawerWidth = getDrawerWidth();\n  var isOpen = drawerType === 'permanent' ? true : open;\n  var isRight = drawerPosition === 'right';\n  var getDrawerTranslationX = React.useCallback(function () {\n    var _f = function _f(open) {\n      if (drawerPosition === 'left') {\n        return open ? 0 : -drawerWidth;\n      }\n\n      return open ? 0 : drawerWidth;\n    };\n\n    _f._closure = {\n      drawerPosition: drawerPosition,\n      drawerWidth: drawerWidth\n    };\n    _f.asString = \"function _f(open){const{drawerPosition,drawerWidth}=jsThis._closure;{if(drawerPosition==='left'){return open?0:-drawerWidth;}return open?0:drawerWidth;}}\";\n    _f.__workletHash = 4752955090285;\n    _f.__location = \"/Users/zagarellagabriele/Desktop/Progetti/React Native/React-Native-Exercises/node_modules/@react-navigation/drawer/lib/module/views/modern/Drawer.js (53:50)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }(), [drawerPosition, drawerWidth]);\n  var hideStatusBar = React.useCallback(function (hide) {\n    if (hideStatusBarOnOpen) {\n      StatusBar.setHidden(hide, statusBarAnimation);\n    }\n  }, [hideStatusBarOnOpen, statusBarAnimation]);\n  React.useEffect(function () {\n    hideStatusBar(isOpen);\n    return function () {\n      return hideStatusBar(false);\n    };\n  }, [isOpen, hideStatusBarOnOpen, statusBarAnimation, hideStatusBar]);\n  var interactionHandleRef = React.useRef(null);\n\n  var startInteraction = function startInteraction() {\n    interactionHandleRef.current = InteractionManager.createInteractionHandle();\n  };\n\n  var endInteraction = function endInteraction() {\n    if (interactionHandleRef.current != null) {\n      InteractionManager.clearInteractionHandle(interactionHandleRef.current);\n      interactionHandleRef.current = null;\n    }\n  };\n\n  var hideKeyboard = function hideKeyboard() {\n    if (keyboardDismissMode === 'on-drag') {\n      Keyboard.dismiss();\n    }\n  };\n\n  var onGestureStart = function onGestureStart() {\n    startInteraction();\n    hideKeyboard();\n    hideStatusBar(true);\n  };\n\n  var onGestureFinish = function onGestureFinish() {\n    endInteraction();\n  };\n\n  var hitSlop = isRight ? {\n    right: 0,\n    width: isOpen ? undefined : swipeEdgeWidth\n  } : {\n    left: 0,\n    width: isOpen ? undefined : swipeEdgeWidth\n  };\n  var touchStartX = useSharedValue(0);\n  var touchX = useSharedValue(0);\n  var translationX = useSharedValue(getDrawerTranslationX(open));\n  var gestureState = useSharedValue(GestureState.UNDETERMINED);\n  var toggleDrawer = React.useCallback(function () {\n    var _f = function _f(_ref2) {\n      var open = _ref2.open,\n          isUserInitiated = _ref2.isUserInitiated,\n          velocity = _ref2.velocity;\n      var translateX = getDrawerTranslationX(open);\n      touchStartX.value = 0;\n      touchX.value = 0;\n      translationX.value = withSpring(translateX, {\n        velocity: velocity,\n        stiffness: 1000,\n        damping: 500,\n        mass: 3,\n        overshootClamping: true,\n        restDisplacementThreshold: 0.01,\n        restSpeedThreshold: 0.01\n      });\n\n      if (!isUserInitiated) {\n        return;\n      }\n\n      if (open) {\n        runOnJS(onOpen)();\n      } else {\n        runOnJS(onClose)();\n      }\n    };\n\n    _f._closure = {\n      getDrawerTranslationX: getDrawerTranslationX,\n      touchStartX: touchStartX,\n      touchX: touchX,\n      translationX: translationX,\n      withSpring: withSpring,\n      runOnJS: runOnJS,\n      onOpen: onOpen,\n      onClose: onClose\n    };\n    _f.asString = \"function _f(_ref2){const{getDrawerTranslationX,touchStartX,touchX,translationX,withSpring,runOnJS,onOpen,onClose}=jsThis._closure;{let{open:open,isUserInitiated:isUserInitiated,velocity:velocity}=_ref2;const translateX=getDrawerTranslationX(open);touchStartX.value=0;touchX.value=0;translationX.value=withSpring(translateX,{velocity:velocity,stiffness:1000,damping:500,mass:3,overshootClamping:true,restDisplacementThreshold:0.01,restSpeedThreshold:0.01});if(!isUserInitiated){return;}if(open){runOnJS(onOpen)();}else{runOnJS(onClose)();}}}\";\n    _f.__workletHash = 284988876842;\n    _f.__location = \"/Users/zagarellagabriele/Desktop/Progetti/React Native/React-Native-Exercises/node_modules/@react-navigation/drawer/lib/module/views/modern/Drawer.js (110:41)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }(), [getDrawerTranslationX, onClose, onOpen, touchStartX, touchX, translationX]);\n  React.useEffect(function () {\n    return toggleDrawer({\n      open: open,\n      isUserInitiated: false\n    });\n  }, [open, toggleDrawer]);\n  var onGestureEvent = useAnimatedGestureHandler({\n    onStart: function () {\n      var _f = function _f(event, ctx) {\n        ctx.hasCalledOnStart = false;\n        ctx.startX = translationX.value;\n        gestureState.value = event.state;\n        touchStartX.value = event.x;\n      };\n\n      _f._closure = {\n        translationX: translationX,\n        gestureState: gestureState,\n        touchStartX: touchStartX\n      };\n      _f.asString = \"function _f(event,ctx){const{translationX,gestureState,touchStartX}=jsThis._closure;{ctx.hasCalledOnStart=false;ctx.startX=translationX.value;gestureState.value=event.state;touchStartX.value=event.x;}}\";\n      _f.__workletHash = 7995461185439;\n      _f.__location = \"/Users/zagarellagabriele/Desktop/Progetti/React Native/React-Native-Exercises/node_modules/@react-navigation/drawer/lib/module/views/modern/Drawer.js (144:13)\";\n\n      global.__reanimatedWorkletInit(_f);\n\n      return _f;\n    }(),\n    onActive: function () {\n      var _f = function _f(event, ctx) {\n        touchX.value = event.x;\n        translationX.value = ctx.startX + event.translationX;\n        gestureState.value = event.state;\n\n        if (!ctx.hasCalledOnStart) {\n          ctx.hasCalledOnStart = true;\n          runOnJS(onGestureStart)();\n        }\n      };\n\n      _f._closure = {\n        touchX: touchX,\n        translationX: translationX,\n        gestureState: gestureState,\n        runOnJS: runOnJS,\n        onGestureStart: onGestureStart\n      };\n      _f.asString = \"function _f(event,ctx){const{touchX,translationX,gestureState,runOnJS,onGestureStart}=jsThis._closure;{touchX.value=event.x;translationX.value=ctx.startX+event.translationX;gestureState.value=event.state;if(!ctx.hasCalledOnStart){ctx.hasCalledOnStart=true;runOnJS(onGestureStart)();}}}\";\n      _f.__workletHash = 2717092431621;\n      _f.__location = \"/Users/zagarellagabriele/Desktop/Progetti/React Native/React-Native-Exercises/node_modules/@react-navigation/drawer/lib/module/views/modern/Drawer.js (150:14)\";\n\n      global.__reanimatedWorkletInit(_f);\n\n      return _f;\n    }(),\n    onEnd: function () {\n      var _f = function _f(event) {\n        gestureState.value = event.state;\n        var nextOpen = Math.abs(event.translationX) > SWIPE_DISTANCE_MINIMUM && Math.abs(event.translationX) > swipeVelocityThreshold || Math.abs(event.translationX) > swipeDistanceThreshold ? drawerPosition === 'left' ? (event.velocityX === 0 ? event.translationX : event.velocityX) > 0 : (event.velocityX === 0 ? event.translationX : event.velocityX) < 0 : open;\n        toggleDrawer({\n          open: nextOpen,\n          isUserInitiated: true,\n          velocity: event.velocityX\n        });\n      };\n\n      _f._closure = {\n        gestureState: gestureState,\n        SWIPE_DISTANCE_MINIMUM: SWIPE_DISTANCE_MINIMUM,\n        swipeVelocityThreshold: swipeVelocityThreshold,\n        swipeDistanceThreshold: swipeDistanceThreshold,\n        drawerPosition: drawerPosition,\n        open: open,\n        toggleDrawer: toggleDrawer\n      };\n      _f.asString = \"function _f(event){const{gestureState,SWIPE_DISTANCE_MINIMUM,swipeVelocityThreshold,swipeDistanceThreshold,drawerPosition,open,toggleDrawer}=jsThis._closure;{gestureState.value=event.state;const nextOpen=Math.abs(event.translationX)>SWIPE_DISTANCE_MINIMUM&&Math.abs(event.translationX)>swipeVelocityThreshold||Math.abs(event.translationX)>swipeDistanceThreshold?drawerPosition==='left'?(event.velocityX===0?event.translationX:event.velocityX)>0:(event.velocityX===0?event.translationX:event.velocityX)<0:open;toggleDrawer({open:nextOpen,isUserInitiated:true,velocity:event.velocityX});}}\";\n      _f.__workletHash = 5030620258728;\n      _f.__location = \"/Users/zagarellagabriele/Desktop/Progetti/React Native/React-Native-Exercises/node_modules/@react-navigation/drawer/lib/module/views/modern/Drawer.js (163:11)\";\n\n      global.__reanimatedWorkletInit(_f);\n\n      return _f;\n    }(),\n    onFinish: function () {\n      var _f = function _f() {\n        runOnJS(onGestureFinish)();\n      };\n\n      _f._closure = {\n        runOnJS: runOnJS,\n        onGestureFinish: onGestureFinish\n      };\n      _f.asString = \"function _f(){const{runOnJS,onGestureFinish}=jsThis._closure;{runOnJS(onGestureFinish)();}}\";\n      _f.__workletHash = 10753070071248;\n      _f.__location = \"/Users/zagarellagabriele/Desktop/Progetti/React Native/React-Native-Exercises/node_modules/@react-navigation/drawer/lib/module/views/modern/Drawer.js (176:14)\";\n\n      global.__reanimatedWorkletInit(_f);\n\n      return _f;\n    }()\n  });\n  var translateX = useDerivedValue(function () {\n    var _f = function _f() {\n      var touchDistance = drawerType === 'front' && gestureState.value === GestureState.ACTIVE ? minmax(drawerPosition === 'left' ? touchStartX.value - drawerWidth : dimensions.width - drawerWidth - touchStartX.value, 0, dimensions.width) : 0;\n      var translateX = drawerPosition === 'left' ? minmax(translationX.value + touchDistance, -drawerWidth, 0) : minmax(translationX.value - touchDistance, 0, drawerWidth);\n      return translateX;\n    };\n\n    _f._closure = {\n      drawerType: drawerType,\n      gestureState: gestureState,\n      GestureState: {\n        ACTIVE: GestureState.ACTIVE\n      },\n      minmax: minmax,\n      drawerPosition: drawerPosition,\n      touchStartX: touchStartX,\n      drawerWidth: drawerWidth,\n      dimensions: {\n        width: dimensions.width\n      },\n      translationX: translationX\n    };\n    _f.asString = \"function _f(){const{drawerType,gestureState,GestureState,minmax,drawerPosition,touchStartX,drawerWidth,dimensions,translationX}=jsThis._closure;{const touchDistance=drawerType==='front'&&gestureState.value===GestureState.ACTIVE?minmax(drawerPosition==='left'?touchStartX.value-drawerWidth:dimensions.width-drawerWidth-touchStartX.value,0,dimensions.width):0;const translateX=drawerPosition==='left'?minmax(translationX.value+touchDistance,-drawerWidth,0):minmax(translationX.value-touchDistance,0,drawerWidth);return translateX;}}\";\n    _f.__workletHash = 16881564590342;\n    _f.__location = \"/Users/zagarellagabriele/Desktop/Progetti/React Native/React-Native-Exercises/node_modules/@react-navigation/drawer/lib/module/views/modern/Drawer.js (180:37)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }());\n  var isRTL = I18nManager.getConstants().isRTL;\n  var drawerAnimatedStyle = useAnimatedStyle(function () {\n    var _f = function _f() {\n      var distanceFromEdge = dimensions.width - drawerWidth;\n      return {\n        transform: drawerType === 'permanent' ? [] : [{\n          translateX: (drawerType === 'back' ? 0 : translateX.value) + (drawerPosition === 'left' ? isRTL ? -distanceFromEdge : 0 : isRTL ? 0 : distanceFromEdge)\n        }]\n      };\n    };\n\n    _f._closure = {\n      dimensions: {\n        width: dimensions.width\n      },\n      drawerWidth: drawerWidth,\n      drawerType: drawerType,\n      translateX: translateX,\n      drawerPosition: drawerPosition,\n      isRTL: isRTL\n    };\n    _f.asString = \"function _f(){const{dimensions,drawerWidth,drawerType,translateX,drawerPosition,isRTL}=jsThis._closure;{const distanceFromEdge=dimensions.width-drawerWidth;return{transform:drawerType==='permanent'?[]:[{translateX:(drawerType==='back'?0:translateX.value)+(drawerPosition==='left'?isRTL?-distanceFromEdge:0:isRTL?0:distanceFromEdge)}]};}}\";\n    _f.__workletHash = 17545005580326;\n    _f.__location = \"/Users/zagarellagabriele/Desktop/Progetti/React Native/React-Native-Exercises/node_modules/@react-navigation/drawer/lib/module/views/modern/Drawer.js (211:47)\";\n    _f.__optimalization = 3;\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }());\n  var contentAnimatedStyle = useAnimatedStyle(function () {\n    var _f = function _f() {\n      return {\n        transform: drawerType === 'permanent' ? [] : [{\n          translateX: drawerType === 'front' ? 0 : translateX.value + drawerWidth * (drawerPosition === 'left' ? 1 : -1)\n        }]\n      };\n    };\n\n    _f._closure = {\n      drawerType: drawerType,\n      translateX: translateX,\n      drawerWidth: drawerWidth,\n      drawerPosition: drawerPosition\n    };\n    _f.asString = \"function _f(){const{drawerType,translateX,drawerWidth,drawerPosition}=jsThis._closure;{return{transform:drawerType==='permanent'?[]:[{translateX:drawerType==='front'?0:translateX.value+drawerWidth*(drawerPosition==='left'?1:-1)}]};}}\";\n    _f.__workletHash = 10940802030343;\n    _f.__location = \"/Users/zagarellagabriele/Desktop/Progetti/React Native/React-Native-Exercises/node_modules/@react-navigation/drawer/lib/module/views/modern/Drawer.js (224:48)\";\n    _f.__optimalization = 3;\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }());\n  var progress = useDerivedValue(function () {\n    var _f = function _f() {\n      return drawerType === 'permanent' ? 1 : interpolate(translateX.value, [getDrawerTranslationX(false), getDrawerTranslationX(true)], [0, 1]);\n    };\n\n    _f._closure = {\n      drawerType: drawerType,\n      interpolate: interpolate,\n      translateX: translateX,\n      getDrawerTranslationX: getDrawerTranslationX\n    };\n    _f.asString = \"function _f(){const{drawerType,interpolate,translateX,getDrawerTranslationX}=jsThis._closure;{return drawerType==='permanent'?1:interpolate(translateX.value,[getDrawerTranslationX(false),getDrawerTranslationX(true)],[0,1]);}}\";\n    _f.__workletHash = 10677902672597;\n    _f.__location = \"/Users/zagarellagabriele/Desktop/Progetti/React Native/React-Native-Exercises/node_modules/@react-navigation/drawer/lib/module/views/modern/Drawer.js (236:35)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }());\n  return React.createElement(DrawerProgressContext.Provider, {\n    value: progress\n  }, React.createElement(PanGestureHandler, _extends({\n    activeOffsetX: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n    failOffsetY: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n    hitSlop: hitSlop,\n    enabled: drawerType !== 'permanent' && swipeEnabled,\n    onGestureEvent: onGestureEvent\n  }, gestureHandlerProps), React.createElement(Animated.View, {\n    style: [styles.main, {\n      flexDirection: drawerType === 'permanent' && !isRight ? 'row-reverse' : 'row'\n    }]\n  }, React.createElement(Animated.View, {\n    style: [styles.content, contentAnimatedStyle]\n  }, React.createElement(View, {\n    accessibilityElementsHidden: isOpen && drawerType !== 'permanent',\n    importantForAccessibility: isOpen && drawerType !== 'permanent' ? 'no-hide-descendants' : 'auto',\n    style: styles.content\n  }, renderSceneContent()), drawerType !== 'permanent' ? React.createElement(Overlay, {\n    progress: progress,\n    onPress: function onPress() {\n      return toggleDrawer({\n        open: false,\n        isUserInitiated: true\n      });\n    },\n    style: overlayStyle,\n    accessibilityLabel: overlayAccessibilityLabel\n  }) : null), React.createElement(Animated.View, {\n    removeClippedSubviews: Platform.OS !== 'ios',\n    style: [styles.container, {\n      position: drawerType === 'permanent' ? 'relative' : 'absolute',\n      zIndex: drawerType === 'back' ? -1 : 0\n    }, drawerAnimatedStyle, drawerStyle]\n  }, renderDrawerContent()))));\n}\nvar styles = StyleSheet.create({\n  container: {\n    top: 0,\n    bottom: 0,\n    maxWidth: '100%',\n    width: DEFAULT_DRAWER_WIDTH\n  },\n  content: {\n    flex: 1\n  },\n  main: _objectSpread({\n    flex: 1\n  }, Platform.select({\n    web: null,\n    default: {\n      overflow: 'hidden'\n    }\n  }))\n});","map":{"version":3,"sources":["views/modern/Drawer.tsx"],"names":["React","I18nManager","InteractionManager","Keyboard","Platform","PanGestureHandler","State","GestureState","Animated","interpolate","runOnJS","useAnimatedGestureHandler","useAnimatedStyle","useDerivedValue","useSharedValue","withSpring","DrawerProgressContext","Overlay","SWIPE_DISTANCE_MINIMUM","DEFAULT_DRAWER_WIDTH","minmax","value","start","end","Math","min","max","Drawer","dimensions","drawerPosition","drawerStyle","drawerType","gestureHandlerProps","hideStatusBarOnOpen","keyboardDismissMode","onClose","onOpen","open","overlayStyle","renderDrawerContent","renderSceneContent","statusBarAnimation","swipeDistanceThreshold","swipeEdgeWidth","swipeEnabled","swipeVelocityThreshold","overlayAccessibilityLabel","getDrawerWidth","width","StyleSheet","flatten","endsWith","percentage","Number","replace","isFinite","drawerWidth","isOpen","isRight","getDrawerTranslationX","useCallback","hideStatusBar","hide","StatusBar","setHidden","useEffect","interactionHandleRef","useRef","startInteraction","current","createInteractionHandle","endInteraction","clearInteractionHandle","hideKeyboard","dismiss","onGestureStart","onGestureFinish","hitSlop","right","undefined","left","touchStartX","touchX","translationX","gestureState","UNDETERMINED","toggleDrawer","isUserInitiated","velocity","translateX","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","onGestureEvent","onStart","event","ctx","hasCalledOnStart","startX","state","x","onActive","onEnd","nextOpen","abs","velocityX","onFinish","touchDistance","ACTIVE","isRTL","getConstants","drawerAnimatedStyle","distanceFromEdge","transform","contentAnimatedStyle","progress","styles","main","flexDirection","content","OS","container","position","zIndex","create","top","bottom","maxWidth","flex","select","web","default","overflow"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;;;;;;AAUA,SACEK,iBADF,EAGEC,KAAK,IAAIC,YAHX,QAIO,8BAJP;AAKA,OAAOC,QAAP,IACEC,WADF,EAEEC,OAFF,EAGEC,yBAHF,EAIEC,gBAJF,EAKEC,eALF,EAMEC,cANF,EAOEC,UAPF,QAQO,yBARP;AAWA,OAAOC,qBAAP;AACA,OAAOC,OAAP;AAEA,IAAMC,sBAAsB,GAAG,CAA/B;AACA,IAAMC,oBAAoB,GAAG,KAA7B;;AAQA,IAAMC,MAAM;EAAA,qBAAIC,KAAJ,EAAmBC,KAAnB,EAAkCC,GAAlC,EAAkD;IAG5D,OAAOC,IAAI,CAACC,GAALD,CAASA,IAAI,CAACE,GAALF,CAASH,KAATG,EAAgBF,KAAhBE,CAATA,EAAiCD,GAAjCC,CAAP;EACD,CAJW;;EAAA;EAAA;EAAA;EAAA;;EAAA;;EAAA;AAAA,GAAZ;;AAMA,eAAe,SAASG,MAAT,CAAe,IAAf,EAoBC;EApBe,IAC7BC,UAD6B,GAoBjB,IApBiB,CAC7BA,UAD6B;EAAA,IAE7BC,cAF6B,GAoBjB,IApBiB,CAE7BA,cAF6B;EAAA,IAG7BC,WAH6B,GAoBjB,IApBiB,CAG7BA,WAH6B;EAAA,IAI7BC,UAJ6B,GAoBjB,IApBiB,CAI7BA,UAJ6B;EAAA,IAK7BC,mBAL6B,GAoBjB,IApBiB,CAK7BA,mBAL6B;EAAA,IAM7BC,mBAN6B,GAoBjB,IApBiB,CAM7BA,mBAN6B;EAAA,IAO7BC,mBAP6B,GAoBjB,IApBiB,CAO7BA,mBAP6B;EAAA,IAQ7BC,OAR6B,GAoBjB,IApBiB,CAQ7BA,OAR6B;EAAA,IAS7BC,MAT6B,GAoBjB,IApBiB,CAS7BA,MAT6B;EAAA,IAU7BC,IAV6B,GAoBjB,IApBiB,CAU7BA,IAV6B;EAAA,IAW7BC,YAX6B,GAoBjB,IApBiB,CAW7BA,YAX6B;EAAA,IAY7BC,mBAZ6B,GAoBjB,IApBiB,CAY7BA,mBAZ6B;EAAA,IAa7BC,kBAb6B,GAoBjB,IApBiB,CAa7BA,kBAb6B;EAAA,IAc7BC,kBAd6B,GAoBjB,IApBiB,CAc7BA,kBAd6B;EAAA,IAe7BC,sBAf6B,GAoBjB,IApBiB,CAe7BA,sBAf6B;EAAA,IAgB7BC,cAhB6B,GAoBjB,IApBiB,CAgB7BA,cAhB6B;EAAA,IAiB7BC,YAjB6B,GAoBjB,IApBiB,CAiB7BA,YAjB6B;EAAA,IAkB7BC,sBAlB6B,GAoBjB,IApBiB,CAkB7BA,sBAlB6B;EAAA,IAmB7BC,yBAnB6B,GAoBjB,IApBiB,CAmB7BA,yBAnB6B;;EAqB7B,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAc;IACnC,YACEE,UAAU,CAACC,OAAXD,CAAmBnB,WAAnBmB,KAAmC,EADrC;IAAA,wBAAQD,KAAR;IAAA,IAAQA,KAAR,4BAAgB7B,oBAAhB;;IAGA,IAAI,OAAO6B,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,CAACG,QAANH,CAAe,GAAfA,CAAjC,EAAsD;MAEpD,IAAMI,UAAU,GAAGC,MAAM,CAACL,KAAK,CAACM,OAANN,CAAc,IAAdA,EAAoB,EAApBA,CAAD,CAAzB;;MAEA,IAAIK,MAAM,CAACE,QAAPF,CAAgBD,UAAhBC,CAAJ,EAAiC;QAC/B,OAAOzB,UAAU,CAACoB,KAAXpB,IAAoBwB,UAAU,GAAG,GAAjCxB,CAAP;MACF;IACF;;IAEA,OAAO,OAAOoB,KAAP,KAAiB,QAAjB,GAA4BA,KAA5B,GAAoC,CAA3C;EACD,CAdD;;EAgBA,IAAMQ,WAAW,GAAGT,cAAc,EAAlC;EAEA,IAAMU,MAAM,GAAG1B,UAAU,KAAK,WAAfA,GAA6B,IAA7BA,GAAoCM,IAAnD;EACA,IAAMqB,OAAO,GAAG7B,cAAc,KAAK,OAAnC;EAEA,IAAM8B,qBAAqB,GAAG3D,KAAK,CAAC4D,WAAN5D;IAAAA,qBAC3BqC,IAD2BrC,EACT;MAGjB,IAAI6B,cAAc,KAAK,MAAvB,EAA+B;QAC7B,OAAOQ,IAAI,GAAG,CAAH,GAAO,CAACmB,WAAnB;MACF;;MAEA,OAAOnB,IAAI,GAAG,CAAH,GAAOmB,WAAlB;IACD,CAT2BxD;;IAAAA;MAAAA,gBArFhC,cAqFgCA;MAAAA,aA3DZ;IA2DYA;IAAAA;IAAAA;IAAAA;;IAAAA;;IAAAA;EAAAA,KAU5B,CAAC6B,cAAD,EAAiB2B,WAAjB,CAV4BxD,CAA9B;EAaA,IAAM6D,aAAa,GAAG7D,KAAK,CAAC4D,WAAN5D,CACnB8D,UAAAA,IAAa,EAAK;IACjB,IAAI7B,mBAAJ,EAAyB;MACvB8B,SAAS,CAACC,SAAVD,CAAoBD,IAApBC,EAA0BtB,kBAA1BsB;IACF;EACD,CALmB/D,EAMpB,CAACiC,mBAAD,EAAsBQ,kBAAtB,CANoBzC,CAAtB;EASAA,KAAK,CAACiE,SAANjE,CAAgB,YAAM;IACpB6D,aAAa,CAACJ,MAAD,CAAbI;IAEA,OAAO;MAAA,OAAMA,aAAa,CAAC,KAAD,CAAnB;IAAA,CAAP;EACD,CAJD7D,EAIG,CAACyD,MAAD,EAASxB,mBAAT,EAA8BQ,kBAA9B,EAAkDoB,aAAlD,CAJH7D;EAMA,IAAMkE,oBAAoB,GAAGlE,KAAK,CAACmE,MAANnE,CAA4B,IAA5BA,CAA7B;;EAEA,IAAMoE,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;IAC7BF,oBAAoB,CAACG,OAArBH,GAA+BhE,kBAAkB,CAACoE,uBAAnBpE,EAA/BgE;EACD,CAFD;;EAIA,IAAMK,cAAc,GAAG,SAAjBA,cAAiB,GAAM;IAC3B,IAAIL,oBAAoB,CAACG,OAArBH,IAAgC,IAApC,EAA0C;MACxChE,kBAAkB,CAACsE,sBAAnBtE,CAA0CgE,oBAAoB,CAACG,OAA/DnE;MACAgE,oBAAoB,CAACG,OAArBH,GAA+B,IAA/BA;IACF;EACD,CALD;;EAOA,IAAMO,YAAY,GAAG,SAAfA,YAAe,GAAM;IACzB,IAAIvC,mBAAmB,KAAK,SAA5B,EAAuC;MACrC/B,QAAQ,CAACuE,OAATvE;IACF;EACD,CAJD;;EAMA,IAAMwE,cAAc,GAAG,SAAjBA,cAAiB,GAAM;IAC3BP,gBAAgB;IAChBK,YAAY;IACZZ,aAAa,CAAC,IAAD,CAAbA;EACD,CAJD;;EAMA,IAAMe,eAAe,GAAG,SAAlBA,eAAkB,GAAM;IAC5BL,cAAc;EACf,CAFD;;EAMA,IAAMM,OAAO,GAAGnB,OAAO,GAGnB;IAAEoB,KAAK,EAAE,CAAT;IAAY9B,KAAK,EAAES,MAAM,GAAGsB,SAAH,GAAepC;EAAxC,CAHmB,GAInB;IAAEqC,IAAI,EAAE,CAAR;IAAWhC,KAAK,EAAES,MAAM,GAAGsB,SAAH,GAAepC;EAAvC,CAJJ;EAMA,IAAMsC,WAAW,GAAGnE,cAAc,CAAC,CAAD,CAAlC;EACA,IAAMoE,MAAM,GAAGpE,cAAc,CAAC,CAAD,CAA7B;EACA,IAAMqE,YAAY,GAAGrE,cAAc,CAAC6C,qBAAqB,CAACtB,IAAD,CAAtB,CAAnC;EACA,IAAM+C,YAAY,GAAGtE,cAAc,CAAeP,YAAY,CAAC8E,YAA5B,CAAnC;EAEA,IAAMC,YAAY,GAAGtF,KAAK,CAAC4D,WAAN5D;IAAAA,qBACnB,KADmBA,EACqC;MAAvD,IAAEqC,IAAF,GAAkD,KAAlD,CAAEA,IAAF;MAAA,IAAQkD,eAAR,GAAkD,KAAlD,CAAQA,eAAR;MAAA,IAAyBC,QAAzB,GAAkD,KAAlD,CAAyBA,QAAzB;MAGC,IAAMC,UAAU,GAAG9B,qBAAqB,CAACtB,IAAD,CAAxC;MAEA4C,WAAW,CAAC5D,KAAZ4D,GAAoB,CAApBA;MACAC,MAAM,CAAC7D,KAAP6D,GAAe,CAAfA;MACAC,YAAY,CAAC9D,KAAb8D,GAAqBpE,UAAU,CAAC0E,UAAD,EAAa;QAC1CD,QAAQ,EAARA,QAD0C;QAE1CE,SAAS,EAAE,IAF+B;QAG1CC,OAAO,EAAE,GAHiC;QAI1CC,IAAI,EAAE,CAJoC;QAK1CC,iBAAiB,EAAE,IALuB;QAM1CC,yBAAyB,EAAE,IANe;QAO1CC,kBAAkB,EAAE;MAPsB,CAAb,CAA/BZ;;MAUA,IAAI,CAACI,eAAL,EAAsB;QACpB;MACF;;MAEA,IAAIlD,IAAJ,EAAU;QACR3B,OAAO,CAAC0B,MAAD,CAAP1B;MACD,CAFD,MAEO;QACLA,OAAO,CAACyB,OAAD,CAAPzB;MACF;IACD,CA3BkBV;;IAAAA;MAAAA,uBA/HjBkB,qBA+HiBlB;MAAAA,aA9HvB,WA8HuBA;MAAAA,QAtHvB,MAsHuBA;MAAAA,cArHrB,YAqHqBA;MAAAA,YArHZ,UAqHYA;MAAAA,SApGrBuC,OAoGqBvC;MAAAA,QAtGjB,MAsGiBA;MAAAA,SApGrBuC;IAoGqBvC;IAAAA;IAAAA;IAAAA;;IAAAA;;IAAAA;EAAAA,KA4BnB,CAAC2D,qBAAD,EAAwBxB,OAAxB,EAAiCC,MAAjC,EAAyC6C,WAAzC,EAAsDC,MAAtD,EAA8DC,YAA9D,CA5BmBnF,CAArB;EA+BAA,KAAK,CAACiE,SAANjE,CACE;IAAA,OAAMsF,YAAY,CAAC;MAAEjD,IAAI,EAAJA,IAAF;MAAQkD,eAAe,EAAE;IAAzB,CAAD,CAAlB;EAAA,CADFvF,EAEE,CAACqC,IAAD,EAAOiD,YAAP,CAFFtF;EAKA,IAAMgG,cAAc,GAAGrF,yBAAyB,CAG9C;IACAsF,OAAO;MAAA,qBAAGC,KAAH,EAAUC,GAAV,EAAkB;QACvBA,GAAG,CAACC,gBAAJD,GAAuB,KAAvBA;QACAA,GAAG,CAACE,MAAJF,GAAahB,YAAY,CAAC9D,KAA1B8E;QACAf,YAAY,CAAC/D,KAAb+D,GAAqBc,KAAK,CAACI,KAA3BlB;QACAH,WAAW,CAAC5D,KAAZ4D,GAAoBiB,KAAK,CAACK,CAA1BtB;MACD,CALM;;MAAA;QAAA,cAzLT5E,YAyLS;QAAA,cArLX,YAqLW;QAAA,aA1KX;MA0KW;MAAA;MAAA;MAAA;;MAAA;;MAAA;IAAA,GADP;IAOAmG,QAAQ;MAAA,qBAAGN,KAAH,EAAUC,GAAV,EAAkB;QACxBjB,MAAM,CAAC7D,KAAP6D,GAAegB,KAAK,CAACK,CAArBrB;QACAC,YAAY,CAAC9D,KAAb8D,GAAqBgB,GAAG,CAACE,MAAJF,GAAaD,KAAK,CAACf,YAAxCA;QACAC,YAAY,CAAC/D,KAAb+D,GAAqBc,KAAK,CAACI,KAA3BlB;;QAKA,IAAI,CAACe,GAAG,CAACC,gBAAT,EAA2B;UACzBD,GAAG,CAACC,gBAAJD,GAAuB,IAAvBA;UACAzF,OAAO,CAACiE,cAAD,CAAPjE;QACF;MACD,CAZO;;MAAA;QAAA,QAzMZ,MAyMY;QAAA,cAhMZ,YAgMY;QAAA,cA3LZ,YA2LY;QAAA,SAnKV,OAmKU;QAAA,gBAnKD;MAmKC;MAAA;MAAA;MAAA;;MAAA;;MAAA;IAAA,GAPR;IAoBA+F,KAAK;MAAA,qBAAGP,KAAH,EAAa;QAChBd,YAAY,CAAC/D,KAAb+D,GAAqBc,KAAK,CAACI,KAA3BlB;QAEA,IAAMsB,QAAQ,GACXlF,IAAI,CAACmF,GAALnF,CAAS0E,KAAK,CAACf,YAAf3D,IAA+BN,sBAA/BM,IACCA,IAAI,CAACmF,GAALnF,CAAS0E,KAAK,CAACf,YAAf3D,IAA+BqB,sBADhCrB,IAEDA,IAAI,CAACmF,GAALnF,CAAS0E,KAAK,CAACf,YAAf3D,IAA+BkB,sBAF9BlB,GAGGK,cAAc,KAAK,MAAnBA,GAEE,CAACqE,KAAK,CAACU,SAANV,KAAoB,CAApBA,GAAwBA,KAAK,CAACf,YAA9Be,GAA6CA,KAAK,CAACU,SAApD,IAAiE,CAFnE/E,GAIE,CAACqE,KAAK,CAACU,SAANV,KAAoB,CAApBA,GAAwBA,KAAK,CAACf,YAA9Be,GAA6CA,KAAK,CAACU,SAApD,IAAiE,CAPtEpF,GAQGa,IATN;QAWAiD,YAAY,CAAC;UACXjD,IAAI,EAAEqE,QADK;UAEXnB,eAAe,EAAE,IAFN;UAGXC,QAAQ,EAAEU,KAAK,CAACU;QAHL,CAAD,CAAZtB;MAKD,CAnBI;;MAAA;QAAA,cAtNT,YAsNS;QAAA,wBA1Mc,sBA0Md;QAAA,wBAzM4B,sBAyM5B;QAAA,wBAzM4B,sBAyM5B;QAAA,gBAzM4B,cAyM5B;QAAA,MA7L4D,IA6L5D;QAAA,cA5LT;MA4LS;MAAA;MAAA;MAAA;;MAAA;;MAAA;IAAA,GApBL;IAwCAuB,QAAQ;MAAA,uBAAQ;QACdnG,OAAO,CAACkE,eAAD,CAAPlE;MACF,CAFQ;;MAAA;QAAA,SA1OZ,OA0OY;QAAA,iBAzOVT;MAyOU;MAAA;MAAA;MAAA;;MAAA;;MAAA;IAAA;EAxCR,CAH8C,CAAhD;EAgDA,IAAMwF,UAAU,GAAG5E,eAAe;IAAA,uBAAO;MA0BvC,IAAMiG,aAAa,GACjB/E,UAAU,KAAK,OAAfA,IAA0BqD,YAAY,CAAC/D,KAAb+D,KAAuB7E,YAAY,CAACwG,MAA9DhF,GACIX,MAAM,CACJS,cAAc,KAAK,MAAnBA,GACIoD,WAAW,CAAC5D,KAAZ4D,GAAoBzB,WADxB3B,GAEID,UAAU,CAACoB,KAAXpB,GAAmB4B,WAAnB5B,GAAiCqD,WAAW,CAAC5D,KAH7C,EAIJ,CAJI,EAKJO,UAAU,CAACoB,KALP,CADVjB,GAQI,CATN;MAWA,IAAM0D,UAAU,GACd5D,cAAc,KAAK,MAAnBA,GACIT,MAAM,CAAC+D,YAAY,CAAC9D,KAAb8D,GAAqB2B,aAAtB,EAAqC,CAACtD,WAAtC,EAAmD,CAAnD,CADV3B,GAEIT,MAAM,CAAC+D,YAAY,CAAC9D,KAAb8D,GAAqB2B,aAAtB,EAAqC,CAArC,EAAwCtD,WAAxC,CAHZ;MAKA,OAAOiC,UAAP;IACD,CA3CiC;;IAAA;MAAA,YAxLf,UAwLe;MAAA,cAxLf,YAwLe;MAAA;QAAA,QAxLf,YAAA,CAAA;MAwLe;MAAA,QAvLhB,MAuLgB;MAAA,gBAvLlCjD,cAuLkC;MAAA,aAxLf,WAwLe;MAAA,aAvLhB,WAuLgB;MAAA;QAAA,OAxLf,UAAA,CAAA;MAwLe;MAAA,cAvLhB;IAuLgB;IAAA;IAAA;IAAA;;IAAA;;IAAA;EAAA,IAAlC;EA6CA,IAAMwE,KAAK,GAAG/G,WAAW,CAACgH,YAAZhH,GAA2B+G,KAAzC;EACA,IAAME,mBAAmB,GAAGtG,gBAAgB;IAAA,uBAAO;MACjD,IAAMuG,gBAAgB,GAAGvF,UAAU,CAACoB,KAAXpB,GAAmB4B,WAA5C;MAEA,OAAO;QACL4D,SAAS,EACPrF,UAAU,KAAK,WAAfA,GAGI,EAHJA,GAII,CACE;UACE0D,UAAU,EAER,CAAC1D,UAAU,KAAK,MAAfA,GAAwB,CAAxBA,GAA4B0D,UAAU,CAACpE,KAAxC,KACCQ,cAAc,KAAK,MAAnBA,GACGmF,KAAK,GACH,CAACG,gBADE,GAEH,CAHLtF,GAIGmF,KAAK,GACL,CADK,GAELG,gBAPJ;QAHJ,CADF;MAND,CAAP;IAqBD,CAxB2C;;IAAA;MAAA;QAAA,OA3R5CjH,UAAAA,CAAAA;MA2R4C;MAAA,aA1R5CC,WA0R4C;MAAA,YAhQxCgB,UAgQwC;MAAA,YAhQZ,UAgQY;MAAA,gBAhQZ,cAgQY;MAAA,OAhQZ;IAgQY;IAAA;IAAA;IAAA;IAAA;;IAAA;;IAAA;EAAA,IAA5C;EA0BA,IAAMkG,oBAAoB,GAAGzG,gBAAgB;IAAA,uBAAO;MAClD,OAAO;QACLwG,SAAS,EACPrF,UAAU,KAAK,WAAfA,GAGI,EAHJA,GAII,CACE;UACE0D,UAAU,EAER1D,UAAU,KAAK,OAAfA,GACI,CADJA,GAEI0D,UAAU,CAACpE,KAAXoE,GACAjC,WAAW,IAAI3B,cAAc,KAAK,MAAnBA,GAA4B,CAA5BA,GAAgC,CAAC,CAArC;QANnB,CADF;MAND,CAAP;IAiBD,CAlB4C;;IAAA;MAAA,YA3RzCX,UA2RyC;MAAA,YA3Rf,UA2Re;MAAA,aA3Rf,WA2Re;MAAA,gBA3Rf;IA2Re;IAAA;IAAA;IAAA;IAAA;;IAAA;;IAAA;EAAA,IAA7C;EAoBA,IAAMoG,QAAQ,GAAGzG,eAAe;IAAA,uBAAO;MACrC,OAAOkB,UAAU,KAAK,WAAfA,GACH,CADGA,GAEHtB,WAAW,CACTgF,UAAU,CAACpE,KADF,EAET,CAACsC,qBAAqB,CAAC,KAAD,CAAtB,EAA+BA,qBAAqB,CAAC,IAAD,CAApD,CAFS,EAGT,CAAC,CAAD,EAAI,CAAJ,CAHS,CAFf;IAOD,CAR+B;;IAAA;MAAA,YA1UhC1D,UA0UgC;MAAA,aAxUhCE,WAwUgC;MAAA,YAvUhCC,UAuUgC;MAAA,uBAnU3B;IAmU2B;IAAA;IAAA;IAAA;;IAAA;;IAAA;EAAA,IAAhC;EAUA,OACE,KAAA,CAAA,aAAA,CAAC,qBAAqB,CAAC,QAAvB,EAA+B;IAAC,KAAK,EAAEkH;EAAR,CAA/B,EACE,KAAA,CAAA,aAAA,CAAC,iBAAD,EAAkB,QAAA,CAAA;IAChB,aAAa,EAAE,CAAC,CAACpG,sBAAF,EAA0BA,sBAA1B,CADC;IAEhB,WAAW,EAAE,CAAC,CAACA,sBAAF,EAA0BA,sBAA1B,CAFG;IAGhB,OAAO,EAAE2D,OAHO;IAIhB,OAAO,EAAE9C,UAAU,KAAK,WAAfA,IAA8Ba,YAJvB;IAKhB,cAAc,EAAEoD;EALA,CAAA,EAMZhE,mBANY,CAAlB,EASE,KAAA,CAAA,aAAA,CAAC,QAAQ,CAAC,IAAV,EAAc;IACZ,KAAK,EAAE,CACLuF,MAAM,CAACC,IADF,EAEL;MACEC,aAAa,EACX1F,UAAU,KAAK,WAAfA,IAA8B,CAAC2B,OAA/B3B,GAAyC,aAAzCA,GAAyD;IAF7D,CAFK;EADK,CAAd,EASE,KAAA,CAAA,aAAA,CAAC,QAAQ,CAAC,IAAV,EAAc;IAAC,KAAK,EAAE,CAACwF,MAAM,CAACG,OAAR,EAAiBL,oBAAjB;EAAR,CAAd,EACE,KAAA,CAAA,aAAA,CAAC,IAAD,EAAK;IACH,2BAA2B,EAAE5D,MAAM,IAAI1B,UAAU,KAAK,WADnD;IAEH,yBAAyB,EACvB0B,MAAM,IAAI1B,UAAU,KAAK,WAAzB0B,GACI,qBADJA,GAEI,MALH;IAOH,KAAK,EAAE8D,MAAM,CAACG;EAPX,CAAL,EASGlF,kBAAkB,EATrB,CADF,EAYGT,UAAU,KAAK,WAAfA,GACC,KAAA,CAAA,aAAA,CAAC,OAAD,EAAQ;IACN,QAAQ,EAAEuF,QADJ;IAEN,OAAO,EAAE;MAAA,OACPhC,YAAY,CAAC;QAAEjD,IAAI,EAAE,KAAR;QAAekD,eAAe,EAAE;MAAhC,CAAD,CADL;IAAA,CAFH;IAKN,KAAK,EAAEjD,YALD;IAMN,kBAAkB,EAAEQ;EANd,CAAR,CADDf,GASG,IArBN,CATF,EAgCE,KAAA,CAAA,aAAA,CAAC,QAAQ,CAAC,IAAV,EAAc;IACZ,qBAAqB,EAAE3B,QAAQ,CAACuH,EAATvH,KAAgB,KAD3B;IAEZ,KAAK,EAAE,CACLmH,MAAM,CAACK,SADF,EAEL;MACEC,QAAQ,EAAE9F,UAAU,KAAK,WAAfA,GAA6B,UAA7BA,GAA0C,UADtD;MAEE+F,MAAM,EAAE/F,UAAU,KAAK,MAAfA,GAAwB,CAAC,CAAzBA,GAA6B;IAFvC,CAFK,EAMLmF,mBANK,EAOLpF,WAPK;EAFK,CAAd,EAYGS,mBAAmB,EAZtB,CAhCF,CATF,CADF,CADF;AA6DF;AAEA,IAAMgF,MAAM,GAAGtE,UAAU,CAAC8E,MAAX9E,CAAkB;EAC/B2E,SAAS,EAAE;IACTI,GAAG,EAAE,CADI;IAETC,MAAM,EAAE,CAFC;IAGTC,QAAQ,EAAE,MAHD;IAITlF,KAAK,EAAE7B;EAJE,CADoB;EAO/BuG,OAAO,EAAE;IACPS,IAAI,EAAE;EADC,CAPsB;EAU/BX,IAAI;IACFW,IAAI,EAAE;EADJ,GAEC/H,QAAQ,CAACgI,MAAThI,CAAgB;IAGjBiI,GAAG,EAAE,IAHY;IAIjBC,OAAO,EAAE;MAAEC,QAAQ,EAAE;IAAZ;EAJQ,CAAhBnI,CAFD;AAV2B,CAAlB6C,CAAf","sourceRoot":"../../../../src","sourcesContent":["function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from 'react';\nimport { I18nManager, InteractionManager, Keyboard, Platform, StatusBar, StyleSheet, View } from 'react-native';\nimport { PanGestureHandler, State as GestureState } from 'react-native-gesture-handler';\nimport Animated, { interpolate, runOnJS, useAnimatedGestureHandler, useAnimatedStyle, useDerivedValue, useSharedValue, withSpring } from 'react-native-reanimated';\nimport DrawerProgressContext from '../../utils/DrawerProgressContext';\nimport Overlay from './Overlay';\nconst SWIPE_DISTANCE_MINIMUM = 5;\nconst DEFAULT_DRAWER_WIDTH = '80%';\nconst minmax = (value, start, end) => {\n  'worklet';\n\n  return Math.min(Math.max(value, start), end);\n};\nexport default function Drawer(_ref) {\n  let {\n    dimensions,\n    drawerPosition,\n    drawerStyle,\n    drawerType,\n    gestureHandlerProps,\n    hideStatusBarOnOpen,\n    keyboardDismissMode,\n    onClose,\n    onOpen,\n    open,\n    overlayStyle,\n    renderDrawerContent,\n    renderSceneContent,\n    statusBarAnimation,\n    swipeDistanceThreshold,\n    swipeEdgeWidth,\n    swipeEnabled,\n    swipeVelocityThreshold,\n    overlayAccessibilityLabel\n  } = _ref;\n  const getDrawerWidth = () => {\n    const {\n      width = DEFAULT_DRAWER_WIDTH\n    } = StyleSheet.flatten(drawerStyle) || {};\n    if (typeof width === 'string' && width.endsWith('%')) {\n      // Try to calculate width if a percentage is given\n      const percentage = Number(width.replace(/%$/, ''));\n      if (Number.isFinite(percentage)) {\n        return dimensions.width * (percentage / 100);\n      }\n    }\n    return typeof width === 'number' ? width : 0;\n  };\n  const drawerWidth = getDrawerWidth();\n  const isOpen = drawerType === 'permanent' ? true : open;\n  const isRight = drawerPosition === 'right';\n  const getDrawerTranslationX = React.useCallback(open => {\n    'worklet';\n\n    if (drawerPosition === 'left') {\n      return open ? 0 : -drawerWidth;\n    }\n    return open ? 0 : drawerWidth;\n  }, [drawerPosition, drawerWidth]);\n  const hideStatusBar = React.useCallback(hide => {\n    if (hideStatusBarOnOpen) {\n      StatusBar.setHidden(hide, statusBarAnimation);\n    }\n  }, [hideStatusBarOnOpen, statusBarAnimation]);\n  React.useEffect(() => {\n    hideStatusBar(isOpen);\n    return () => hideStatusBar(false);\n  }, [isOpen, hideStatusBarOnOpen, statusBarAnimation, hideStatusBar]);\n  const interactionHandleRef = React.useRef(null);\n  const startInteraction = () => {\n    interactionHandleRef.current = InteractionManager.createInteractionHandle();\n  };\n  const endInteraction = () => {\n    if (interactionHandleRef.current != null) {\n      InteractionManager.clearInteractionHandle(interactionHandleRef.current);\n      interactionHandleRef.current = null;\n    }\n  };\n  const hideKeyboard = () => {\n    if (keyboardDismissMode === 'on-drag') {\n      Keyboard.dismiss();\n    }\n  };\n  const onGestureStart = () => {\n    startInteraction();\n    hideKeyboard();\n    hideStatusBar(true);\n  };\n  const onGestureFinish = () => {\n    endInteraction();\n  };\n\n  // FIXME: Currently hitSlop is broken when on Android when drawer is on right\n  // https://github.com/software-mansion/react-native-gesture-handler/issues/569\n  const hitSlop = isRight ?\n  // Extend hitSlop to the side of the screen when drawer is closed\n  // This lets the user drag the drawer from the side of the screen\n  {\n    right: 0,\n    width: isOpen ? undefined : swipeEdgeWidth\n  } : {\n    left: 0,\n    width: isOpen ? undefined : swipeEdgeWidth\n  };\n  const touchStartX = useSharedValue(0);\n  const touchX = useSharedValue(0);\n  const translationX = useSharedValue(getDrawerTranslationX(open));\n  const gestureState = useSharedValue(GestureState.UNDETERMINED);\n  const toggleDrawer = React.useCallback(_ref2 => {\n    'worklet';\n\n    let {\n      open,\n      isUserInitiated,\n      velocity\n    } = _ref2;\n    const translateX = getDrawerTranslationX(open);\n    touchStartX.value = 0;\n    touchX.value = 0;\n    translationX.value = withSpring(translateX, {\n      velocity,\n      stiffness: 1000,\n      damping: 500,\n      mass: 3,\n      overshootClamping: true,\n      restDisplacementThreshold: 0.01,\n      restSpeedThreshold: 0.01\n    });\n    if (!isUserInitiated) {\n      return;\n    }\n    if (open) {\n      runOnJS(onOpen)();\n    } else {\n      runOnJS(onClose)();\n    }\n  }, [getDrawerTranslationX, onClose, onOpen, touchStartX, touchX, translationX]);\n  React.useEffect(() => toggleDrawer({\n    open,\n    isUserInitiated: false\n  }), [open, toggleDrawer]);\n  const onGestureEvent = useAnimatedGestureHandler({\n    onStart: (event, ctx) => {\n      ctx.hasCalledOnStart = false;\n      ctx.startX = translationX.value;\n      gestureState.value = event.state;\n      touchStartX.value = event.x;\n    },\n    onActive: (event, ctx) => {\n      touchX.value = event.x;\n      translationX.value = ctx.startX + event.translationX;\n      gestureState.value = event.state;\n\n      // onStart will _always_ be called, even when the activation\n      // criteria isn't met yet. This makes sure onGestureStart is only\n      // called when the criteria is really met.\n      if (!ctx.hasCalledOnStart) {\n        ctx.hasCalledOnStart = true;\n        runOnJS(onGestureStart)();\n      }\n    },\n    onEnd: event => {\n      gestureState.value = event.state;\n      const nextOpen = Math.abs(event.translationX) > SWIPE_DISTANCE_MINIMUM && Math.abs(event.translationX) > swipeVelocityThreshold || Math.abs(event.translationX) > swipeDistanceThreshold ? drawerPosition === 'left' ?\n      // If swiped to right, open the drawer, otherwise close it\n      (event.velocityX === 0 ? event.translationX : event.velocityX) > 0 :\n      // If swiped to left, open the drawer, otherwise close it\n      (event.velocityX === 0 ? event.translationX : event.velocityX) < 0 : open;\n      toggleDrawer({\n        open: nextOpen,\n        isUserInitiated: true,\n        velocity: event.velocityX\n      });\n    },\n    onFinish: () => {\n      runOnJS(onGestureFinish)();\n    }\n  });\n  const translateX = useDerivedValue(() => {\n    // Comment stolen from react-native-gesture-handler/DrawerLayout\n    //\n    // While closing the drawer when user starts gesture outside of its area (in greyed\n    // out part of the window), we want the drawer to follow only once finger reaches the\n    // edge of the drawer.\n    // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n    // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n    // an arrow pointing left\n    // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    +---------------+    +---------------+    +---------------+    +---------------+\n    //\n    // For the above to work properly we define animated value that will keep start position\n    // of the gesture. Then we use that value to calculate how much we need to subtract from\n    // the translationX. If the gesture started on the greyed out area we take the distance from the\n    // edge of the drawer to the start position. Otherwise we don't subtract at all and the\n    // drawer be pulled back as soon as you start the pan.\n    //\n    // This is used only when drawerType is \"front\"\n    const touchDistance = drawerType === 'front' && gestureState.value === GestureState.ACTIVE ? minmax(drawerPosition === 'left' ? touchStartX.value - drawerWidth : dimensions.width - drawerWidth - touchStartX.value, 0, dimensions.width) : 0;\n    const translateX = drawerPosition === 'left' ? minmax(translationX.value + touchDistance, -drawerWidth, 0) : minmax(translationX.value - touchDistance, 0, drawerWidth);\n    return translateX;\n  });\n  const isRTL = I18nManager.getConstants().isRTL;\n  const drawerAnimatedStyle = useAnimatedStyle(() => {\n    const distanceFromEdge = dimensions.width - drawerWidth;\n    return {\n      transform: drawerType === 'permanent' ?\n      // Reanimated needs the property to be present, but it results in Browser bug\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=20574\n      [] : [{\n        translateX:\n        // The drawer stays in place when `drawerType` is `back`\n        (drawerType === 'back' ? 0 : translateX.value) + (drawerPosition === 'left' ? isRTL ? -distanceFromEdge : 0 : isRTL ? 0 : distanceFromEdge)\n      }]\n    };\n  });\n  const contentAnimatedStyle = useAnimatedStyle(() => {\n    return {\n      transform: drawerType === 'permanent' ?\n      // Reanimated needs the property to be present, but it results in Browser bug\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=20574\n      [] : [{\n        translateX:\n        // The screen content stays in place when `drawerType` is `front`\n        drawerType === 'front' ? 0 : translateX.value + drawerWidth * (drawerPosition === 'left' ? 1 : -1)\n      }]\n    };\n  });\n  const progress = useDerivedValue(() => {\n    return drawerType === 'permanent' ? 1 : interpolate(translateX.value, [getDrawerTranslationX(false), getDrawerTranslationX(true)], [0, 1]);\n  });\n  return /*#__PURE__*/React.createElement(DrawerProgressContext.Provider, {\n    value: progress\n  }, /*#__PURE__*/React.createElement(PanGestureHandler, _extends({\n    activeOffsetX: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n    failOffsetY: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n    hitSlop: hitSlop,\n    enabled: drawerType !== 'permanent' && swipeEnabled,\n    onGestureEvent: onGestureEvent\n  }, gestureHandlerProps), /*#__PURE__*/React.createElement(Animated.View, {\n    style: [styles.main, {\n      flexDirection: drawerType === 'permanent' && !isRight ? 'row-reverse' : 'row'\n    }]\n  }, /*#__PURE__*/React.createElement(Animated.View, {\n    style: [styles.content, contentAnimatedStyle]\n  }, /*#__PURE__*/React.createElement(View, {\n    accessibilityElementsHidden: isOpen && drawerType !== 'permanent',\n    importantForAccessibility: isOpen && drawerType !== 'permanent' ? 'no-hide-descendants' : 'auto',\n    style: styles.content\n  }, renderSceneContent()), drawerType !== 'permanent' ? /*#__PURE__*/React.createElement(Overlay, {\n    progress: progress,\n    onPress: () => toggleDrawer({\n      open: false,\n      isUserInitiated: true\n    }),\n    style: overlayStyle,\n    accessibilityLabel: overlayAccessibilityLabel\n  }) : null), /*#__PURE__*/React.createElement(Animated.View, {\n    removeClippedSubviews: Platform.OS !== 'ios',\n    style: [styles.container, {\n      position: drawerType === 'permanent' ? 'relative' : 'absolute',\n      zIndex: drawerType === 'back' ? -1 : 0\n    }, drawerAnimatedStyle, drawerStyle]\n  }, renderDrawerContent()))));\n}\nconst styles = StyleSheet.create({\n  container: {\n    top: 0,\n    bottom: 0,\n    maxWidth: '100%',\n    width: DEFAULT_DRAWER_WIDTH\n  },\n  content: {\n    flex: 1\n  },\n  main: {\n    flex: 1,\n    ...Platform.select({\n      // FIXME: We need to hide `overflowX` on Web so the translated content doesn't show offscreen.\n      // But adding `overflowX: 'hidden'` prevents content from collapsing the URL bar.\n      web: null,\n      default: {\n        overflow: 'hidden'\n      }\n    })\n  }\n});\n//# sourceMappingURL=Drawer.js.map"]},"metadata":{},"sourceType":"module"}