{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport SafeAreaView from \"../Components/SafeAreaView/SafeAreaView\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar ScrollView = require(\"../Components/ScrollView/ScrollView\");\n\nvar TouchableHighlight = require(\"../Components/Touchable/TouchableHighlight\");\n\nvar View = require(\"../Components/View/View\");\n\nvar StyleSheet = require(\"../StyleSheet/StyleSheet\");\n\nvar Text = require(\"../Text/Text\");\n\nvar ElementProperties = require(\"./ElementProperties\");\n\nvar NetworkOverlay = require(\"./NetworkOverlay\");\n\nvar PerformanceOverlay = require(\"./PerformanceOverlay\");\n\nvar React = require('react');\n\nvar InspectorPanel = function (_React$Component) {\n  _inherits(InspectorPanel, _React$Component);\n\n  var _super = _createSuper(InspectorPanel);\n\n  function InspectorPanel() {\n    _classCallCheck(this, InspectorPanel);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(InspectorPanel, [{\n    key: \"renderWaiting\",\n    value: function renderWaiting() {\n      if (this.props.inspecting) {\n        return _jsx(Text, {\n          style: styles.waitingText,\n          children: \"Tap something to inspect it\"\n        });\n      }\n\n      return _jsx(Text, {\n        style: styles.waitingText,\n        children: \"Nothing is inspected\"\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var contents;\n\n      if (this.props.inspected) {\n        contents = _jsx(ScrollView, {\n          style: styles.properties,\n          children: _jsx(ElementProperties, {\n            style: this.props.inspected.style,\n            frame: this.props.inspected.frame,\n            source: this.props.inspected.source,\n            hierarchy: this.props.hierarchy,\n            selection: this.props.selection,\n            setSelection: this.props.setSelection\n          })\n        });\n      } else if (this.props.perfing) {\n        contents = _jsx(PerformanceOverlay, {});\n      } else if (this.props.networking) {\n        contents = _jsx(NetworkOverlay, {});\n      } else {\n        contents = _jsx(View, {\n          style: styles.waiting,\n          children: this.renderWaiting()\n        });\n      }\n\n      return _jsxs(SafeAreaView, {\n        style: styles.container,\n        children: [!this.props.devtoolsIsOpen && contents, _jsxs(View, {\n          style: styles.buttonRow,\n          children: [_jsx(InspectorPanelButton, {\n            title: 'Inspect',\n            pressed: this.props.inspecting,\n            onClick: this.props.setInspecting\n          }), _jsx(InspectorPanelButton, {\n            title: 'Perf',\n            pressed: this.props.perfing,\n            onClick: this.props.setPerfing\n          }), _jsx(InspectorPanelButton, {\n            title: 'Network',\n            pressed: this.props.networking,\n            onClick: this.props.setNetworking\n          }), _jsx(InspectorPanelButton, {\n            title: 'Touchables',\n            pressed: this.props.touchTargeting,\n            onClick: this.props.setTouchTargeting\n          })]\n        })]\n      });\n    }\n  }]);\n\n  return InspectorPanel;\n}(React.Component);\n\nvar InspectorPanelButton = function (_React$Component2) {\n  _inherits(InspectorPanelButton, _React$Component2);\n\n  var _super2 = _createSuper(InspectorPanelButton);\n\n  function InspectorPanelButton() {\n    _classCallCheck(this, InspectorPanelButton);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(InspectorPanelButton, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      return _jsx(TouchableHighlight, {\n        onPress: function onPress() {\n          return _this.props.onClick(!_this.props.pressed);\n        },\n        style: [styles.button, this.props.pressed && styles.buttonPressed],\n        children: _jsx(Text, {\n          style: styles.buttonText,\n          children: this.props.title\n        })\n      });\n    }\n  }]);\n\n  return InspectorPanelButton;\n}(React.Component);\n\nvar styles = StyleSheet.create({\n  buttonRow: {\n    flexDirection: 'row'\n  },\n  button: {\n    backgroundColor: 'rgba(0, 0, 0, 0.3)',\n    margin: 2,\n    height: 30,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  buttonPressed: {\n    backgroundColor: 'rgba(255, 255, 255, 0.3)'\n  },\n  buttonText: {\n    textAlign: 'center',\n    color: 'white',\n    margin: 5\n  },\n  container: {\n    backgroundColor: 'rgba(0, 0, 0, 0.7)'\n  },\n  properties: {\n    height: 200\n  },\n  waiting: {\n    height: 100\n  },\n  waitingText: {\n    fontSize: 20,\n    textAlign: 'center',\n    marginVertical: 20,\n    color: 'white'\n  }\n});\nmodule.exports = InspectorPanel;","map":{"version":3,"names":["SafeAreaView","ScrollView","require","TouchableHighlight","View","StyleSheet","Text","ElementProperties","NetworkOverlay","PerformanceOverlay","React","InspectorPanel","props","inspecting","styles","waitingText","contents","inspected","properties","style","frame","source","hierarchy","selection","setSelection","perfing","networking","waiting","renderWaiting","container","devtoolsIsOpen","buttonRow","setInspecting","setPerfing","setNetworking","touchTargeting","setTouchTargeting","Component","InspectorPanelButton","onClick","pressed","button","buttonPressed","buttonText","title","create","flexDirection","backgroundColor","margin","height","justifyContent","alignItems","textAlign","color","fontSize","marginVertical","module","exports"],"sources":["/Users/zagarellagabriele/Desktop/Progetti/React Native/React-Native-Exercises/node_modules/react-native/Libraries/Inspector/InspectorPanel.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n'use strict';\n\nimport type {ViewStyleProp} from '../StyleSheet/StyleSheet';\n\nimport SafeAreaView from '../Components/SafeAreaView/SafeAreaView';\n\nconst ScrollView = require('../Components/ScrollView/ScrollView');\nconst TouchableHighlight = require('../Components/Touchable/TouchableHighlight');\nconst View = require('../Components/View/View');\nconst StyleSheet = require('../StyleSheet/StyleSheet');\nconst Text = require('../Text/Text');\nconst ElementProperties = require('./ElementProperties');\nconst NetworkOverlay = require('./NetworkOverlay');\nconst PerformanceOverlay = require('./PerformanceOverlay');\nconst React = require('react');\n\ntype Props = $ReadOnly<{|\n  devtoolsIsOpen: boolean,\n  inspecting: boolean,\n  setInspecting: (val: boolean) => void,\n  perfing: boolean,\n  setPerfing: (val: boolean) => void,\n  touchTargeting: boolean,\n  setTouchTargeting: (val: boolean) => void,\n  networking: boolean,\n  setNetworking: (val: boolean) => void,\n  hierarchy?: ?Array<{|name: string|}>,\n  selection?: ?number,\n  setSelection: number => mixed,\n  inspected?: ?$ReadOnly<{|\n    style?: ?ViewStyleProp,\n    frame?: ?$ReadOnly<{|\n      top?: ?number,\n      left?: ?number,\n      width?: ?number,\n      height: ?number,\n    |}>,\n    source?: ?{|\n      fileName?: string,\n      lineNumber?: number,\n    |},\n  |}>,\n|}>;\n\nclass InspectorPanel extends React.Component<Props> {\n  renderWaiting(): React.Node {\n    if (this.props.inspecting) {\n      return (\n        <Text style={styles.waitingText}>Tap something to inspect it</Text>\n      );\n    }\n    return <Text style={styles.waitingText}>Nothing is inspected</Text>;\n  }\n\n  render(): React.Node {\n    let contents;\n    if (this.props.inspected) {\n      contents = (\n        <ScrollView style={styles.properties}>\n          <ElementProperties\n            style={this.props.inspected.style}\n            frame={this.props.inspected.frame}\n            source={this.props.inspected.source}\n            // $FlowFixMe[incompatible-type] : Hierarchy should be non-nullable\n            hierarchy={this.props.hierarchy}\n            selection={this.props.selection}\n            setSelection={this.props.setSelection}\n          />\n        </ScrollView>\n      );\n    } else if (this.props.perfing) {\n      contents = <PerformanceOverlay />;\n    } else if (this.props.networking) {\n      contents = <NetworkOverlay />;\n    } else {\n      contents = <View style={styles.waiting}>{this.renderWaiting()}</View>;\n    }\n    return (\n      <SafeAreaView style={styles.container}>\n        {!this.props.devtoolsIsOpen && contents}\n        <View style={styles.buttonRow}>\n          <InspectorPanelButton\n            title={'Inspect'}\n            pressed={this.props.inspecting}\n            onClick={this.props.setInspecting}\n          />\n          <InspectorPanelButton\n            title={'Perf'}\n            pressed={this.props.perfing}\n            onClick={this.props.setPerfing}\n          />\n          <InspectorPanelButton\n            title={'Network'}\n            pressed={this.props.networking}\n            onClick={this.props.setNetworking}\n          />\n          <InspectorPanelButton\n            title={'Touchables'}\n            pressed={this.props.touchTargeting}\n            onClick={this.props.setTouchTargeting}\n          />\n        </View>\n      </SafeAreaView>\n    );\n  }\n}\n\ntype InspectorPanelButtonProps = $ReadOnly<{|\n  onClick: (val: boolean) => void,\n  pressed: boolean,\n  title: string,\n|}>;\n\nclass InspectorPanelButton extends React.Component<InspectorPanelButtonProps> {\n  render(): React.Node {\n    return (\n      <TouchableHighlight\n        onPress={() => this.props.onClick(!this.props.pressed)}\n        style={[styles.button, this.props.pressed && styles.buttonPressed]}>\n        <Text style={styles.buttonText}>{this.props.title}</Text>\n      </TouchableHighlight>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  buttonRow: {\n    flexDirection: 'row',\n  },\n  button: {\n    backgroundColor: 'rgba(0, 0, 0, 0.3)',\n    margin: 2,\n    height: 30,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  buttonPressed: {\n    backgroundColor: 'rgba(255, 255, 255, 0.3)',\n  },\n  buttonText: {\n    textAlign: 'center',\n    color: 'white',\n    margin: 5,\n  },\n  container: {\n    backgroundColor: 'rgba(0, 0, 0, 0.7)',\n  },\n  properties: {\n    height: 200,\n  },\n  waiting: {\n    height: 100,\n  },\n  waitingText: {\n    fontSize: 20,\n    textAlign: 'center',\n    marginVertical: 20,\n    color: 'white',\n  },\n});\n\nmodule.exports = InspectorPanel;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}