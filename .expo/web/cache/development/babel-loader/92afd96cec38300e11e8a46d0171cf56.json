{"ast":null,"code":"import _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { BaseGesture, Gesture } from \"./gesture\";\n\nfunction extendRelation(currentRelation, extendWith) {\n  if (currentRelation === undefined) {\n    return _toConsumableArray(extendWith);\n  } else {\n    return [].concat(_toConsumableArray(currentRelation), _toConsumableArray(extendWith));\n  }\n}\n\nexport var ComposedGesture = function (_Gesture) {\n  _inherits(ComposedGesture, _Gesture);\n\n  var _super = _createSuper(ComposedGesture);\n\n  function ComposedGesture() {\n    var _this;\n\n    _classCallCheck(this, ComposedGesture);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"gestures\", []);\n\n    _defineProperty(_assertThisInitialized(_this), \"simultaneousGestures\", []);\n\n    _defineProperty(_assertThisInitialized(_this), \"requireGesturesToFail\", []);\n\n    for (var _len = arguments.length, gestures = new Array(_len), _key = 0; _key < _len; _key++) {\n      gestures[_key] = arguments[_key];\n    }\n\n    _this.gestures = gestures;\n    return _this;\n  }\n\n  _createClass(ComposedGesture, [{\n    key: \"prepareSingleGesture\",\n    value: function prepareSingleGesture(gesture, simultaneousGestures, requireGesturesToFail) {\n      if (gesture instanceof BaseGesture) {\n        var newConfig = _objectSpread({}, gesture.config);\n\n        newConfig.simultaneousWith = extendRelation(newConfig.simultaneousWith, simultaneousGestures);\n        newConfig.requireToFail = extendRelation(newConfig.requireToFail, requireGesturesToFail);\n        gesture.config = newConfig;\n      } else if (gesture instanceof ComposedGesture) {\n        gesture.simultaneousGestures = simultaneousGestures;\n        gesture.requireGesturesToFail = requireGesturesToFail;\n        gesture.prepare();\n      }\n    }\n  }, {\n    key: \"prepare\",\n    value: function prepare() {\n      for (var gesture of this.gestures) {\n        this.prepareSingleGesture(gesture, this.simultaneousGestures, this.requireGesturesToFail);\n      }\n    }\n  }, {\n    key: \"initialize\",\n    value: function initialize() {\n      for (var gesture of this.gestures) {\n        gesture.initialize();\n      }\n    }\n  }, {\n    key: \"toGestureArray\",\n    value: function toGestureArray() {\n      return this.gestures.flatMap(function (gesture) {\n        return gesture.toGestureArray();\n      });\n    }\n  }]);\n\n  return ComposedGesture;\n}(Gesture);\nexport var SimultaneousGesture = function (_ComposedGesture) {\n  _inherits(SimultaneousGesture, _ComposedGesture);\n\n  var _super2 = _createSuper(SimultaneousGesture);\n\n  function SimultaneousGesture() {\n    _classCallCheck(this, SimultaneousGesture);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(SimultaneousGesture, [{\n    key: \"prepare\",\n    value: function prepare() {\n      var _this2 = this;\n\n      var simultaneousArrays = this.gestures.map(function (gesture) {\n        return _this2.gestures.filter(function (x) {\n          return x !== gesture;\n        }).flatMap(function (x) {\n          return x.toGestureArray();\n        });\n      });\n\n      for (var i = 0; i < this.gestures.length; i++) {\n        this.prepareSingleGesture(this.gestures[i], simultaneousArrays[i], this.requireGesturesToFail);\n      }\n    }\n  }]);\n\n  return SimultaneousGesture;\n}(ComposedGesture);\nexport var ExclusiveGesture = function (_ComposedGesture2) {\n  _inherits(ExclusiveGesture, _ComposedGesture2);\n\n  var _super3 = _createSuper(ExclusiveGesture);\n\n  function ExclusiveGesture() {\n    _classCallCheck(this, ExclusiveGesture);\n\n    return _super3.apply(this, arguments);\n  }\n\n  _createClass(ExclusiveGesture, [{\n    key: \"prepare\",\n    value: function prepare() {\n      var gestureArrays = this.gestures.map(function (gesture) {\n        return gesture.toGestureArray();\n      });\n      var requireToFail = [];\n\n      for (var i = 0; i < this.gestures.length; i++) {\n        this.prepareSingleGesture(this.gestures[i], this.simultaneousGestures, this.requireGesturesToFail.concat(requireToFail));\n        requireToFail = requireToFail.concat(gestureArrays[i]);\n      }\n    }\n  }]);\n\n  return ExclusiveGesture;\n}(ComposedGesture);","map":{"version":3,"sources":["gestureComposition.ts"],"names":["currentRelation","constructor","prepareSingleGesture","gesture","newConfig","config","extendRelation","prepare","initialize","toGestureArray","simultaneousArrays","x","i","gestureArrays","requireToFail"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,WAAA,EAAA,OAAA;;AAEA,SAAA,cAAA,CAAA,eAAA,EAAA,UAAA,EAGE;EACA,IAAIA,eAAe,KAAnB,SAAA,EAAmC;IACjC,0BAAA,UAAA;EADF,CAAA,MAEO;IACL,oCAAO,eAAP,sBAAA,UAAA;EACD;AACF;;AAED,WAAO,eAAP;EAAA;;EAAA;;EAKEC,2BAAoC;IAAA;;IAAA;;IAClC;;IADkC,eAAA,gCAAA,UAAA,EAJJ,EAII,CAAA;;IAAA,eAAA,gCAAA,sBAAA,EAHY,EAGZ,CAAA;;IAAA,eAAA,gCAAA,uBAAA,EAFa,EAEb,CAAA;;IAAA,kCAAzB,QAAyB;MAAzB,QAAyB;IAAA;;IAElC,MAAA,QAAA,GAAA,QAAA;IAFkC;EAGnC;;EARH;IAAA;IAAA,OAUYC,8BAAoB,OAApBA,EAAoB,oBAApBA,EAAoB,qBAApBA,EAIR;MACA,IAAIC,OAAO,YAAX,WAAA,EAAoC;QAClC,IAAMC,SAAS,qBAAQD,OAAO,CAACE,MAAhB,CAAf;;QAEAD,SAAS,CAATA,gBAAAA,GAA6BE,cAAc,CACzCF,SAAS,CADgC,gBAAA,EAA3CA,oBAA2C,CAA3CA;QAIAA,SAAS,CAATA,aAAAA,GAA0BE,cAAc,CACtCF,SAAS,CAD6B,aAAA,EAAxCA,qBAAwC,CAAxCA;QAKAD,OAAO,CAAPA,MAAAA,GAAAA,SAAAA;MAZF,CAAA,MAaO,IAAIA,OAAO,YAAX,eAAA,EAAwC;QAC7CA,OAAO,CAAPA,oBAAAA,GAAAA,oBAAAA;QACAA,OAAO,CAAPA,qBAAAA,GAAAA,qBAAAA;QACAA,OAAO,CAAPA,OAAAA;MACD;IACF;EAjCH;IAAA;IAAA,OAmCEI,mBAAU;MACR,KAAK,IAAL,OAAA,IAAsB,KAAtB,QAAA,EAAqC;QACnC,KAAA,oBAAA,CAAA,OAAA,EAEE,KAFF,oBAAA,EAGE,KAHF,qBAAA;MAKD;IACF;EA3CH;IAAA;IAAA,OA6CEC,sBAAa;MACX,KAAK,IAAL,OAAA,IAAsB,KAAtB,QAAA,EAAqC;QACnCL,OAAO,CAAPA,UAAAA;MACD;IACF;EAjDH;IAAA;IAAA,OAmDEM,0BAAgC;MAC9B,OAAO,KAAA,QAAA,CAAA,OAAA,CAAuBN,UAAAA,OAAD;QAAA,OAAaA,OAAO,CAAjD,cAA0CA,EAAb;MAAA,CAAtB,CAAP;IACD;EArDH;;EAAA;AAAA,EAAO,OAAP;AAwDA,WAAO,mBAAP;EAAA;;EAAA;;EAAA;IAAA;;IAAA;EAAA;;EAAA;IAAA;IAAA,OACEI,mBAAU;MAAA;;MAGR,IAAMG,kBAAkB,GAAG,KAAA,QAAA,CAAA,GAAA,CAAmBP,UAAAA,OAAD;QAAA,OAE3C,MAAA,CAAA,QAAA,CAAA,MAAA,CAEWQ,UAAAA,CAAD;UAAA,OAAOA,CAAC,KAFlB,OAEU;QAAA,CAFV,EAAA,OAAA,CAOYA,UAAAA,CAAD;UAAA,OAAOA,CAAC,CATrB,cASoBA,EAAP;QAAA,CAPX,CAF2C;MAAA,CAAlB,CAA3B;;MAYA,KAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAG,KAAA,QAAA,CAApB,MAAA,EAA0CA,CAA1C,EAAA,EAA+C;QAC7C,KAAA,oBAAA,CACE,KAAA,QAAA,CADF,CACE,CADF,EAEEF,kBAAkB,CAFpB,CAEoB,CAFpB,EAGE,KAHF,qBAAA;MAKD;IACF;EAvBH;;EAAA;AAAA,EAAO,eAAP;AA0BA,WAAO,gBAAP;EAAA;;EAAA;;EAAA;IAAA;;IAAA;EAAA;;EAAA;IAAA;IAAA,OACEH,mBAAU;MAGR,IAAMM,aAAa,GAAG,KAAA,QAAA,CAAA,GAAA,CAAmBV,UAAAA,OAAD;QAAA,OACtCA,OAAO,CADT,cACEA,EADsC;MAAA,CAAlB,CAAtB;MAIA,IAAIW,aAA4B,GAAhC,EAAA;;MAEA,KAAK,IAAIF,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAG,KAAA,QAAA,CAApB,MAAA,EAA0CA,CAA1C,EAAA,EAA+C;QAC7C,KAAA,oBAAA,CACE,KAAA,QAAA,CADF,CACE,CADF,EAEE,KAFF,oBAAA,EAGE,KAAA,qBAAA,CAAA,MAAA,CAJ2C,aAI3C,CAHF;QAOAE,aAAa,GAAGA,aAAa,CAAbA,MAAAA,CAAqBD,aAAa,CAAlDC,CAAkD,CAAlCA,CAAhBA;MACD;IACF;EApBH;;EAAA;AAAA,EAAO,eAAP","sourcesContent":["import { BaseGesture, Gesture, GestureRef, GestureType } from './gesture';\n\nfunction extendRelation(\n  currentRelation: GestureRef[] | undefined,\n  extendWith: GestureType[]\n) {\n  if (currentRelation === undefined) {\n    return [...extendWith];\n  } else {\n    return [...currentRelation, ...extendWith];\n  }\n}\n\nexport class ComposedGesture extends Gesture {\n  protected gestures: Gesture[] = [];\n  protected simultaneousGestures: GestureType[] = [];\n  protected requireGesturesToFail: GestureType[] = [];\n\n  constructor(...gestures: Gesture[]) {\n    super();\n    this.gestures = gestures;\n  }\n\n  protected prepareSingleGesture(\n    gesture: Gesture,\n    simultaneousGestures: GestureType[],\n    requireGesturesToFail: GestureType[]\n  ) {\n    if (gesture instanceof BaseGesture) {\n      const newConfig = { ...gesture.config };\n\n      newConfig.simultaneousWith = extendRelation(\n        newConfig.simultaneousWith,\n        simultaneousGestures\n      );\n      newConfig.requireToFail = extendRelation(\n        newConfig.requireToFail,\n        requireGesturesToFail\n      );\n\n      gesture.config = newConfig;\n    } else if (gesture instanceof ComposedGesture) {\n      gesture.simultaneousGestures = simultaneousGestures;\n      gesture.requireGesturesToFail = requireGesturesToFail;\n      gesture.prepare();\n    }\n  }\n\n  prepare() {\n    for (const gesture of this.gestures) {\n      this.prepareSingleGesture(\n        gesture,\n        this.simultaneousGestures,\n        this.requireGesturesToFail\n      );\n    }\n  }\n\n  initialize() {\n    for (const gesture of this.gestures) {\n      gesture.initialize();\n    }\n  }\n\n  toGestureArray(): GestureType[] {\n    return this.gestures.flatMap((gesture) => gesture.toGestureArray());\n  }\n}\n\nexport class SimultaneousGesture extends ComposedGesture {\n  prepare() {\n    // this piece of magic works something like this:\n    // for every gesture in the array\n    const simultaneousArrays = this.gestures.map((gesture) =>\n      // we take the array it's in\n      this.gestures\n        // and make a copy without it\n        .filter((x) => x !== gesture)\n        // then we flatmap the result to get list of raw (not composed) gestures\n        // this way we don't make the gestures simultaneous with themselves, which is\n        // important when the gesture is `ExclusiveGesture` - we don't want to make\n        // exclusive gestures simultaneous\n        .flatMap((x) => x.toGestureArray())\n    );\n\n    for (let i = 0; i < this.gestures.length; i++) {\n      this.prepareSingleGesture(\n        this.gestures[i],\n        simultaneousArrays[i],\n        this.requireGesturesToFail\n      );\n    }\n  }\n}\n\nexport class ExclusiveGesture extends ComposedGesture {\n  prepare() {\n    // transforms the array of gestures into array of grouped raw (not composed) gestures\n    // i.e. [gesture1, gesture2, ComposedGesture(gesture3, gesture4)] -> [[gesture1], [gesture2], [gesture3, gesture4]]\n    const gestureArrays = this.gestures.map((gesture) =>\n      gesture.toGestureArray()\n    );\n\n    let requireToFail: GestureType[] = [];\n\n    for (let i = 0; i < this.gestures.length; i++) {\n      this.prepareSingleGesture(\n        this.gestures[i],\n        this.simultaneousGestures,\n        this.requireGesturesToFail.concat(requireToFail)\n      );\n\n      // every group gets to wait for all groups before it\n      requireToFail = requireToFail.concat(gestureArrays[i]);\n    }\n  }\n}\n\nexport type ComposedGestureType = InstanceType<typeof ComposedGesture>;\nexport type RaceGestureType = ComposedGestureType;\nexport type SimultaneousGestureType = InstanceType<typeof SimultaneousGesture>;\nexport type ExclusiveGestureType = InstanceType<typeof ExclusiveGesture>;\n"]},"metadata":{},"sourceType":"module"}