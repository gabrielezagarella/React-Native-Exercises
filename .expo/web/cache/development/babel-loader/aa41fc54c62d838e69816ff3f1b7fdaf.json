{"ast":null,"code":"'use strict';\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nvar FormData = function () {\n  function FormData() {\n    _classCallCheck(this, FormData);\n\n    this._parts = [];\n  }\n\n  _createClass(FormData, [{\n    key: \"append\",\n    value: function append(key, value) {\n      this._parts.push([key, value]);\n    }\n  }, {\n    key: \"getAll\",\n    value: function getAll(key) {\n      return this._parts.filter(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 1),\n            name = _ref2[0];\n\n        return name === key;\n      }).map(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n            value = _ref4[1];\n\n        return value;\n      });\n    }\n  }, {\n    key: \"getParts\",\n    value: function getParts() {\n      return this._parts.map(function (_ref5) {\n        var _ref6 = _slicedToArray(_ref5, 2),\n            name = _ref6[0],\n            value = _ref6[1];\n\n        var contentDisposition = 'form-data; name=\"' + name + '\"';\n        var headers = {\n          'content-disposition': contentDisposition\n        };\n\n        if (typeof value === 'object' && !Array.isArray(value) && value) {\n          if (typeof value.name === 'string') {\n            headers['content-disposition'] += '; filename=\"' + value.name + '\"';\n          }\n\n          if (typeof value.type === 'string') {\n            headers['content-type'] = value.type;\n          }\n\n          return _objectSpread(_objectSpread({}, value), {}, {\n            headers: headers,\n            fieldName: name\n          });\n        }\n\n        return {\n          string: String(value),\n          headers: headers,\n          fieldName: name\n        };\n      });\n    }\n  }]);\n\n  return FormData;\n}();\n\nmodule.exports = FormData;","map":{"version":3,"names":["FormData","_parts","key","value","push","filter","name","map","contentDisposition","headers","Array","isArray","type","fieldName","string","String","module","exports"],"sources":["/Users/zagarellagabriele/Desktop/Progetti/React Native/React-Native-Exercises/node_modules/react-native/Libraries/Network/FormData.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\n'use strict';\n\ntype FormDataValue = string | {name?: string, type?: string, uri: string};\ntype FormDataNameValuePair = [string, FormDataValue];\n\ntype Headers = {[name: string]: string, ...};\ntype FormDataPart =\n  | {\n      string: string,\n      headers: Headers,\n      ...\n    }\n  | {\n      uri: string,\n      headers: Headers,\n      name?: string,\n      type?: string,\n      ...\n    };\n\n/**\n * Polyfill for XMLHttpRequest2 FormData API, allowing multipart POST requests\n * with mixed data (string, native files) to be submitted via XMLHttpRequest.\n *\n * Example:\n *\n *   var photo = {\n *     uri: uriFromCameraRoll,\n *     type: 'image/jpeg',\n *     name: 'photo.jpg',\n *   };\n *\n *   var body = new FormData();\n *   body.append('authToken', 'secret');\n *   body.append('photo', photo);\n *   body.append('title', 'A beautiful photo!');\n *\n *   xhr.open('POST', serverURL);\n *   xhr.send(body);\n */\nclass FormData {\n  _parts: Array<FormDataNameValuePair>;\n\n  constructor() {\n    this._parts = [];\n  }\n\n  append(key: string, value: FormDataValue) {\n    // The XMLHttpRequest spec doesn't specify if duplicate keys are allowed.\n    // MDN says that any new values should be appended to existing values.\n    // In any case, major browsers allow duplicate keys, so that's what we'll do\n    // too. They'll simply get appended as additional form data parts in the\n    // request body, leaving the server to deal with them.\n    this._parts.push([key, value]);\n  }\n\n  getAll(key: string): Array<FormDataValue> {\n    return this._parts\n      .filter(([name]) => name === key)\n      .map(([, value]) => value);\n  }\n\n  getParts(): Array<FormDataPart> {\n    return this._parts.map(([name, value]) => {\n      const contentDisposition = 'form-data; name=\"' + name + '\"';\n\n      const headers: Headers = {'content-disposition': contentDisposition};\n\n      // The body part is a \"blob\", which in React Native just means\n      // an object with a `uri` attribute. Optionally, it can also\n      // have a `name` and `type` attribute to specify filename and\n      // content type (cf. web Blob interface.)\n      if (typeof value === 'object' && !Array.isArray(value) && value) {\n        if (typeof value.name === 'string') {\n          headers['content-disposition'] += '; filename=\"' + value.name + '\"';\n        }\n        if (typeof value.type === 'string') {\n          headers['content-type'] = value.type;\n        }\n        return {...value, headers, fieldName: name};\n      }\n      // Convert non-object values to strings as per FormData.append() spec\n      return {string: String(value), headers, fieldName: name};\n    });\n  }\n}\n\nmodule.exports = FormData;\n"],"mappings":"AAUA;;;;;;;;;;;;;;IAwCMA,Q;EAGJ,oBAAc;IAAA;;IACZ,KAAKC,MAAL,GAAc,EAAd;EACD;;;;WAED,gBAAOC,GAAP,EAAoBC,KAApB,EAA0C;MAMxC,KAAKF,MAAL,CAAYG,IAAZ,CAAiB,CAACF,GAAD,EAAMC,KAAN,CAAjB;IACD;;;WAED,gBAAOD,GAAP,EAA0C;MACxC,OAAO,KAAKD,MAAL,CACJI,MADI,CACG;QAAA;QAAA,IAAEC,IAAF;;QAAA,OAAYA,IAAI,KAAKJ,GAArB;MAAA,CADH,EAEJK,GAFI,CAEA;QAAA;QAAA,IAAIJ,KAAJ;;QAAA,OAAeA,KAAf;MAAA,CAFA,CAAP;IAGD;;;WAED,oBAAgC;MAC9B,OAAO,KAAKF,MAAL,CAAYM,GAAZ,CAAgB,iBAAmB;QAAA;QAAA,IAAjBD,IAAiB;QAAA,IAAXH,KAAW;;QACxC,IAAMK,kBAAkB,GAAG,sBAAsBF,IAAtB,GAA6B,GAAxD;QAEA,IAAMG,OAAgB,GAAG;UAAC,uBAAuBD;QAAxB,CAAzB;;QAMA,IAAI,OAAOL,KAAP,KAAiB,QAAjB,IAA6B,CAACO,KAAK,CAACC,OAAN,CAAcR,KAAd,CAA9B,IAAsDA,KAA1D,EAAiE;UAC/D,IAAI,OAAOA,KAAK,CAACG,IAAb,KAAsB,QAA1B,EAAoC;YAClCG,OAAO,CAAC,qBAAD,CAAP,IAAkC,iBAAiBN,KAAK,CAACG,IAAvB,GAA8B,GAAhE;UACD;;UACD,IAAI,OAAOH,KAAK,CAACS,IAAb,KAAsB,QAA1B,EAAoC;YAClCH,OAAO,CAAC,cAAD,CAAP,GAA0BN,KAAK,CAACS,IAAhC;UACD;;UACD,uCAAWT,KAAX;YAAkBM,OAAO,EAAPA,OAAlB;YAA2BI,SAAS,EAAEP;UAAtC;QACD;;QAED,OAAO;UAACQ,MAAM,EAAEC,MAAM,CAACZ,KAAD,CAAf;UAAwBM,OAAO,EAAPA,OAAxB;UAAiCI,SAAS,EAAEP;QAA5C,CAAP;MACD,CApBM,CAAP;IAqBD;;;;;;AAGHU,MAAM,CAACC,OAAP,GAAiBjB,QAAjB"},"metadata":{},"sourceType":"script"}