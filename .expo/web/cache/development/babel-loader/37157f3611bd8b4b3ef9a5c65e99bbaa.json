{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport Platform from \"../Utilities/Platform\";\nimport RCTDeviceEventEmitter from \"./RCTDeviceEventEmitter\";\nimport invariant from 'invariant';\n\nvar NativeEventEmitter = function () {\n  function NativeEventEmitter(nativeModule) {\n    _classCallCheck(this, NativeEventEmitter);\n\n    if (Platform.OS === 'ios') {\n      invariant(nativeModule != null, '`new NativeEventEmitter()` requires a non-null argument.');\n    }\n\n    var hasAddListener = !!nativeModule && typeof nativeModule.addListener === 'function';\n    var hasRemoveListeners = !!nativeModule && typeof nativeModule.removeListeners === 'function';\n\n    if (nativeModule && hasAddListener && hasRemoveListeners) {\n      this._nativeModule = nativeModule;\n    } else if (nativeModule != null) {\n      if (!hasAddListener) {\n        console.warn('`new NativeEventEmitter()` was called with a non-null argument without the required `addListener` method.');\n      }\n\n      if (!hasRemoveListeners) {\n        console.warn('`new NativeEventEmitter()` was called with a non-null argument without the required `removeListeners` method.');\n      }\n    }\n  }\n\n  _createClass(NativeEventEmitter, [{\n    key: \"addListener\",\n    value: function addListener(eventType, listener, context) {\n      var _this$_nativeModule,\n          _this = this;\n\n      (_this$_nativeModule = this._nativeModule) == null ? void 0 : _this$_nativeModule.addListener(eventType);\n      var subscription = RCTDeviceEventEmitter.addListener(eventType, listener, context);\n      return {\n        remove: function remove() {\n          if (subscription != null) {\n            var _this$_nativeModule2;\n\n            (_this$_nativeModule2 = _this._nativeModule) == null ? void 0 : _this$_nativeModule2.removeListeners(1);\n            subscription.remove();\n            subscription = null;\n          }\n        }\n      };\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(eventType) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      RCTDeviceEventEmitter.emit.apply(RCTDeviceEventEmitter, [eventType].concat(args));\n    }\n  }, {\n    key: \"removeAllListeners\",\n    value: function removeAllListeners(eventType) {\n      var _this$_nativeModule3;\n\n      invariant(eventType != null, '`NativeEventEmitter.removeAllListener()` requires a non-null argument.');\n      (_this$_nativeModule3 = this._nativeModule) == null ? void 0 : _this$_nativeModule3.removeListeners(this.listenerCount(eventType));\n      RCTDeviceEventEmitter.removeAllListeners(eventType);\n    }\n  }, {\n    key: \"listenerCount\",\n    value: function listenerCount(eventType) {\n      return RCTDeviceEventEmitter.listenerCount(eventType);\n    }\n  }]);\n\n  return NativeEventEmitter;\n}();\n\nexport { NativeEventEmitter as default };","map":{"version":3,"names":["Platform","RCTDeviceEventEmitter","invariant","NativeEventEmitter","nativeModule","OS","hasAddListener","addListener","hasRemoveListeners","removeListeners","_nativeModule","console","warn","eventType","listener","context","subscription","remove","args","emit","listenerCount","removeAllListeners"],"sources":["/Users/zagarellagabriele/Desktop/Progetti/React Native/React-Native-Exercises/node_modules/react-native/Libraries/EventEmitter/NativeEventEmitter.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nimport type {\n  EventSubscription,\n  IEventEmitter,\n} from '../vendor/emitter/EventEmitter';\n\nimport Platform from '../Utilities/Platform';\nimport RCTDeviceEventEmitter from './RCTDeviceEventEmitter';\nimport invariant from 'invariant';\n\ninterface NativeModule {\n  addListener(eventType: string): void;\n  removeListeners(count: number): void;\n}\n\nexport type {EventSubscription};\n\n/**\n * `NativeEventEmitter` is intended for use by Native Modules to emit events to\n * JavaScript listeners. If a `NativeModule` is supplied to the constructor, it\n * will be notified (via `addListener` and `removeListeners`) when the listener\n * count changes to manage \"native memory\".\n *\n * Currently, all native events are fired via a global `RCTDeviceEventEmitter`.\n * This means event names must be globally unique, and it means that call sites\n * can theoretically listen to `RCTDeviceEventEmitter` (although discouraged).\n */\nexport default class NativeEventEmitter<TEventToArgsMap: {...}>\n  implements IEventEmitter<TEventToArgsMap>\n{\n  _nativeModule: ?NativeModule;\n\n  constructor(nativeModule: ?NativeModule) {\n    if (Platform.OS === 'ios') {\n      invariant(\n        nativeModule != null,\n        '`new NativeEventEmitter()` requires a non-null argument.',\n      );\n    }\n\n    const hasAddListener =\n      // $FlowFixMe[method-unbinding] added when improving typing for this parameters\n      !!nativeModule && typeof nativeModule.addListener === 'function';\n    const hasRemoveListeners =\n      // $FlowFixMe[method-unbinding] added when improving typing for this parameters\n      !!nativeModule && typeof nativeModule.removeListeners === 'function';\n\n    if (nativeModule && hasAddListener && hasRemoveListeners) {\n      this._nativeModule = nativeModule;\n    } else if (nativeModule != null) {\n      if (!hasAddListener) {\n        console.warn(\n          '`new NativeEventEmitter()` was called with a non-null argument without the required `addListener` method.',\n        );\n      }\n      if (!hasRemoveListeners) {\n        console.warn(\n          '`new NativeEventEmitter()` was called with a non-null argument without the required `removeListeners` method.',\n        );\n      }\n    }\n  }\n\n  addListener<TEvent: $Keys<TEventToArgsMap>>(\n    eventType: TEvent,\n    listener: (...args: $ElementType<TEventToArgsMap, TEvent>) => mixed,\n    context?: mixed,\n  ): EventSubscription {\n    this._nativeModule?.addListener(eventType);\n    let subscription: ?EventSubscription = RCTDeviceEventEmitter.addListener(\n      eventType,\n      listener,\n      context,\n    );\n\n    return {\n      remove: () => {\n        if (subscription != null) {\n          this._nativeModule?.removeListeners(1);\n          // $FlowFixMe[incompatible-use]\n          subscription.remove();\n          subscription = null;\n        }\n      },\n    };\n  }\n\n  emit<TEvent: $Keys<TEventToArgsMap>>(\n    eventType: TEvent,\n    ...args: $ElementType<TEventToArgsMap, TEvent>\n  ): void {\n    // Generally, `RCTDeviceEventEmitter` is directly invoked. But this is\n    // included for completeness.\n    RCTDeviceEventEmitter.emit(eventType, ...args);\n  }\n\n  removeAllListeners<TEvent: $Keys<TEventToArgsMap>>(\n    eventType?: ?TEvent,\n  ): void {\n    invariant(\n      eventType != null,\n      '`NativeEventEmitter.removeAllListener()` requires a non-null argument.',\n    );\n    this._nativeModule?.removeListeners(this.listenerCount(eventType));\n    RCTDeviceEventEmitter.removeAllListeners(eventType);\n  }\n\n  listenerCount<TEvent: $Keys<TEventToArgsMap>>(eventType: TEvent): number {\n    return RCTDeviceEventEmitter.listenerCount(eventType);\n  }\n}\n"],"mappings":"AAUA;;;;AAOA,OAAOA,QAAP;AACA,OAAOC,qBAAP;AACA,OAAOC,SAAP,MAAsB,WAAtB;;IAmBqBC,kB;EAKnB,4BAAYC,YAAZ,EAAyC;IAAA;;IACvC,IAAIJ,QAAQ,CAACK,EAAT,KAAgB,KAApB,EAA2B;MACzBH,SAAS,CACPE,YAAY,IAAI,IADT,EAEP,0DAFO,CAAT;IAID;;IAED,IAAME,cAAc,GAElB,CAAC,CAACF,YAAF,IAAkB,OAAOA,YAAY,CAACG,WAApB,KAAoC,UAFxD;IAGA,IAAMC,kBAAkB,GAEtB,CAAC,CAACJ,YAAF,IAAkB,OAAOA,YAAY,CAACK,eAApB,KAAwC,UAF5D;;IAIA,IAAIL,YAAY,IAAIE,cAAhB,IAAkCE,kBAAtC,EAA0D;MACxD,KAAKE,aAAL,GAAqBN,YAArB;IACD,CAFD,MAEO,IAAIA,YAAY,IAAI,IAApB,EAA0B;MAC/B,IAAI,CAACE,cAAL,EAAqB;QACnBK,OAAO,CAACC,IAAR,CACE,2GADF;MAGD;;MACD,IAAI,CAACJ,kBAAL,EAAyB;QACvBG,OAAO,CAACC,IAAR,CACE,+GADF;MAGD;IACF;EACF;;;;WAED,qBACEC,SADF,EAEEC,QAFF,EAGEC,OAHF,EAIqB;MAAA;MAAA;;MACnB,4BAAKL,aAAL,yCAAoBH,WAApB,CAAgCM,SAAhC;MACA,IAAIG,YAAgC,GAAGf,qBAAqB,CAACM,WAAtB,CACrCM,SADqC,EAErCC,QAFqC,EAGrCC,OAHqC,CAAvC;MAMA,OAAO;QACLE,MAAM,EAAE,kBAAM;UACZ,IAAID,YAAY,IAAI,IAApB,EAA0B;YAAA;;YACxB,6BAAI,CAACN,aAAL,0CAAoBD,eAApB,CAAoC,CAApC;YAEAO,YAAY,CAACC,MAAb;YACAD,YAAY,GAAG,IAAf;UACD;QACF;MARI,CAAP;IAUD;;;WAED,cACEH,SADF,EAGQ;MAAA,kCADHK,IACG;QADHA,IACG;MAAA;;MAGNjB,qBAAqB,CAACkB,IAAtB,OAAAlB,qBAAqB,GAAMY,SAAN,SAAoBK,IAApB,EAArB;IACD;;;WAED,4BACEL,SADF,EAEQ;MAAA;;MACNX,SAAS,CACPW,SAAS,IAAI,IADN,EAEP,wEAFO,CAAT;MAIA,6BAAKH,aAAL,0CAAoBD,eAApB,CAAoC,KAAKW,aAAL,CAAmBP,SAAnB,CAApC;MACAZ,qBAAqB,CAACoB,kBAAtB,CAAyCR,SAAzC;IACD;;;WAED,uBAA8CA,SAA9C,EAAyE;MACvE,OAAOZ,qBAAqB,CAACmB,aAAtB,CAAoCP,SAApC,CAAP;IACD;;;;;;SAlFkBV,kB"},"metadata":{},"sourceType":"module"}