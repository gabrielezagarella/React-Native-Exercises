{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { EventTypes, MouseButtons, PointerType, TouchEventType } from \"../interfaces\";\nimport EventManager from \"./EventManager\";\nimport { isPointerInBounds } from \"../utils\";\n\nvar TouchEventManager = function (_EventManager) {\n  _inherits(TouchEventManager, _EventManager);\n\n  var _super = _createSuper(TouchEventManager);\n\n  function TouchEventManager() {\n    _classCallCheck(this, TouchEventManager);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(TouchEventManager, [{\n    key: \"setListeners\",\n    value: function setListeners() {\n      var _this = this;\n\n      this.view.addEventListener('touchstart', function (event) {\n        for (var i = 0; i < event.changedTouches.length; ++i) {\n          var adaptedEvent = _this.mapEvent(event, EventTypes.DOWN, i, TouchEventType.DOWN);\n\n          if (!isPointerInBounds(_this.view, {\n            x: adaptedEvent.x,\n            y: adaptedEvent.y\n          }) || event.changedTouches[i].touchType === 'stylus') {\n            continue;\n          }\n\n          _this.markAsInBounds(adaptedEvent.pointerId);\n\n          if (++_this.activePointersCounter > 1) {\n            adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_DOWN;\n\n            _this.onPointerAdd(adaptedEvent);\n          } else {\n            _this.onPointerDown(adaptedEvent);\n          }\n        }\n      });\n      this.view.addEventListener('touchmove', function (event) {\n        for (var i = 0; i < event.changedTouches.length; ++i) {\n          var adaptedEvent = _this.mapEvent(event, EventTypes.MOVE, i, TouchEventType.MOVE);\n\n          if (event.changedTouches[i].touchType === 'stylus') {\n            continue;\n          }\n\n          var inBounds = isPointerInBounds(_this.view, {\n            x: adaptedEvent.x,\n            y: adaptedEvent.y\n          });\n\n          var pointerIndex = _this.pointersInBounds.indexOf(adaptedEvent.pointerId);\n\n          if (inBounds) {\n            if (pointerIndex < 0) {\n              adaptedEvent.eventType = EventTypes.ENTER;\n\n              _this.onPointerEnter(adaptedEvent);\n\n              _this.markAsInBounds(adaptedEvent.pointerId);\n            } else {\n              _this.onPointerMove(adaptedEvent);\n            }\n          } else {\n            if (pointerIndex >= 0) {\n              adaptedEvent.eventType = EventTypes.OUT;\n\n              _this.onPointerOut(adaptedEvent);\n\n              _this.markAsOutOfBounds(adaptedEvent.pointerId);\n            } else {\n              _this.onPointerOutOfBounds(adaptedEvent);\n            }\n          }\n        }\n      });\n      this.view.addEventListener('touchend', function (event) {\n        for (var i = 0; i < event.changedTouches.length; ++i) {\n          if (_this.activePointersCounter === 0) {\n            break;\n          }\n\n          if (event.changedTouches[i].touchType === 'stylus') {\n            continue;\n          }\n\n          var adaptedEvent = _this.mapEvent(event, EventTypes.UP, i, TouchEventType.UP);\n\n          _this.markAsOutOfBounds(adaptedEvent.pointerId);\n\n          if (--_this.activePointersCounter > 0) {\n            adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_UP;\n\n            _this.onPointerRemove(adaptedEvent);\n          } else {\n            _this.onPointerUp(adaptedEvent);\n          }\n        }\n      });\n      this.view.addEventListener('touchcancel', function (event) {\n        for (var i = 0; i < event.changedTouches.length; ++i) {\n          var adaptedEvent = _this.mapEvent(event, EventTypes.CANCEL, i, TouchEventType.CANCELLED);\n\n          if (event.changedTouches[i].touchType === 'stylus') {\n            continue;\n          }\n\n          _this.onPointerCancel(adaptedEvent);\n\n          _this.markAsOutOfBounds(adaptedEvent.pointerId);\n\n          _this.activePointersCounter = 0;\n        }\n      });\n    }\n  }, {\n    key: \"mapEvent\",\n    value: function mapEvent(event, eventType, index, touchEventType) {\n      var rect = this.view.getBoundingClientRect();\n      var clientX = event.changedTouches[index].clientX;\n      var clientY = event.changedTouches[index].clientY;\n      return {\n        x: clientX,\n        y: clientY,\n        offsetX: clientX - rect.left,\n        offsetY: clientY - rect.top,\n        pointerId: event.changedTouches[index].identifier,\n        eventType: eventType,\n        pointerType: PointerType.TOUCH,\n        buttons: MouseButtons.NONE,\n        time: event.timeStamp,\n        allTouches: event.touches,\n        changedTouches: event.changedTouches,\n        touchEventType: touchEventType\n      };\n    }\n  }]);\n\n  return TouchEventManager;\n}(EventManager);\n\nexport { TouchEventManager as default };","map":{"version":3,"sources":["TouchEventManager.ts"],"names":["setListeners","event","i","adaptedEvent","EventTypes","TouchEventType","isPointerInBounds","x","y","inBounds","pointerIndex","mapEvent","rect","clientX","clientY","offsetX","offsetY","pointerId","eventType","pointerType","PointerType","buttons","MouseButtons","time","allTouches","changedTouches","touchEventType"],"mappings":"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","sourcesContent":["import {\n  AdaptedEvent,\n  EventTypes,\n  MouseButtons,\n  PointerType,\n  TouchEventType,\n} from '../interfaces';\nimport EventManager from './EventManager';\nimport { isPointerInBounds } from '../utils';\n\nexport default class TouchEventManager extends EventManager {\n  public setListeners(): void {\n    this.view.addEventListener('touchstart', (event: TouchEvent) => {\n      for (let i = 0; i < event.changedTouches.length; ++i) {\n        const adaptedEvent: AdaptedEvent = this.mapEvent(\n          event,\n          EventTypes.DOWN,\n          i,\n          TouchEventType.DOWN\n        );\n\n        // Here we skip stylus, because in case of anything different than touch we want to handle it by using PointerEvents\n        // If we leave stylus to send touch events, handlers will receive every action twice\n        if (\n          !isPointerInBounds(this.view, {\n            x: adaptedEvent.x,\n            y: adaptedEvent.y,\n          }) ||\n          //@ts-ignore touchType field does exist\n          event.changedTouches[i].touchType === 'stylus'\n        ) {\n          continue;\n        }\n\n        this.markAsInBounds(adaptedEvent.pointerId);\n\n        if (++this.activePointersCounter > 1) {\n          adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_DOWN;\n          this.onPointerAdd(adaptedEvent);\n        } else {\n          this.onPointerDown(adaptedEvent);\n        }\n      }\n    });\n\n    this.view.addEventListener('touchmove', (event: TouchEvent) => {\n      for (let i = 0; i < event.changedTouches.length; ++i) {\n        const adaptedEvent: AdaptedEvent = this.mapEvent(\n          event,\n          EventTypes.MOVE,\n          i,\n          TouchEventType.MOVE\n        );\n        //@ts-ignore touchType field does exist\n        if (event.changedTouches[i].touchType === 'stylus') {\n          continue;\n        }\n\n        const inBounds: boolean = isPointerInBounds(this.view, {\n          x: adaptedEvent.x,\n          y: adaptedEvent.y,\n        });\n\n        const pointerIndex: number = this.pointersInBounds.indexOf(\n          adaptedEvent.pointerId\n        );\n\n        if (inBounds) {\n          if (pointerIndex < 0) {\n            adaptedEvent.eventType = EventTypes.ENTER;\n            this.onPointerEnter(adaptedEvent);\n            this.markAsInBounds(adaptedEvent.pointerId);\n          } else {\n            this.onPointerMove(adaptedEvent);\n          }\n        } else {\n          if (pointerIndex >= 0) {\n            adaptedEvent.eventType = EventTypes.OUT;\n            this.onPointerOut(adaptedEvent);\n            this.markAsOutOfBounds(adaptedEvent.pointerId);\n          } else {\n            this.onPointerOutOfBounds(adaptedEvent);\n          }\n        }\n      }\n    });\n\n    this.view.addEventListener('touchend', (event: TouchEvent) => {\n      for (let i = 0; i < event.changedTouches.length; ++i) {\n        // When we call reset on gesture handlers, it also resets their event managers\n        // In some handlers (like RotationGestureHandler) reset is called before all pointers leave view\n        // This means, that activePointersCounter will be set to 0, while there are still remaining pointers on view\n        // Removing them will end in activePointersCounter going below 0, therefore handlers won't behave properly\n        if (this.activePointersCounter === 0) {\n          break;\n        }\n\n        //@ts-ignore touchType field does exist\n        if (event.changedTouches[i].touchType === 'stylus') {\n          continue;\n        }\n\n        const adaptedEvent: AdaptedEvent = this.mapEvent(\n          event,\n          EventTypes.UP,\n          i,\n          TouchEventType.UP\n        );\n\n        this.markAsOutOfBounds(adaptedEvent.pointerId);\n\n        if (--this.activePointersCounter > 0) {\n          adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_UP;\n          this.onPointerRemove(adaptedEvent);\n        } else {\n          this.onPointerUp(adaptedEvent);\n        }\n      }\n    });\n\n    this.view.addEventListener('touchcancel', (event: TouchEvent) => {\n      for (let i = 0; i < event.changedTouches.length; ++i) {\n        const adaptedEvent: AdaptedEvent = this.mapEvent(\n          event,\n          EventTypes.CANCEL,\n          i,\n          TouchEventType.CANCELLED\n        );\n\n        //@ts-ignore touchType field does exist\n        if (event.changedTouches[i].touchType === 'stylus') {\n          continue;\n        }\n\n        this.onPointerCancel(adaptedEvent);\n        this.markAsOutOfBounds(adaptedEvent.pointerId);\n        this.activePointersCounter = 0;\n      }\n    });\n  }\n\n  protected mapEvent(\n    event: TouchEvent,\n    eventType: EventTypes,\n    index: number,\n    touchEventType: TouchEventType\n  ): AdaptedEvent {\n    const rect = this.view.getBoundingClientRect();\n    const clientX = event.changedTouches[index].clientX;\n    const clientY = event.changedTouches[index].clientY;\n\n    return {\n      x: clientX,\n      y: clientY,\n      offsetX: clientX - rect.left,\n      offsetY: clientY - rect.top,\n      pointerId: event.changedTouches[index].identifier,\n      eventType: eventType,\n      pointerType: PointerType.TOUCH,\n      buttons: MouseButtons.NONE,\n      time: event.timeStamp,\n      allTouches: event.touches,\n      changedTouches: event.changedTouches,\n      touchEventType: touchEventType,\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}