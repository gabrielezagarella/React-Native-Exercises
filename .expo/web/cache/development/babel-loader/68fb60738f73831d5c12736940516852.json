{"ast":null,"code":"import EventEmitter from \"../vendor/emitter/EventEmitter\";\n\nvar BatchedBridge = require(\"../BatchedBridge/BatchedBridge\");\n\nvar infoLog = require(\"../Utilities/infoLog\");\n\nvar TaskQueue = require(\"./TaskQueue\");\n\nvar invariant = require('invariant');\n\nvar _emitter = new EventEmitter();\n\nvar DEBUG_DELAY = 0;\nvar DEBUG = false;\nvar InteractionManager = {\n  Events: {\n    interactionStart: 'interactionStart',\n    interactionComplete: 'interactionComplete'\n  },\n  runAfterInteractions: function runAfterInteractions(task) {\n    var tasks = [];\n    var promise = new Promise(function (resolve) {\n      _scheduleUpdate();\n\n      if (task) {\n        tasks.push(task);\n      }\n\n      tasks.push({\n        run: resolve,\n        name: 'resolve ' + (task && task.name || '?')\n      });\n\n      _taskQueue.enqueueTasks(tasks);\n    });\n    return {\n      then: promise.then.bind(promise),\n      cancel: function cancel() {\n        _taskQueue.cancelTasks(tasks);\n      }\n    };\n  },\n  createInteractionHandle: function createInteractionHandle() {\n    DEBUG && infoLog('InteractionManager: create interaction handle');\n\n    _scheduleUpdate();\n\n    var handle = ++_inc;\n\n    _addInteractionSet.add(handle);\n\n    return handle;\n  },\n  clearInteractionHandle: function clearInteractionHandle(handle) {\n    DEBUG && infoLog('InteractionManager: clear interaction handle');\n    invariant(!!handle, 'InteractionManager: Must provide a handle to clear.');\n\n    _scheduleUpdate();\n\n    _addInteractionSet.delete(handle);\n\n    _deleteInteractionSet.add(handle);\n  },\n  addListener: _emitter.addListener.bind(_emitter),\n  setDeadline: function setDeadline(deadline) {\n    _deadline = deadline;\n  }\n};\n\nvar _interactionSet = new Set();\n\nvar _addInteractionSet = new Set();\n\nvar _deleteInteractionSet = new Set();\n\nvar _taskQueue = new TaskQueue({\n  onMoreTasks: _scheduleUpdate\n});\n\nvar _nextUpdateHandle = 0;\nvar _inc = 0;\n\nvar _deadline = -1;\n\nfunction _scheduleUpdate() {\n  if (!_nextUpdateHandle) {\n    if (_deadline > 0) {\n      _nextUpdateHandle = setTimeout(_processUpdate, 0 + DEBUG_DELAY);\n    } else {\n      _nextUpdateHandle = setImmediate(_processUpdate);\n    }\n  }\n}\n\nfunction _processUpdate() {\n  _nextUpdateHandle = 0;\n  var interactionCount = _interactionSet.size;\n\n  _addInteractionSet.forEach(function (handle) {\n    return _interactionSet.add(handle);\n  });\n\n  _deleteInteractionSet.forEach(function (handle) {\n    return _interactionSet.delete(handle);\n  });\n\n  var nextInteractionCount = _interactionSet.size;\n\n  if (interactionCount !== 0 && nextInteractionCount === 0) {\n    _emitter.emit(InteractionManager.Events.interactionComplete);\n  } else if (interactionCount === 0 && nextInteractionCount !== 0) {\n    _emitter.emit(InteractionManager.Events.interactionStart);\n  }\n\n  if (nextInteractionCount === 0) {\n    while (_taskQueue.hasTasksToProcess()) {\n      _taskQueue.processNext();\n\n      if (_deadline > 0 && BatchedBridge.getEventLoopRunningTime() >= _deadline) {\n        _scheduleUpdate();\n\n        break;\n      }\n    }\n  }\n\n  _addInteractionSet.clear();\n\n  _deleteInteractionSet.clear();\n}\n\nmodule.exports = InteractionManager;","map":{"version":3,"names":["EventEmitter","BatchedBridge","require","infoLog","TaskQueue","invariant","_emitter","DEBUG_DELAY","DEBUG","InteractionManager","Events","interactionStart","interactionComplete","runAfterInteractions","task","tasks","promise","Promise","resolve","_scheduleUpdate","push","run","name","_taskQueue","enqueueTasks","then","bind","cancel","cancelTasks","createInteractionHandle","handle","_inc","_addInteractionSet","add","clearInteractionHandle","delete","_deleteInteractionSet","addListener","setDeadline","deadline","_deadline","_interactionSet","Set","onMoreTasks","_nextUpdateHandle","setTimeout","_processUpdate","setImmediate","interactionCount","size","forEach","nextInteractionCount","emit","hasTasksToProcess","processNext","getEventLoopRunningTime","clear","module","exports"],"sources":["/Users/zagarellagabriele/Desktop/Progetti/React Native/React-Native-Exercises/node_modules/react-native/Libraries/Interaction/InteractionManager.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport type {Task} from './TaskQueue';\n\nimport EventEmitter from '../vendor/emitter/EventEmitter';\n\nconst BatchedBridge = require('../BatchedBridge/BatchedBridge');\nconst infoLog = require('../Utilities/infoLog');\nconst TaskQueue = require('./TaskQueue');\nconst invariant = require('invariant');\n\nexport type Handle = number;\n\nconst _emitter = new EventEmitter<{\n  interactionComplete: [],\n  interactionStart: [],\n}>();\n\nconst DEBUG_DELAY: 0 = 0;\nconst DEBUG: false = false;\n\n/**\n * InteractionManager allows long-running work to be scheduled after any\n * interactions/animations have completed. In particular, this allows JavaScript\n * animations to run smoothly.\n *\n * Applications can schedule tasks to run after interactions with the following:\n *\n * ```\n * InteractionManager.runAfterInteractions(() => {\n *   // ...long-running synchronous task...\n * });\n * ```\n *\n * Compare this to other scheduling alternatives:\n *\n * - requestAnimationFrame(): for code that animates a view over time.\n * - setImmediate/setTimeout(): run code later, note this may delay animations.\n * - runAfterInteractions(): run code later, without delaying active animations.\n *\n * The touch handling system considers one or more active touches to be an\n * 'interaction' and will delay `runAfterInteractions()` callbacks until all\n * touches have ended or been cancelled.\n *\n * InteractionManager also allows applications to register animations by\n * creating an interaction 'handle' on animation start, and clearing it upon\n * completion:\n *\n * ```\n * var handle = InteractionManager.createInteractionHandle();\n * // run animation... (`runAfterInteractions` tasks are queued)\n * // later, on animation completion:\n * InteractionManager.clearInteractionHandle(handle);\n * // queued tasks run if all handles were cleared\n * ```\n *\n * `runAfterInteractions` takes either a plain callback function, or a\n * `PromiseTask` object with a `gen` method that returns a `Promise`.  If a\n * `PromiseTask` is supplied, then it is fully resolved (including asynchronous\n * dependencies that also schedule more tasks via `runAfterInteractions`) before\n * starting on the next task that might have been queued up synchronously\n * earlier.\n *\n * By default, queued tasks are executed together in a loop in one\n * `setImmediate` batch. If `setDeadline` is called with a positive number, then\n * tasks will only be executed until the deadline (in terms of js event loop run\n * time) approaches, at which point execution will yield via setTimeout,\n * allowing events such as touches to start interactions and block queued tasks\n * from executing, making apps more responsive.\n */\nconst InteractionManager = {\n  Events: {\n    interactionStart: 'interactionStart',\n    interactionComplete: 'interactionComplete',\n  },\n\n  /**\n   * Schedule a function to run after all interactions have completed. Returns a cancellable\n   * \"promise\".\n   */\n  runAfterInteractions(task: ?Task): {\n    then: <U>(\n      onFulfill?: ?(void) => ?(Promise<U> | U),\n      onReject?: ?(error: mixed) => ?(Promise<U> | U),\n    ) => Promise<U>,\n    cancel: () => void,\n    ...\n  } {\n    const tasks: Array<Task> = [];\n    const promise = new Promise((resolve: () => void) => {\n      _scheduleUpdate();\n      if (task) {\n        tasks.push(task);\n      }\n      tasks.push({\n        run: resolve,\n        name: 'resolve ' + ((task && task.name) || '?'),\n      });\n      _taskQueue.enqueueTasks(tasks);\n    });\n    return {\n      // $FlowFixMe[method-unbinding] added when improving typing for this parameters\n      then: promise.then.bind(promise),\n      cancel: function () {\n        _taskQueue.cancelTasks(tasks);\n      },\n    };\n  },\n\n  /**\n   * Notify manager that an interaction has started.\n   */\n  createInteractionHandle(): Handle {\n    DEBUG && infoLog('InteractionManager: create interaction handle');\n    _scheduleUpdate();\n    const handle = ++_inc;\n    _addInteractionSet.add(handle);\n    return handle;\n  },\n\n  /**\n   * Notify manager that an interaction has completed.\n   */\n  clearInteractionHandle(handle: Handle) {\n    DEBUG && infoLog('InteractionManager: clear interaction handle');\n    invariant(!!handle, 'InteractionManager: Must provide a handle to clear.');\n    _scheduleUpdate();\n    _addInteractionSet.delete(handle);\n    _deleteInteractionSet.add(handle);\n  },\n\n  // $FlowFixMe[method-unbinding] added when improving typing for this parameters\n  addListener: (_emitter.addListener.bind(_emitter): $FlowFixMe),\n\n  /**\n   * A positive number will use setTimeout to schedule any tasks after the\n   * eventLoopRunningTime hits the deadline value, otherwise all tasks will be\n   * executed in one setImmediate batch (default).\n   */\n  setDeadline(deadline: number) {\n    _deadline = deadline;\n  },\n};\n\nconst _interactionSet = new Set<number | Handle>();\nconst _addInteractionSet = new Set<number | Handle>();\nconst _deleteInteractionSet = new Set<Handle>();\nconst _taskQueue = new TaskQueue({onMoreTasks: _scheduleUpdate});\nlet _nextUpdateHandle: $FlowFixMe | TimeoutID = 0;\nlet _inc = 0;\nlet _deadline = -1;\n\n/**\n * Schedule an asynchronous update to the interaction state.\n */\nfunction _scheduleUpdate() {\n  if (!_nextUpdateHandle) {\n    if (_deadline > 0) {\n      _nextUpdateHandle = setTimeout(_processUpdate, 0 + DEBUG_DELAY);\n    } else {\n      _nextUpdateHandle = setImmediate(_processUpdate);\n    }\n  }\n}\n\n/**\n * Notify listeners, process queue, etc\n */\nfunction _processUpdate() {\n  _nextUpdateHandle = 0;\n\n  const interactionCount = _interactionSet.size;\n  _addInteractionSet.forEach(handle => _interactionSet.add(handle));\n  _deleteInteractionSet.forEach(handle => _interactionSet.delete(handle));\n  const nextInteractionCount = _interactionSet.size;\n\n  if (interactionCount !== 0 && nextInteractionCount === 0) {\n    // transition from 1+ --> 0 interactions\n    _emitter.emit(InteractionManager.Events.interactionComplete);\n  } else if (interactionCount === 0 && nextInteractionCount !== 0) {\n    // transition from 0 --> 1+ interactions\n    _emitter.emit(InteractionManager.Events.interactionStart);\n  }\n\n  // process the queue regardless of a transition\n  if (nextInteractionCount === 0) {\n    while (_taskQueue.hasTasksToProcess()) {\n      _taskQueue.processNext();\n      if (\n        _deadline > 0 &&\n        BatchedBridge.getEventLoopRunningTime() >= _deadline\n      ) {\n        // Hit deadline before processing all tasks, so process more later.\n        _scheduleUpdate();\n        break;\n      }\n    }\n  }\n  _addInteractionSet.clear();\n  _deleteInteractionSet.clear();\n}\n\nmodule.exports = InteractionManager;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}