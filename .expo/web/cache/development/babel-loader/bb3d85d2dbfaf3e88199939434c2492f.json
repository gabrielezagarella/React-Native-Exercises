{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nvar PressabilityPerformanceEventEmitter = function () {\n  function PressabilityPerformanceEventEmitter() {\n    _classCallCheck(this, PressabilityPerformanceEventEmitter);\n\n    this._listeners = [];\n  }\n\n  _createClass(PressabilityPerformanceEventEmitter, [{\n    key: \"addListener\",\n    value: function addListener(listener) {\n      this._listeners.push(listener);\n    }\n  }, {\n    key: \"removeListener\",\n    value: function removeListener(listener) {\n      var index = this._listeners.indexOf(listener);\n\n      if (index > -1) {\n        this._listeners.splice(index, 1);\n      }\n    }\n  }, {\n    key: \"emitEvent\",\n    value: function emitEvent(constructEvent) {\n      if (this._listeners.length === 0) {\n        return;\n      }\n\n      var event = constructEvent();\n\n      this._listeners.forEach(function (listener) {\n        return listener(event);\n      });\n    }\n  }]);\n\n  return PressabilityPerformanceEventEmitter;\n}();\n\nvar PressabilityPerformanceEventEmitterSingleton = new PressabilityPerformanceEventEmitter();\nexport default PressabilityPerformanceEventEmitterSingleton;","map":{"version":3,"names":["PressabilityPerformanceEventEmitter","_listeners","listener","push","index","indexOf","splice","constructEvent","length","event","forEach","PressabilityPerformanceEventEmitterSingleton"],"sources":["/Users/zagarellagabriele/Desktop/Progetti/React Native/React-Native-Exercises/node_modules/react-native/Libraries/Pressability/PressabilityPerformanceEventEmitter.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport {type PressabilityTouchSignal as TouchSignal} from './PressabilityTypes.js';\n\nexport type PressabilityPerformanceEvent = $ReadOnly<{|\n  signal: TouchSignal,\n  nativeTimestamp: number,\n|}>;\nexport type PressabilityPerformanceEventListener =\n  PressabilityPerformanceEvent => void;\n\nclass PressabilityPerformanceEventEmitter {\n  _listeners: Array<PressabilityPerformanceEventListener> = [];\n\n  constructor() {}\n\n  addListener(listener: PressabilityPerformanceEventListener): void {\n    this._listeners.push(listener);\n  }\n\n  removeListener(listener: PressabilityPerformanceEventListener): void {\n    const index = this._listeners.indexOf(listener);\n    if (index > -1) {\n      this._listeners.splice(index, 1);\n    }\n  }\n\n  emitEvent(constructEvent: () => PressabilityPerformanceEvent): void {\n    if (this._listeners.length === 0) {\n      return;\n    }\n\n    const event = constructEvent();\n    this._listeners.forEach(listener => listener(event));\n  }\n}\n\nconst PressabilityPerformanceEventEmitterSingleton: PressabilityPerformanceEventEmitter =\n  new PressabilityPerformanceEventEmitter();\n\nexport default PressabilityPerformanceEventEmitterSingleton;\n"],"mappings":";;;IAmBMA,mC;EAGJ,+CAAc;IAAA;;IAAA,KAFdC,UAEc,GAF4C,EAE5C;EAAE;;;;WAEhB,qBAAYC,QAAZ,EAAkE;MAChE,KAAKD,UAAL,CAAgBE,IAAhB,CAAqBD,QAArB;IACD;;;WAED,wBAAeA,QAAf,EAAqE;MACnE,IAAME,KAAK,GAAG,KAAKH,UAAL,CAAgBI,OAAhB,CAAwBH,QAAxB,CAAd;;MACA,IAAIE,KAAK,GAAG,CAAC,CAAb,EAAgB;QACd,KAAKH,UAAL,CAAgBK,MAAhB,CAAuBF,KAAvB,EAA8B,CAA9B;MACD;IACF;;;WAED,mBAAUG,cAAV,EAAoE;MAClE,IAAI,KAAKN,UAAL,CAAgBO,MAAhB,KAA2B,CAA/B,EAAkC;QAChC;MACD;;MAED,IAAMC,KAAK,GAAGF,cAAc,EAA5B;;MACA,KAAKN,UAAL,CAAgBS,OAAhB,CAAwB,UAAAR,QAAQ;QAAA,OAAIA,QAAQ,CAACO,KAAD,CAAZ;MAAA,CAAhC;IACD;;;;;;AAGH,IAAME,4CAAiF,GACrF,IAAIX,mCAAJ,EADF;AAGA,eAAeW,4CAAf"},"metadata":{},"sourceType":"module"}