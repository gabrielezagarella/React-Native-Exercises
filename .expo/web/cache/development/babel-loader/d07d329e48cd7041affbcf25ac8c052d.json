{"ast":null,"code":"'use strict';\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nvar infoLog = require(\"../Utilities/infoLog\");\n\nvar invariant = require('invariant');\n\nvar DEBUG = false;\n\nvar TaskQueue = function () {\n  function TaskQueue(_ref) {\n    var onMoreTasks = _ref.onMoreTasks;\n\n    _classCallCheck(this, TaskQueue);\n\n    this._onMoreTasks = onMoreTasks;\n    this._queueStack = [{\n      tasks: [],\n      popable: false\n    }];\n  }\n\n  _createClass(TaskQueue, [{\n    key: \"enqueue\",\n    value: function enqueue(task) {\n      this._getCurrentQueue().push(task);\n    }\n  }, {\n    key: \"enqueueTasks\",\n    value: function enqueueTasks(tasks) {\n      var _this = this;\n\n      tasks.forEach(function (task) {\n        return _this.enqueue(task);\n      });\n    }\n  }, {\n    key: \"cancelTasks\",\n    value: function cancelTasks(tasksToCancel) {\n      this._queueStack = this._queueStack.map(function (queue) {\n        return _objectSpread(_objectSpread({}, queue), {}, {\n          tasks: queue.tasks.filter(function (task) {\n            return tasksToCancel.indexOf(task) === -1;\n          })\n        });\n      }).filter(function (queue, idx) {\n        return queue.tasks.length > 0 || idx === 0;\n      });\n    }\n  }, {\n    key: \"hasTasksToProcess\",\n    value: function hasTasksToProcess() {\n      return this._getCurrentQueue().length > 0;\n    }\n  }, {\n    key: \"processNext\",\n    value: function processNext() {\n      var queue = this._getCurrentQueue();\n\n      if (queue.length) {\n        var task = queue.shift();\n\n        try {\n          if (typeof task === 'object' && task.gen) {\n            DEBUG && infoLog('TaskQueue: genPromise for task ' + task.name);\n\n            this._genPromise(task);\n          } else if (typeof task === 'object' && task.run) {\n            DEBUG && infoLog('TaskQueue: run task ' + task.name);\n            task.run();\n          } else {\n            invariant(typeof task === 'function', 'Expected Function, SimpleTask, or PromiseTask, but got:\\n' + JSON.stringify(task, null, 2));\n            DEBUG && infoLog('TaskQueue: run anonymous task');\n            task();\n          }\n        } catch (e) {\n          e.message = 'TaskQueue: Error with task ' + (task.name || '') + ': ' + e.message;\n          throw e;\n        }\n      }\n    }\n  }, {\n    key: \"_getCurrentQueue\",\n    value: function _getCurrentQueue() {\n      var stackIdx = this._queueStack.length - 1;\n      var queue = this._queueStack[stackIdx];\n\n      if (queue.popable && queue.tasks.length === 0 && this._queueStack.length > 1) {\n        this._queueStack.pop();\n\n        DEBUG && infoLog('TaskQueue: popped queue: ', {\n          stackIdx: stackIdx,\n          queueStackSize: this._queueStack.length\n        });\n        return this._getCurrentQueue();\n      } else {\n        return queue.tasks;\n      }\n    }\n  }, {\n    key: \"_genPromise\",\n    value: function _genPromise(task) {\n      var _this2 = this;\n\n      this._queueStack.push({\n        tasks: [],\n        popable: false\n      });\n\n      var stackIdx = this._queueStack.length - 1;\n      var stackItem = this._queueStack[stackIdx];\n      DEBUG && infoLog('TaskQueue: push new queue: ', {\n        stackIdx: stackIdx\n      });\n      DEBUG && infoLog('TaskQueue: exec gen task ' + task.name);\n      task.gen().then(function () {\n        DEBUG && infoLog('TaskQueue: onThen for gen task ' + task.name, {\n          stackIdx: stackIdx,\n          queueStackSize: _this2._queueStack.length\n        });\n        stackItem.popable = true;\n        _this2.hasTasksToProcess() && _this2._onMoreTasks();\n      }).catch(function (ex) {\n        setTimeout(function () {\n          ex.message = \"TaskQueue: Error resolving Promise in task \" + task.name + \": \" + ex.message;\n          throw ex;\n        }, 0);\n      });\n    }\n  }]);\n\n  return TaskQueue;\n}();\n\nmodule.exports = TaskQueue;","map":{"version":3,"names":["infoLog","require","invariant","DEBUG","TaskQueue","onMoreTasks","_onMoreTasks","_queueStack","tasks","popable","task","_getCurrentQueue","push","forEach","enqueue","tasksToCancel","map","queue","filter","indexOf","idx","length","shift","gen","name","_genPromise","run","JSON","stringify","e","message","stackIdx","pop","queueStackSize","stackItem","then","hasTasksToProcess","catch","ex","setTimeout","module","exports"],"sources":["/Users/zagarellagabriele/Desktop/Progetti/React Native/React-Native-Exercises/node_modules/react-native/Libraries/Interaction/TaskQueue.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\n'use strict';\n\nconst infoLog = require('../Utilities/infoLog');\nconst invariant = require('invariant');\n\ntype SimpleTask = {\n  name: string,\n  run: () => void,\n};\ntype PromiseTask = {\n  name: string,\n  gen: () => Promise<void>,\n};\nexport type Task = SimpleTask | PromiseTask | (() => void);\n\nconst DEBUG: false = false;\n\n/**\n * TaskQueue - A system for queueing and executing a mix of simple callbacks and\n * trees of dependent tasks based on Promises. No tasks are executed unless\n * `processNext` is called.\n *\n * `enqueue` takes a Task object with either a simple `run` callback, or a\n * `gen` function that returns a `Promise` and puts it in the queue.  If a gen\n * function is supplied, then the promise it returns will block execution of\n * tasks already in the queue until it resolves. This can be used to make sure\n * the first task is fully resolved (including asynchronous dependencies that\n * also schedule more tasks via `enqueue`) before starting on the next task.\n * The `onMoreTasks` constructor argument is used to inform the owner that an\n * async task has resolved and that the queue should be processed again.\n *\n * Note: Tasks are only actually executed with explicit calls to `processNext`.\n */\nclass TaskQueue {\n  /**\n   * TaskQueue instances are self contained and independent, so multiple tasks\n   * of varying semantics and priority can operate together.\n   *\n   * `onMoreTasks` is invoked when `PromiseTask`s resolve if there are more\n   * tasks to process.\n   */\n  constructor({onMoreTasks}: {onMoreTasks: () => void, ...}) {\n    this._onMoreTasks = onMoreTasks;\n    this._queueStack = [{tasks: [], popable: false}];\n  }\n\n  /**\n   * Add a task to the queue.  It is recommended to name your tasks for easier\n   * async debugging. Tasks will not be executed until `processNext` is called\n   * explicitly.\n   */\n  enqueue(task: Task): void {\n    this._getCurrentQueue().push(task);\n  }\n\n  enqueueTasks(tasks: Array<Task>): void {\n    tasks.forEach(task => this.enqueue(task));\n  }\n\n  cancelTasks(tasksToCancel: Array<Task>): void {\n    // search through all tasks and remove them.\n    this._queueStack = this._queueStack\n      .map(queue => ({\n        ...queue,\n        tasks: queue.tasks.filter(task => tasksToCancel.indexOf(task) === -1),\n      }))\n      .filter((queue, idx) => queue.tasks.length > 0 || idx === 0);\n  }\n\n  /**\n   * Check to see if `processNext` should be called.\n   *\n   * @returns {boolean} Returns true if there are tasks that are ready to be\n   * processed with `processNext`, or returns false if there are no more tasks\n   * to be processed right now, although there may be tasks in the queue that\n   * are blocked by earlier `PromiseTask`s that haven't resolved yet.\n   * `onMoreTasks` will be called after each `PromiseTask` resolves if there are\n   * tasks ready to run at that point.\n   */\n  hasTasksToProcess(): boolean {\n    return this._getCurrentQueue().length > 0;\n  }\n\n  /**\n   * Executes the next task in the queue.\n   */\n  processNext(): void {\n    const queue = this._getCurrentQueue();\n    if (queue.length) {\n      const task = queue.shift();\n      try {\n        if (typeof task === 'object' && task.gen) {\n          DEBUG && infoLog('TaskQueue: genPromise for task ' + task.name);\n          this._genPromise(task);\n        } else if (typeof task === 'object' && task.run) {\n          DEBUG && infoLog('TaskQueue: run task ' + task.name);\n          task.run();\n        } else {\n          invariant(\n            typeof task === 'function',\n            'Expected Function, SimpleTask, or PromiseTask, but got:\\n' +\n              JSON.stringify(task, null, 2),\n          );\n          DEBUG && infoLog('TaskQueue: run anonymous task');\n          task();\n        }\n      } catch (e) {\n        e.message =\n          'TaskQueue: Error with task ' + (task.name || '') + ': ' + e.message;\n        throw e;\n      }\n    }\n  }\n\n  _queueStack: Array<{\n    tasks: Array<Task>,\n    popable: boolean,\n    ...\n  }>;\n  _onMoreTasks: () => void;\n\n  _getCurrentQueue(): Array<Task> {\n    const stackIdx = this._queueStack.length - 1;\n    const queue = this._queueStack[stackIdx];\n    if (\n      queue.popable &&\n      queue.tasks.length === 0 &&\n      this._queueStack.length > 1\n    ) {\n      this._queueStack.pop();\n      DEBUG &&\n        infoLog('TaskQueue: popped queue: ', {\n          stackIdx,\n          queueStackSize: this._queueStack.length,\n        });\n      return this._getCurrentQueue();\n    } else {\n      return queue.tasks;\n    }\n  }\n\n  _genPromise(task: PromiseTask) {\n    // Each async task pushes it's own queue onto the queue stack. This\n    // effectively defers execution of previously queued tasks until the promise\n    // resolves, at which point we allow the new queue to be popped, which\n    // happens once it is fully processed.\n    this._queueStack.push({tasks: [], popable: false});\n    const stackIdx = this._queueStack.length - 1;\n    const stackItem = this._queueStack[stackIdx];\n    DEBUG && infoLog('TaskQueue: push new queue: ', {stackIdx});\n    DEBUG && infoLog('TaskQueue: exec gen task ' + task.name);\n    task\n      .gen()\n      .then(() => {\n        DEBUG &&\n          infoLog('TaskQueue: onThen for gen task ' + task.name, {\n            stackIdx,\n            queueStackSize: this._queueStack.length,\n          });\n        stackItem.popable = true;\n        this.hasTasksToProcess() && this._onMoreTasks();\n      })\n      .catch(ex => {\n        setTimeout(() => {\n          ex.message = `TaskQueue: Error resolving Promise in task ${task.name}: ${ex.message}`;\n          throw ex;\n        }, 0);\n      });\n  }\n}\n\nmodule.exports = TaskQueue;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}