{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport findNodeHandleRN from \"react-native-web/dist/exports/findNodeHandle\";\nimport { handlerIDToTag } from \"./handlersRegistry\";\nimport { toArray } from \"../utils\";\nimport RNGestureHandlerModule from \"../RNGestureHandlerModule\";\nvar commonProps = ['id', 'enabled', 'shouldCancelWhenOutside', 'hitSlop', 'cancelsTouchesInView', 'userSelect'];\nvar componentInteractionProps = ['waitFor', 'simultaneousHandlers'];\nexport var baseGestureHandlerProps = [].concat(commonProps, componentInteractionProps, ['onBegan', 'onFailed', 'onCancelled', 'onActivated', 'onEnded', 'onGestureEvent', 'onHandlerStateChange']);\nexport var baseGestureHandlerWithMonitorProps = [].concat(commonProps, ['needsPointerData', 'manualActivation']);\n\nfunction isConfigParam(param, name) {\n  return param !== undefined && (param !== Object(param) || !('__isNative' in param)) && name !== 'onHandlerStateChange' && name !== 'onGestureEvent';\n}\n\nexport function filterConfig(props, validProps) {\n  var defaults = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  var filteredConfig = _objectSpread({}, defaults);\n\n  for (var key of validProps) {\n    var value = props[key];\n\n    if (isConfigParam(value, key)) {\n      if (key === 'simultaneousHandlers' || key === 'waitFor') {\n        value = transformIntoHandlerTags(props[key]);\n      } else if (key === 'hitSlop' && typeof value !== 'object') {\n        value = {\n          top: value,\n          left: value,\n          bottom: value,\n          right: value\n        };\n      }\n\n      filteredConfig[key] = value;\n    }\n  }\n\n  return filteredConfig;\n}\n\nfunction transformIntoHandlerTags(handlerIDs) {\n  handlerIDs = toArray(handlerIDs);\n\n  if (Platform.OS === 'web') {\n    return handlerIDs.map(function (_ref) {\n      var current = _ref.current;\n      return current;\n    }).filter(function (handle) {\n      return handle;\n    });\n  }\n\n  return handlerIDs.map(function (handlerID) {\n    var _handlerID$current;\n\n    return handlerIDToTag[handlerID] || ((_handlerID$current = handlerID.current) === null || _handlerID$current === void 0 ? void 0 : _handlerID$current.handlerTag) || -1;\n  }).filter(function (handlerTag) {\n    return handlerTag > 0;\n  });\n}\n\nexport function findNodeHandle(node) {\n  if (Platform.OS === 'web') {\n    return node;\n  }\n\n  return findNodeHandleRN(node);\n}\nvar scheduledFlushOperationsId = null;\nexport function scheduleFlushOperations() {\n  if (scheduledFlushOperationsId === null) {\n    scheduledFlushOperationsId = requestAnimationFrame(function () {\n      RNGestureHandlerModule.flushOperations();\n      scheduledFlushOperationsId = null;\n    });\n  }\n}","map":{"version":3,"sources":["gestureHandlerCommon.ts"],"names":["commonProps","componentInteractionProps","baseGestureHandlerProps","baseGestureHandlerWithMonitorProps","param","Object","name","defaults","filteredConfig","value","props","isConfigParam","key","transformIntoHandlerTags","top","left","bottom","right","handlerIDs","toArray","Platform","current","handle","handlerID","handlerIDToTag","handlerTag","findNodeHandleRN","scheduledFlushOperationsId","requestAnimationFrame","RNGestureHandlerModule"],"mappings":"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","sourcesContent":["// Previous types exported gesture handlers as classes which creates an interface and variable, both named the same as class.\n// Without those types, we'd introduce breaking change, forcing users to prefix every handler type specification with typeof\n// e.g. React.createRef<TapGestureHandler> -> React.createRef<typeof TapGestureHandler>.\n// See https://www.typescriptlang.org/docs/handbook/classes.html#constructor-functions for reference.\nimport * as React from 'react';\nimport { Platform, findNodeHandle as findNodeHandleRN } from 'react-native';\n\nimport { State } from '../State';\nimport { TouchEventType } from '../TouchEventType';\nimport { ValueOf } from '../typeUtils';\nimport { handlerIDToTag } from './handlersRegistry';\nimport { toArray } from '../utils';\nimport RNGestureHandlerModule from '../RNGestureHandlerModule';\n\nconst commonProps = [\n  'id',\n  'enabled',\n  'shouldCancelWhenOutside',\n  'hitSlop',\n  'cancelsTouchesInView',\n  'userSelect',\n] as const;\n\nconst componentInteractionProps = ['waitFor', 'simultaneousHandlers'] as const;\n\nexport const baseGestureHandlerProps = [\n  ...commonProps,\n  ...componentInteractionProps,\n  'onBegan',\n  'onFailed',\n  'onCancelled',\n  'onActivated',\n  'onEnded',\n  'onGestureEvent',\n  'onHandlerStateChange',\n] as const;\n\nexport const baseGestureHandlerWithMonitorProps = [\n  ...commonProps,\n  'needsPointerData',\n  'manualActivation',\n];\n\nexport interface GestureEventPayload {\n  handlerTag: number;\n  numberOfPointers: number;\n  state: ValueOf<typeof State>;\n}\nexport interface HandlerStateChangeEventPayload extends GestureEventPayload {\n  oldState: ValueOf<typeof State>;\n}\n\nexport type HitSlop =\n  | number\n  | Partial<\n      Record<\n        'left' | 'right' | 'top' | 'bottom' | 'vertical' | 'horizontal',\n        number\n      >\n    >\n  | Record<'width' | 'left', number>\n  | Record<'width' | 'right', number>\n  | Record<'height' | 'top', number>\n  | Record<'height' | 'bottom', number>;\n\nexport type UserSelect = 'none' | 'auto' | 'text';\n\n//TODO(TS) events in handlers\n\nexport interface GestureEvent<ExtraEventPayloadT = Record<string, unknown>> {\n  nativeEvent: Readonly<GestureEventPayload & ExtraEventPayloadT>;\n}\nexport interface HandlerStateChangeEvent<\n  ExtraEventPayloadT = Record<string, unknown>\n> {\n  nativeEvent: Readonly<HandlerStateChangeEventPayload & ExtraEventPayloadT>;\n}\n\nexport type TouchData = {\n  id: number;\n  x: number;\n  y: number;\n  absoluteX: number;\n  absoluteY: number;\n};\n\nexport type GestureTouchEvent = {\n  handlerTag: number;\n  numberOfTouches: number;\n  state: ValueOf<typeof State>;\n  eventType: TouchEventType;\n  allTouches: TouchData[];\n  changedTouches: TouchData[];\n};\n\nexport type GestureUpdateEvent<GestureEventPayloadT = Record<string, unknown>> =\n  GestureEventPayload & GestureEventPayloadT;\n\nexport type GestureStateChangeEvent<\n  GestureStateChangeEventPayloadT = Record<string, unknown>\n> = HandlerStateChangeEventPayload & GestureStateChangeEventPayloadT;\n\nexport type CommonGestureConfig = {\n  enabled?: boolean;\n  shouldCancelWhenOutside?: boolean;\n  hitSlop?: HitSlop;\n  userSelect?: UserSelect;\n};\n\n// Events payloads are types instead of interfaces due to TS limitation.\n// See https://github.com/microsoft/TypeScript/issues/15300 for more info.\nexport type BaseGestureHandlerProps<\n  ExtraEventPayloadT extends Record<string, unknown> = Record<string, unknown>\n> = CommonGestureConfig & {\n  id?: string;\n  waitFor?: React.Ref<unknown> | React.Ref<unknown>[];\n  simultaneousHandlers?: React.Ref<unknown> | React.Ref<unknown>[];\n  testID?: string;\n  cancelsTouchesInView?: boolean;\n  // TODO(TS) - fix event types\n  onBegan?: (event: HandlerStateChangeEvent) => void;\n  onFailed?: (event: HandlerStateChangeEvent) => void;\n  onCancelled?: (event: HandlerStateChangeEvent) => void;\n  onActivated?: (event: HandlerStateChangeEvent) => void;\n  onEnded?: (event: HandlerStateChangeEvent) => void;\n\n  //TODO(TS) consider using NativeSyntheticEvent\n  onGestureEvent?: (event: GestureEvent<ExtraEventPayloadT>) => void;\n  onHandlerStateChange?: (\n    event: HandlerStateChangeEvent<ExtraEventPayloadT>\n  ) => void;\n  // implicit `children` prop has been removed in @types/react^18.0.0\n  children?: React.ReactNode;\n};\n\nfunction isConfigParam(param: unknown, name: string) {\n  // param !== Object(param) returns false if `param` is a function\n  // or an object and returns true if `param` is null\n  return (\n    param !== undefined &&\n    (param !== Object(param) ||\n      !('__isNative' in (param as Record<string, unknown>))) &&\n    name !== 'onHandlerStateChange' &&\n    name !== 'onGestureEvent'\n  );\n}\n\nexport function filterConfig(\n  props: Record<string, unknown>,\n  validProps: string[],\n  defaults: Record<string, unknown> = {}\n) {\n  const filteredConfig = { ...defaults };\n  for (const key of validProps) {\n    let value = props[key];\n    if (isConfigParam(value, key)) {\n      if (key === 'simultaneousHandlers' || key === 'waitFor') {\n        value = transformIntoHandlerTags(props[key]);\n      } else if (key === 'hitSlop' && typeof value !== 'object') {\n        value = { top: value, left: value, bottom: value, right: value };\n      }\n      filteredConfig[key] = value;\n    }\n  }\n  return filteredConfig;\n}\n\nfunction transformIntoHandlerTags(handlerIDs: any) {\n  handlerIDs = toArray(handlerIDs);\n\n  if (Platform.OS === 'web') {\n    return handlerIDs\n      .map(({ current }: { current: any }) => current)\n      .filter((handle: any) => handle);\n  }\n  // converts handler string IDs into their numeric tags\n  return handlerIDs\n    .map(\n      (handlerID: any) =>\n        handlerIDToTag[handlerID] || handlerID.current?.handlerTag || -1\n    )\n    .filter((handlerTag: number) => handlerTag > 0);\n}\n\nexport function findNodeHandle(\n  node: null | number | React.Component<any, any> | React.ComponentClass<any>\n): null | number | React.Component<any, any> | React.ComponentClass<any> {\n  if (Platform.OS === 'web') {\n    return node;\n  }\n  return findNodeHandleRN(node);\n}\n\nlet scheduledFlushOperationsId: ReturnType<\n  typeof requestAnimationFrame\n> | null = null;\n\nexport function scheduleFlushOperations() {\n  if (scheduledFlushOperationsId === null) {\n    scheduledFlushOperationsId = requestAnimationFrame(() => {\n      RNGestureHandlerModule.flushOperations();\n\n      scheduledFlushOperationsId = null;\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}