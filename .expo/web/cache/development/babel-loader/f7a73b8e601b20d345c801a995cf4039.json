{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport Keyboard from \"../../Components/Keyboard/Keyboard\";\nimport ScrollView from \"../../Components/ScrollView/ScrollView\";\nimport View from \"../../Components/View/View\";\nimport StyleSheet from \"../../StyleSheet/StyleSheet\";\nimport * as LogBoxData from \"../Data/LogBoxData\";\nimport LogBoxLog from \"../Data/LogBoxLog\";\nimport LogBoxInspectorCodeFrame from \"./LogBoxInspectorCodeFrame\";\nimport LogBoxInspectorFooter from \"./LogBoxInspectorFooter\";\nimport LogBoxInspectorHeader from \"./LogBoxInspectorHeader\";\nimport LogBoxInspectorMessageHeader from \"./LogBoxInspectorMessageHeader\";\nimport LogBoxInspectorReactFrames from \"./LogBoxInspectorReactFrames\";\nimport LogBoxInspectorStackFrames from \"./LogBoxInspectorStackFrames\";\nimport * as LogBoxStyle from \"./LogBoxStyle\";\nimport * as React from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nfunction LogBoxInspector(props) {\n  var logs = props.logs,\n      selectedIndex = props.selectedIndex;\n  var log = logs[selectedIndex];\n  React.useEffect(function () {\n    if (log) {\n      LogBoxData.symbolicateLogNow(log);\n    }\n  }, [log]);\n  React.useEffect(function () {\n    if (logs.length > 1) {\n      var selected = selectedIndex;\n      var lastIndex = logs.length - 1;\n      var prevIndex = selected - 1 < 0 ? lastIndex : selected - 1;\n      var nextIndex = selected + 1 > lastIndex ? 0 : selected + 1;\n      LogBoxData.symbolicateLogLazy(logs[prevIndex]);\n      LogBoxData.symbolicateLogLazy(logs[nextIndex]);\n    }\n  }, [logs, selectedIndex]);\n  React.useEffect(function () {\n    Keyboard.dismiss();\n  }, []);\n\n  function _handleRetry() {\n    LogBoxData.retrySymbolicateLogNow(log);\n  }\n\n  if (log == null) {\n    return null;\n  }\n\n  return _jsxs(View, {\n    style: styles.root,\n    children: [_jsx(LogBoxInspectorHeader, {\n      onSelectIndex: props.onChangeSelectedIndex,\n      selectedIndex: selectedIndex,\n      total: logs.length,\n      level: log.level\n    }), _jsx(LogBoxInspectorBody, {\n      log: log,\n      onRetry: _handleRetry\n    }), _jsx(LogBoxInspectorFooter, {\n      onDismiss: props.onDismiss,\n      onMinimize: props.onMinimize,\n      level: log.level\n    })]\n  });\n}\n\nvar headerTitleMap = {\n  warn: 'Console Warning',\n  error: 'Console Error',\n  fatal: 'Uncaught Error',\n  syntax: 'Syntax Error',\n  component: 'Render Error'\n};\n\nfunction LogBoxInspectorBody(props) {\n  var _props$log$type;\n\n  var _React$useState = React.useState(true),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      collapsed = _React$useState2[0],\n      setCollapsed = _React$useState2[1];\n\n  React.useEffect(function () {\n    setCollapsed(true);\n  }, [props.log]);\n  var headerTitle = (_props$log$type = props.log.type) != null ? _props$log$type : headerTitleMap[props.log.isComponentError ? 'component' : props.log.level];\n\n  if (collapsed) {\n    return _jsxs(_Fragment, {\n      children: [_jsx(LogBoxInspectorMessageHeader, {\n        collapsed: collapsed,\n        onPress: function onPress() {\n          return setCollapsed(!collapsed);\n        },\n        message: props.log.message,\n        level: props.log.level,\n        title: headerTitle\n      }), _jsxs(ScrollView, {\n        style: styles.scrollBody,\n        children: [_jsx(LogBoxInspectorCodeFrame, {\n          codeFrame: props.log.codeFrame\n        }), _jsx(LogBoxInspectorReactFrames, {\n          log: props.log\n        }), _jsx(LogBoxInspectorStackFrames, {\n          log: props.log,\n          onRetry: props.onRetry\n        })]\n      })]\n    });\n  }\n\n  return _jsxs(ScrollView, {\n    style: styles.scrollBody,\n    children: [_jsx(LogBoxInspectorMessageHeader, {\n      collapsed: collapsed,\n      onPress: function onPress() {\n        return setCollapsed(!collapsed);\n      },\n      message: props.log.message,\n      level: props.log.level,\n      title: headerTitle\n    }), _jsx(LogBoxInspectorCodeFrame, {\n      codeFrame: props.log.codeFrame\n    }), _jsx(LogBoxInspectorReactFrames, {\n      log: props.log\n    }), _jsx(LogBoxInspectorStackFrames, {\n      log: props.log,\n      onRetry: props.onRetry\n    })]\n  });\n}\n\nvar styles = StyleSheet.create({\n  root: {\n    flex: 1,\n    backgroundColor: LogBoxStyle.getTextColor()\n  },\n  scrollBody: {\n    backgroundColor: LogBoxStyle.getBackgroundColor(0.9),\n    flex: 1\n  }\n});\nexport default LogBoxInspector;","map":{"version":3,"names":["Keyboard","ScrollView","View","StyleSheet","LogBoxData","LogBoxLog","LogBoxInspectorCodeFrame","LogBoxInspectorFooter","LogBoxInspectorHeader","LogBoxInspectorMessageHeader","LogBoxInspectorReactFrames","LogBoxInspectorStackFrames","LogBoxStyle","React","LogBoxInspector","props","logs","selectedIndex","log","useEffect","symbolicateLogNow","length","selected","lastIndex","prevIndex","nextIndex","symbolicateLogLazy","dismiss","_handleRetry","retrySymbolicateLogNow","styles","root","onChangeSelectedIndex","level","onDismiss","onMinimize","headerTitleMap","warn","error","fatal","syntax","component","LogBoxInspectorBody","useState","collapsed","setCollapsed","headerTitle","type","isComponentError","message","scrollBody","codeFrame","onRetry","create","flex","backgroundColor","getTextColor","getBackgroundColor"],"sources":["/Users/zagarellagabriele/Desktop/Progetti/React Native/React-Native-Exercises/node_modules/react-native/Libraries/LogBox/UI/LogBoxInspector.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport Keyboard from '../../Components/Keyboard/Keyboard';\nimport ScrollView from '../../Components/ScrollView/ScrollView';\nimport View from '../../Components/View/View';\nimport StyleSheet from '../../StyleSheet/StyleSheet';\nimport * as LogBoxData from '../Data/LogBoxData';\nimport LogBoxLog, {type LogLevel} from '../Data/LogBoxLog';\nimport LogBoxInspectorCodeFrame from './LogBoxInspectorCodeFrame';\nimport LogBoxInspectorFooter from './LogBoxInspectorFooter';\nimport LogBoxInspectorHeader from './LogBoxInspectorHeader';\nimport LogBoxInspectorMessageHeader from './LogBoxInspectorMessageHeader';\nimport LogBoxInspectorReactFrames from './LogBoxInspectorReactFrames';\nimport LogBoxInspectorStackFrames from './LogBoxInspectorStackFrames';\nimport * as LogBoxStyle from './LogBoxStyle';\nimport * as React from 'react';\n\ntype Props = $ReadOnly<{|\n  onDismiss: () => void,\n  onChangeSelectedIndex: (index: number) => void,\n  onMinimize: () => void,\n  logs: $ReadOnlyArray<LogBoxLog>,\n  selectedIndex: number,\n  fatalType?: ?LogLevel,\n|}>;\n\nfunction LogBoxInspector(props: Props): React.Node {\n  const {logs, selectedIndex} = props;\n  let log = logs[selectedIndex];\n\n  React.useEffect(() => {\n    if (log) {\n      LogBoxData.symbolicateLogNow(log);\n    }\n  }, [log]);\n\n  React.useEffect(() => {\n    // Optimistically symbolicate the last and next logs.\n    if (logs.length > 1) {\n      const selected = selectedIndex;\n      const lastIndex = logs.length - 1;\n      const prevIndex = selected - 1 < 0 ? lastIndex : selected - 1;\n      const nextIndex = selected + 1 > lastIndex ? 0 : selected + 1;\n      LogBoxData.symbolicateLogLazy(logs[prevIndex]);\n      LogBoxData.symbolicateLogLazy(logs[nextIndex]);\n    }\n  }, [logs, selectedIndex]);\n\n  React.useEffect(() => {\n    Keyboard.dismiss();\n  }, []);\n\n  function _handleRetry() {\n    LogBoxData.retrySymbolicateLogNow(log);\n  }\n\n  if (log == null) {\n    return null;\n  }\n\n  return (\n    <View style={styles.root}>\n      <LogBoxInspectorHeader\n        onSelectIndex={props.onChangeSelectedIndex}\n        selectedIndex={selectedIndex}\n        total={logs.length}\n        level={log.level}\n      />\n      <LogBoxInspectorBody log={log} onRetry={_handleRetry} />\n      <LogBoxInspectorFooter\n        onDismiss={props.onDismiss}\n        onMinimize={props.onMinimize}\n        level={log.level}\n      />\n    </View>\n  );\n}\n\nconst headerTitleMap = {\n  warn: 'Console Warning',\n  error: 'Console Error',\n  fatal: 'Uncaught Error',\n  syntax: 'Syntax Error',\n  component: 'Render Error',\n};\n\nfunction LogBoxInspectorBody(\n  props: $TEMPORARY$object<{log: LogBoxLog, onRetry: () => void}>,\n) {\n  const [collapsed, setCollapsed] = React.useState(true);\n\n  React.useEffect(() => {\n    setCollapsed(true);\n  }, [props.log]);\n\n  const headerTitle =\n    props.log.type ??\n    headerTitleMap[props.log.isComponentError ? 'component' : props.log.level];\n\n  if (collapsed) {\n    return (\n      <>\n        <LogBoxInspectorMessageHeader\n          collapsed={collapsed}\n          onPress={() => setCollapsed(!collapsed)}\n          message={props.log.message}\n          level={props.log.level}\n          title={headerTitle}\n        />\n        <ScrollView style={styles.scrollBody}>\n          <LogBoxInspectorCodeFrame codeFrame={props.log.codeFrame} />\n          <LogBoxInspectorReactFrames log={props.log} />\n          <LogBoxInspectorStackFrames log={props.log} onRetry={props.onRetry} />\n        </ScrollView>\n      </>\n    );\n  }\n  return (\n    <ScrollView style={styles.scrollBody}>\n      <LogBoxInspectorMessageHeader\n        collapsed={collapsed}\n        onPress={() => setCollapsed(!collapsed)}\n        message={props.log.message}\n        level={props.log.level}\n        title={headerTitle}\n      />\n      <LogBoxInspectorCodeFrame codeFrame={props.log.codeFrame} />\n      <LogBoxInspectorReactFrames log={props.log} />\n      <LogBoxInspectorStackFrames log={props.log} onRetry={props.onRetry} />\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    flex: 1,\n    backgroundColor: LogBoxStyle.getTextColor(),\n  },\n  scrollBody: {\n    backgroundColor: LogBoxStyle.getBackgroundColor(0.9),\n    flex: 1,\n  },\n});\n\nexport default LogBoxInspector;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}