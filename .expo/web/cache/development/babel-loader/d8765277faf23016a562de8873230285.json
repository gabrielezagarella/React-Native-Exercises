{"ast":null,"code":"'use strict';\n\nfunction deepFreezeAndThrowOnMutationInDev(object) {\n  if (__DEV__) {\n    if (typeof object !== 'object' || object === null || Object.isFrozen(object) || Object.isSealed(object)) {\n      return object;\n    }\n\n    var keys = Object.keys(object);\n    var _hasOwnProperty = Object.prototype.hasOwnProperty;\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n\n      if (_hasOwnProperty.call(object, key)) {\n        Object.defineProperty(object, key, {\n          get: identity.bind(null, object[key])\n        });\n        Object.defineProperty(object, key, {\n          set: throwOnImmutableMutation.bind(null, key)\n        });\n      }\n    }\n\n    Object.freeze(object);\n    Object.seal(object);\n\n    for (var _i = 0; _i < keys.length; _i++) {\n      var _key = keys[_i];\n\n      if (_hasOwnProperty.call(object, _key)) {\n        deepFreezeAndThrowOnMutationInDev(object[_key]);\n      }\n    }\n  }\n\n  return object;\n}\n\nfunction throwOnImmutableMutation(key, value) {\n  throw Error('You attempted to set the key `' + key + '` with the value `' + JSON.stringify(value) + '` on an object that is meant to be immutable ' + 'and has been frozen.');\n}\n\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = deepFreezeAndThrowOnMutationInDev;","map":{"version":3,"names":["deepFreezeAndThrowOnMutationInDev","object","__DEV__","Object","isFrozen","isSealed","keys","hasOwnProperty","prototype","i","length","key","call","defineProperty","get","identity","bind","set","throwOnImmutableMutation","freeze","seal","value","Error","JSON","stringify","module","exports"],"sources":["/Users/zagarellagabriele/Desktop/Progetti/React Native/React-Native-Exercises/node_modules/react-native/Libraries/Utilities/deepFreezeAndThrowOnMutationInDev.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\n'use strict';\n\n/**\n * If your application is accepting different values for the same field over\n * time and is doing a diff on them, you can either (1) create a copy or\n * (2) ensure that those values are not mutated behind two passes.\n * This function helps you with (2) by freezing the object and throwing if\n * the user subsequently modifies the value.\n *\n * There are two caveats with this function:\n *   - If the call site is not in strict mode, it will only throw when\n *     mutating existing fields, adding a new one\n *     will unfortunately fail silently :(\n *   - If the object is already frozen or sealed, it will not continue the\n *     deep traversal and will leave leaf nodes unfrozen.\n *\n * Freezing the object and adding the throw mechanism is expensive and will\n * only be used in DEV.\n */\nfunction deepFreezeAndThrowOnMutationInDev<T: {...} | Array<mixed>>(\n  object: T,\n): T {\n  if (__DEV__) {\n    if (\n      typeof object !== 'object' ||\n      object === null ||\n      Object.isFrozen(object) ||\n      Object.isSealed(object)\n    ) {\n      return object;\n    }\n\n    // $FlowFixMe[not-an-object] `object` can be an array, but Object.keys works with arrays too\n    const keys = Object.keys((object: {...} | Array<mixed>));\n    // $FlowFixMe[method-unbinding] added when improving typing for this parameters\n    const hasOwnProperty = Object.prototype.hasOwnProperty;\n\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      if (hasOwnProperty.call(object, key)) {\n        Object.defineProperty(object, key, {\n          get: identity.bind(null, object[key]),\n        });\n        Object.defineProperty(object, key, {\n          set: throwOnImmutableMutation.bind(null, key),\n        });\n      }\n    }\n\n    Object.freeze(object);\n    Object.seal(object);\n\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      if (hasOwnProperty.call(object, key)) {\n        deepFreezeAndThrowOnMutationInDev(object[key]);\n      }\n    }\n  }\n  return object;\n}\n\n/* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's\n * LTI update could not be added via codemod */\nfunction throwOnImmutableMutation(key: empty, value) {\n  throw Error(\n    'You attempted to set the key `' +\n      key +\n      '` with the value `' +\n      JSON.stringify(value) +\n      '` on an object that is meant to be immutable ' +\n      'and has been frozen.',\n  );\n}\n\nfunction identity(value: mixed) {\n  return value;\n}\n\nmodule.exports = deepFreezeAndThrowOnMutationInDev;\n"],"mappings":"AAUA;;AAmBA,SAASA,iCAAT,CACEC,MADF,EAEK;EACH,IAAIC,OAAJ,EAAa;IACX,IACE,OAAOD,MAAP,KAAkB,QAAlB,IACAA,MAAM,KAAK,IADX,IAEAE,MAAM,CAACC,QAAP,CAAgBH,MAAhB,CAFA,IAGAE,MAAM,CAACE,QAAP,CAAgBJ,MAAhB,CAJF,EAKE;MACA,OAAOA,MAAP;IACD;;IAGD,IAAMK,IAAI,GAAGH,MAAM,CAACG,IAAP,CAAaL,MAAb,CAAb;IAEA,IAAMM,eAAc,GAAGJ,MAAM,CAACK,SAAP,CAAiBD,cAAxC;;IAEA,KAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAAI,CAACI,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;MACpC,IAAME,GAAG,GAAGL,IAAI,CAACG,CAAD,CAAhB;;MACA,IAAIF,eAAc,CAACK,IAAf,CAAoBX,MAApB,EAA4BU,GAA5B,CAAJ,EAAsC;QACpCR,MAAM,CAACU,cAAP,CAAsBZ,MAAtB,EAA8BU,GAA9B,EAAmC;UACjCG,GAAG,EAAEC,QAAQ,CAACC,IAAT,CAAc,IAAd,EAAoBf,MAAM,CAACU,GAAD,CAA1B;QAD4B,CAAnC;QAGAR,MAAM,CAACU,cAAP,CAAsBZ,MAAtB,EAA8BU,GAA9B,EAAmC;UACjCM,GAAG,EAAEC,wBAAwB,CAACF,IAAzB,CAA8B,IAA9B,EAAoCL,GAApC;QAD4B,CAAnC;MAGD;IACF;;IAEDR,MAAM,CAACgB,MAAP,CAAclB,MAAd;IACAE,MAAM,CAACiB,IAAP,CAAYnB,MAAZ;;IAEA,KAAK,IAAIQ,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGH,IAAI,CAACI,MAAzB,EAAiCD,EAAC,EAAlC,EAAsC;MACpC,IAAME,IAAG,GAAGL,IAAI,CAACG,EAAD,CAAhB;;MACA,IAAIF,eAAc,CAACK,IAAf,CAAoBX,MAApB,EAA4BU,IAA5B,CAAJ,EAAsC;QACpCX,iCAAiC,CAACC,MAAM,CAACU,IAAD,CAAP,CAAjC;MACD;IACF;EACF;;EACD,OAAOV,MAAP;AACD;;AAID,SAASiB,wBAAT,CAAkCP,GAAlC,EAA8CU,KAA9C,EAAqD;EACnD,MAAMC,KAAK,CACT,mCACEX,GADF,GAEE,oBAFF,GAGEY,IAAI,CAACC,SAAL,CAAeH,KAAf,CAHF,GAIE,+CAJF,GAKE,sBANO,CAAX;AAQD;;AAED,SAASN,QAAT,CAAkBM,KAAlB,EAAgC;EAC9B,OAAOA,KAAP;AACD;;AAEDI,MAAM,CAACC,OAAP,GAAiB1B,iCAAjB"},"metadata":{},"sourceType":"script"}