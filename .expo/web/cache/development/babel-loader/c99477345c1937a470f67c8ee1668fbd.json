{"ast":null,"code":"import Platform from \"../Utilities/Platform\";\nvar isEnabled = false;\n\nif (Platform.OS === 'web') {\n  var canUseDOM = Boolean(typeof window !== 'undefined' && window.document && window.document.createElement);\n\n  if (canUseDOM) {\n    var HOVER_THRESHOLD_MS = 1000;\n    var lastTouchTimestamp = 0;\n\n    var enableHover = function enableHover() {\n      if (isEnabled || Date.now() - lastTouchTimestamp < HOVER_THRESHOLD_MS) {\n        return;\n      }\n\n      isEnabled = true;\n    };\n\n    var disableHover = function disableHover() {\n      lastTouchTimestamp = Date.now();\n\n      if (isEnabled) {\n        isEnabled = false;\n      }\n    };\n\n    document.addEventListener('touchstart', disableHover, true);\n    document.addEventListener('touchmove', disableHover, true);\n    document.addEventListener('mousemove', enableHover, true);\n  }\n}\n\nexport function isHoverEnabled() {\n  return isEnabled;\n}","map":{"version":3,"names":["Platform","isEnabled","OS","canUseDOM","Boolean","window","document","createElement","HOVER_THRESHOLD_MS","lastTouchTimestamp","enableHover","Date","now","disableHover","addEventListener","isHoverEnabled"],"sources":["/Users/zagarellagabriele/Desktop/Progetti/React Native/React-Native-Exercises/node_modules/react-native/Libraries/Pressability/HoverState.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport Platform from '../Utilities/Platform';\n\nlet isEnabled = false;\n\nif (Platform.OS === 'web') {\n  const canUseDOM = Boolean(\n    typeof window !== 'undefined' &&\n      window.document &&\n      window.document.createElement,\n  );\n\n  if (canUseDOM) {\n    /**\n     * Web browsers emulate mouse events (and hover states) after touch events.\n     * This code infers when the currently-in-use modality supports hover\n     * (including for multi-modality devices) and considers \"hover\" to be enabled\n     * if a mouse movement occurs more than 1 second after the last touch event.\n     * This threshold is long enough to account for longer delays between the\n     * browser firing touch and mouse events on low-powered devices.\n     */\n    const HOVER_THRESHOLD_MS = 1000;\n    let lastTouchTimestamp = 0;\n\n    const enableHover = () => {\n      if (isEnabled || Date.now() - lastTouchTimestamp < HOVER_THRESHOLD_MS) {\n        return;\n      }\n      isEnabled = true;\n    };\n\n    const disableHover = () => {\n      lastTouchTimestamp = Date.now();\n      if (isEnabled) {\n        isEnabled = false;\n      }\n    };\n\n    document.addEventListener('touchstart', disableHover, true);\n    document.addEventListener('touchmove', disableHover, true);\n    document.addEventListener('mousemove', enableHover, true);\n  }\n}\n\nexport function isHoverEnabled(): boolean {\n  return isEnabled;\n}\n"],"mappings":"AAUA,OAAOA,QAAP;AAEA,IAAIC,SAAS,GAAG,KAAhB;;AAEA,IAAID,QAAQ,CAACE,EAAT,KAAgB,KAApB,EAA2B;EACzB,IAAMC,SAAS,GAAGC,OAAO,CACvB,OAAOC,MAAP,KAAkB,WAAlB,IACEA,MAAM,CAACC,QADT,IAEED,MAAM,CAACC,QAAP,CAAgBC,aAHK,CAAzB;;EAMA,IAAIJ,SAAJ,EAAe;IASb,IAAMK,kBAAkB,GAAG,IAA3B;IACA,IAAIC,kBAAkB,GAAG,CAAzB;;IAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;MACxB,IAAIT,SAAS,IAAIU,IAAI,CAACC,GAAL,KAAaH,kBAAb,GAAkCD,kBAAnD,EAAuE;QACrE;MACD;;MACDP,SAAS,GAAG,IAAZ;IACD,CALD;;IAOA,IAAMY,YAAY,GAAG,SAAfA,YAAe,GAAM;MACzBJ,kBAAkB,GAAGE,IAAI,CAACC,GAAL,EAArB;;MACA,IAAIX,SAAJ,EAAe;QACbA,SAAS,GAAG,KAAZ;MACD;IACF,CALD;;IAOAK,QAAQ,CAACQ,gBAAT,CAA0B,YAA1B,EAAwCD,YAAxC,EAAsD,IAAtD;IACAP,QAAQ,CAACQ,gBAAT,CAA0B,WAA1B,EAAuCD,YAAvC,EAAqD,IAArD;IACAP,QAAQ,CAACQ,gBAAT,CAA0B,WAA1B,EAAuCJ,WAAvC,EAAoD,IAApD;EACD;AACF;;AAED,OAAO,SAASK,cAAT,GAAmC;EACxC,OAAOd,SAAP;AACD"},"metadata":{},"sourceType":"module"}