{"ast":null,"code":"'use strict';\n\nfunction defineLazyObjectProperty(object, name, descriptor) {\n  var get = descriptor.get;\n  var enumerable = descriptor.enumerable !== false;\n  var writable = descriptor.writable !== false;\n  var value;\n  var valueSet = false;\n\n  function getValue() {\n    if (!valueSet) {\n      valueSet = true;\n      setValue(get());\n    }\n\n    return value;\n  }\n\n  function setValue(newValue) {\n    value = newValue;\n    valueSet = true;\n    Object.defineProperty(object, name, {\n      value: newValue,\n      configurable: true,\n      enumerable: enumerable,\n      writable: writable\n    });\n  }\n\n  Object.defineProperty(object, name, {\n    get: getValue,\n    set: setValue,\n    configurable: true,\n    enumerable: enumerable\n  });\n}\n\nmodule.exports = defineLazyObjectProperty;","map":{"version":3,"names":["defineLazyObjectProperty","object","name","descriptor","get","enumerable","writable","value","valueSet","getValue","setValue","newValue","Object","defineProperty","configurable","set","module","exports"],"sources":["/Users/zagarellagabriele/Desktop/Progetti/React Native/React-Native-Exercises/node_modules/react-native/Libraries/Utilities/defineLazyObjectProperty.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\n'use strict';\n\n/**\n * Defines a lazily evaluated property on the supplied `object`.\n */\nfunction defineLazyObjectProperty<T>(\n  object: interface {},\n  name: string,\n  descriptor: {\n    get: () => T,\n    enumerable?: boolean,\n    writable?: boolean,\n    ...\n  },\n): void {\n  const {get} = descriptor;\n  const enumerable = descriptor.enumerable !== false;\n  const writable = descriptor.writable !== false;\n\n  let value;\n  let valueSet = false;\n  function getValue(): T {\n    // WORKAROUND: A weird infinite loop occurs where calling `getValue` calls\n    // `setValue` which calls `Object.defineProperty` which somehow triggers\n    // `getValue` again. Adding `valueSet` breaks this loop.\n    if (!valueSet) {\n      // Calling `get()` here can trigger an infinite loop if it fails to\n      // remove the getter on the property, which can happen when executing\n      // JS in a V8 context.  `valueSet = true` will break this loop, and\n      // sets the value of the property to undefined, until the code in `get()`\n      // finishes, at which point the property is set to the correct value.\n      valueSet = true;\n      setValue(get());\n    }\n    return value;\n  }\n  function setValue(newValue: T): void {\n    value = newValue;\n    valueSet = true;\n    Object.defineProperty(object, name, {\n      value: newValue,\n      configurable: true,\n      enumerable,\n      writable,\n    });\n  }\n\n  Object.defineProperty(object, name, {\n    get: getValue,\n    set: setValue,\n    configurable: true,\n    enumerable,\n  });\n}\n\nmodule.exports = defineLazyObjectProperty;\n"],"mappings":"AAUA;;AAKA,SAASA,wBAAT,CACEC,MADF,EAEEC,IAFF,EAGEC,UAHF,EASQ;EACN,IAAOC,GAAP,GAAcD,UAAd,CAAOC,GAAP;EACA,IAAMC,UAAU,GAAGF,UAAU,CAACE,UAAX,KAA0B,KAA7C;EACA,IAAMC,QAAQ,GAAGH,UAAU,CAACG,QAAX,KAAwB,KAAzC;EAEA,IAAIC,KAAJ;EACA,IAAIC,QAAQ,GAAG,KAAf;;EACA,SAASC,QAAT,GAAuB;IAIrB,IAAI,CAACD,QAAL,EAAe;MAMbA,QAAQ,GAAG,IAAX;MACAE,QAAQ,CAACN,GAAG,EAAJ,CAAR;IACD;;IACD,OAAOG,KAAP;EACD;;EACD,SAASG,QAAT,CAAkBC,QAAlB,EAAqC;IACnCJ,KAAK,GAAGI,QAAR;IACAH,QAAQ,GAAG,IAAX;IACAI,MAAM,CAACC,cAAP,CAAsBZ,MAAtB,EAA8BC,IAA9B,EAAoC;MAClCK,KAAK,EAAEI,QAD2B;MAElCG,YAAY,EAAE,IAFoB;MAGlCT,UAAU,EAAVA,UAHkC;MAIlCC,QAAQ,EAARA;IAJkC,CAApC;EAMD;;EAEDM,MAAM,CAACC,cAAP,CAAsBZ,MAAtB,EAA8BC,IAA9B,EAAoC;IAClCE,GAAG,EAAEK,QAD6B;IAElCM,GAAG,EAAEL,QAF6B;IAGlCI,YAAY,EAAE,IAHoB;IAIlCT,UAAU,EAAVA;EAJkC,CAApC;AAMD;;AAEDW,MAAM,CAACC,OAAP,GAAiBjB,wBAAjB"},"metadata":{},"sourceType":"script"}