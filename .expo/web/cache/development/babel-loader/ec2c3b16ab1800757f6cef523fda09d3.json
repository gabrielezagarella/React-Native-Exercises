{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nexport default function ModalStatusBarManager(_ref) {\n  var _flattenedStyle$trans, _flattenedStyle$trans2;\n\n  var dark = _ref.dark,\n      layout = _ref.layout,\n      insets = _ref.insets,\n      style = _ref.style;\n\n  var _useTheme = useTheme(),\n      darkTheme = _useTheme.dark;\n\n  var _React$useState = React.useState(true),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      overlapping = _React$useState2[0],\n      setOverlapping = _React$useState2[1];\n\n  var scale = 1 - 20 / layout.width;\n  var offset = (insets.top - 34) * scale;\n  var flattenedStyle = StyleSheet.flatten(style);\n  var translateY = flattenedStyle === null || flattenedStyle === void 0 ? void 0 : (_flattenedStyle$trans = flattenedStyle.transform) === null || _flattenedStyle$trans === void 0 ? void 0 : (_flattenedStyle$trans2 = _flattenedStyle$trans.find(function (s) {\n    return s.translateY !== undefined;\n  })) === null || _flattenedStyle$trans2 === void 0 ? void 0 : _flattenedStyle$trans2.translateY;\n  React.useEffect(function () {\n    var listener = function listener(_ref2) {\n      var value = _ref2.value;\n      setOverlapping(value < offset);\n    };\n\n    var sub = translateY === null || translateY === void 0 ? void 0 : translateY.addListener(listener);\n    return function () {\n      return translateY === null || translateY === void 0 ? void 0 : translateY.removeListener(sub);\n    };\n  }, [offset, translateY]);\n  var darkContent = dark != null ? dark : !darkTheme;\n  return React.createElement(StatusBar, {\n    animated: true,\n    barStyle: overlapping && darkContent ? 'dark-content' : 'light-content'\n  });\n}","map":{"version":3,"sources":["views/ModalStatusBarManager.tsx"],"names":["useTheme","React","ModalStatusBarManager","dark","layout","insets","style","darkTheme","overlapping","setOverlapping","useState","scale","width","offset","top","flattenedStyle","StyleSheet","flatten","translateY","transform","find","s","undefined","useEffect","listener","value","sub","addListener","removeListener","darkContent"],"mappings":";AAAA,SAASA,QAAT,QAAyB,0BAAzB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;;;AAaA,eAAe,SAASC,qBAAT,CAA8B,IAA9B,EAKL;EAAA,IAAA,qBAAA,EAAA,sBAAA;;EALoC,IAC5CC,IAD4C,GAKtC,IALsC,CAC5CA,IAD4C;EAAA,IAE5CC,MAF4C,GAKtC,IALsC,CAE5CA,MAF4C;EAAA,IAG5CC,MAH4C,GAKtC,IALsC,CAG5CA,MAH4C;EAAA,IAI5CC,KAJ4C,GAKtC,IALsC,CAI5CA,KAJ4C;;EAM5C,gBAA4BN,QAAQ,EAApC;EAAA,IAAcO,SAAd,aAAQJ,IAAR;;EACA,sBAAsCF,KAAK,CAACS,QAANT,CAAe,IAAfA,CAAtC;EAAA;EAAA,IAAOO,WAAP;EAAA,IAAoBC,cAApB;;EAEA,IAAME,KAAK,GAAG,IAAI,KAAKP,MAAM,CAACQ,KAA9B;EACA,IAAMC,MAAM,GAAG,CAACR,MAAM,CAACS,GAAPT,GAAa,EAAd,IAAoBM,KAAnC;EAEA,IAAMI,cAAc,GAAGC,UAAU,CAACC,OAAXD,CAAmBV,KAAnBU,CAAvB;EACA,IAAME,UAAU,GAAGH,cAAc,KAAA,IAAdA,IAAAA,cAAc,KAAA,KAAA,CAAdA,GAAc,KAAA,CAAdA,GAAc,CAAA,qBAAA,GAAdA,cAAc,CAAEI,SAAF,MAAW,IAAX,IAAW,qBAAA,KAAA,KAAA,CAAX,GAAW,KAAA,CAAX,GAAW,CAAA,sBAAA,GAAzBJ,qBAAAA,CAA2BK,IAA3BL,CAChBM,UAAAA,CAAM;IAAA,OAAKA,CAAC,CAACH,UAAFG,KAAiBC,SAAtB;EAAA,CADUP,CAAyB,MAE3C,IAF2C,IAE3C,sBAAA,KAAA,KAAA,CAF2C,GAE3C,KAAA,CAF2C,GAAzBA,sBAAAA,CAEhBG,UAFH;EAIAjB,KAAK,CAACsB,SAANtB,CAAgB,YAAM;IACpB,IAAMuB,QAAQ,GAAG,SAAXA,QAAW,CAAA,KAAA,EAAkC;MAAjC,IAAEC,KAAF,GAA4B,KAA5B,CAAEA,KAAF;MAChBhB,cAAc,CAACgB,KAAK,GAAGZ,MAAT,CAAdJ;IACD,CAFD;;IAIA,IAAMiB,GAAG,GAAGR,UAAU,KAAA,IAAVA,IAAAA,UAAU,KAAA,KAAA,CAAVA,GAAU,KAAA,CAAVA,GAAAA,UAAU,CAAES,WAAZT,CAAwBM,QAAxBN,CAAZ;IAEA,OAAO;MAAA,OAAMA,UAAU,KAAA,IAAVA,IAAAA,UAAU,KAAA,KAAA,CAAVA,GAAU,KAAA,CAAVA,GAAAA,UAAU,CAAEU,cAAZV,CAA2BQ,GAA3BR,CAAN;IAAA,CAAP;EACD,CARDjB,EAQG,CAACY,MAAD,EAASK,UAAT,CARHjB;EAUA,IAAM4B,WAAW,GAAG1B,IAAH,WAAGA,IAAH,GAAW,CAACI,SAA7B;EAEA,OACE,KAAA,CAAA,aAAA,CAAC,SAAD,EAAU;IACR,QAAQ,EAAA,IADA;IAER,QAAQ,EAAEC,WAAW,IAAIqB,WAAfrB,GAA6B,cAA7BA,GAA8C;EAFhD,CAAV,CADF;AAMF","sourceRoot":"../../../src","sourcesContent":["import { useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport { StatusBar, StyleSheet } from 'react-native';\nexport default function ModalStatusBarManager(_ref) {\n  var _flattenedStyle$trans, _flattenedStyle$trans2;\n  let {\n    dark,\n    layout,\n    insets,\n    style\n  } = _ref;\n  const {\n    dark: darkTheme\n  } = useTheme();\n  const [overlapping, setOverlapping] = React.useState(true);\n  const scale = 1 - 20 / layout.width;\n  const offset = (insets.top - 34) * scale;\n  const flattenedStyle = StyleSheet.flatten(style);\n  const translateY = flattenedStyle === null || flattenedStyle === void 0 ? void 0 : (_flattenedStyle$trans = flattenedStyle.transform) === null || _flattenedStyle$trans === void 0 ? void 0 : (_flattenedStyle$trans2 = _flattenedStyle$trans.find(s => s.translateY !== undefined)) === null || _flattenedStyle$trans2 === void 0 ? void 0 : _flattenedStyle$trans2.translateY;\n  React.useEffect(() => {\n    const listener = _ref2 => {\n      let {\n        value\n      } = _ref2;\n      setOverlapping(value < offset);\n    };\n    const sub = translateY === null || translateY === void 0 ? void 0 : translateY.addListener(listener);\n    return () => translateY === null || translateY === void 0 ? void 0 : translateY.removeListener(sub);\n  }, [offset, translateY]);\n  const darkContent = dark ?? !darkTheme;\n  return /*#__PURE__*/React.createElement(StatusBar, {\n    animated: true,\n    barStyle: overlapping && darkContent ? 'dark-content' : 'light-content'\n  });\n}\n//# sourceMappingURL=ModalStatusBarManager.js.map"]},"metadata":{},"sourceType":"module"}