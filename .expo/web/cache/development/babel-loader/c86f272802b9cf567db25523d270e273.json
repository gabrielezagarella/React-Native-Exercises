{"ast":null,"code":"'use strict';\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar invariant = require('invariant');\n\nvar ViewabilityHelper = function () {\n  function ViewabilityHelper() {\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      viewAreaCoveragePercentThreshold: 0\n    };\n\n    _classCallCheck(this, ViewabilityHelper);\n\n    this._hasInteracted = false;\n    this._timers = new Set();\n    this._viewableIndices = [];\n    this._viewableItems = new Map();\n    this._config = config;\n  }\n\n  _createClass(ViewabilityHelper, [{\n    key: \"dispose\",\n    value: function dispose() {\n      this._timers.forEach(clearTimeout);\n    }\n  }, {\n    key: \"computeViewableItems\",\n    value: function computeViewableItems(props, scrollOffset, viewportHeight, getFrameMetrics, renderRange) {\n      var itemCount = props.getItemCount(props.data);\n      var _this$_config = this._config,\n          itemVisiblePercentThreshold = _this$_config.itemVisiblePercentThreshold,\n          viewAreaCoveragePercentThreshold = _this$_config.viewAreaCoveragePercentThreshold;\n      var viewAreaMode = viewAreaCoveragePercentThreshold != null;\n      var viewablePercentThreshold = viewAreaMode ? viewAreaCoveragePercentThreshold : itemVisiblePercentThreshold;\n      invariant(viewablePercentThreshold != null && itemVisiblePercentThreshold != null !== (viewAreaCoveragePercentThreshold != null), 'Must set exactly one of itemVisiblePercentThreshold or viewAreaCoveragePercentThreshold');\n      var viewableIndices = [];\n\n      if (itemCount === 0) {\n        return viewableIndices;\n      }\n\n      var firstVisible = -1;\n\n      var _ref = renderRange || {\n        first: 0,\n        last: itemCount - 1\n      },\n          first = _ref.first,\n          last = _ref.last;\n\n      if (last >= itemCount) {\n        console.warn('Invalid render range computing viewability ' + JSON.stringify({\n          renderRange: renderRange,\n          itemCount: itemCount\n        }));\n        return [];\n      }\n\n      for (var idx = first; idx <= last; idx++) {\n        var metrics = getFrameMetrics(idx, props);\n\n        if (!metrics) {\n          continue;\n        }\n\n        var top = metrics.offset - scrollOffset;\n        var bottom = top + metrics.length;\n\n        if (top < viewportHeight && bottom > 0) {\n          firstVisible = idx;\n\n          if (_isViewable(viewAreaMode, viewablePercentThreshold, top, bottom, viewportHeight, metrics.length)) {\n            viewableIndices.push(idx);\n          }\n        } else if (firstVisible >= 0) {\n          break;\n        }\n      }\n\n      return viewableIndices;\n    }\n  }, {\n    key: \"onUpdate\",\n    value: function onUpdate(props, scrollOffset, viewportHeight, getFrameMetrics, createViewToken, onViewableItemsChanged, renderRange) {\n      var _this = this;\n\n      var itemCount = props.getItemCount(props.data);\n\n      if (this._config.waitForInteraction && !this._hasInteracted || itemCount === 0 || !getFrameMetrics(0, props)) {\n        return;\n      }\n\n      var viewableIndices = [];\n\n      if (itemCount) {\n        viewableIndices = this.computeViewableItems(props, scrollOffset, viewportHeight, getFrameMetrics, renderRange);\n      }\n\n      if (this._viewableIndices.length === viewableIndices.length && this._viewableIndices.every(function (v, ii) {\n        return v === viewableIndices[ii];\n      })) {\n        return;\n      }\n\n      this._viewableIndices = viewableIndices;\n\n      if (this._config.minimumViewTime) {\n        var handle = setTimeout(function () {\n          _this._timers.delete(handle);\n\n          _this._onUpdateSync(props, viewableIndices, onViewableItemsChanged, createViewToken);\n        }, this._config.minimumViewTime);\n\n        this._timers.add(handle);\n      } else {\n        this._onUpdateSync(props, viewableIndices, onViewableItemsChanged, createViewToken);\n      }\n    }\n  }, {\n    key: \"resetViewableIndices\",\n    value: function resetViewableIndices() {\n      this._viewableIndices = [];\n    }\n  }, {\n    key: \"recordInteraction\",\n    value: function recordInteraction() {\n      this._hasInteracted = true;\n    }\n  }, {\n    key: \"_onUpdateSync\",\n    value: function _onUpdateSync(props, viewableIndicesToCheck, onViewableItemsChanged, createViewToken) {\n      var _this2 = this;\n\n      viewableIndicesToCheck = viewableIndicesToCheck.filter(function (ii) {\n        return _this2._viewableIndices.includes(ii);\n      });\n      var prevItems = this._viewableItems;\n      var nextItems = new Map(viewableIndicesToCheck.map(function (ii) {\n        var viewable = createViewToken(ii, true, props);\n        return [viewable.key, viewable];\n      }));\n      var changed = [];\n\n      for (var _iterator = _createForOfIteratorHelperLoose(nextItems), _step; !(_step = _iterator()).done;) {\n        var _ref2 = _step.value;\n\n        var _ref3 = _slicedToArray(_ref2, 2);\n\n        var key = _ref3[0];\n        var viewable = _ref3[1];\n\n        if (!prevItems.has(key)) {\n          changed.push(viewable);\n        }\n      }\n\n      for (var _iterator2 = _createForOfIteratorHelperLoose(prevItems), _step2; !(_step2 = _iterator2()).done;) {\n        var _ref4 = _step2.value;\n\n        var _ref5 = _slicedToArray(_ref4, 2);\n\n        var _key = _ref5[0];\n        var _viewable = _ref5[1];\n\n        if (!nextItems.has(_key)) {\n          changed.push(_objectSpread(_objectSpread({}, _viewable), {}, {\n            isViewable: false\n          }));\n        }\n      }\n\n      if (changed.length > 0) {\n        this._viewableItems = nextItems;\n        onViewableItemsChanged({\n          viewableItems: Array.from(nextItems.values()),\n          changed: changed,\n          viewabilityConfig: this._config\n        });\n      }\n    }\n  }]);\n\n  return ViewabilityHelper;\n}();\n\nfunction _isViewable(viewAreaMode, viewablePercentThreshold, top, bottom, viewportHeight, itemLength) {\n  if (_isEntirelyVisible(top, bottom, viewportHeight)) {\n    return true;\n  } else {\n    var pixels = _getPixelsVisible(top, bottom, viewportHeight);\n\n    var percent = 100 * (viewAreaMode ? pixels / viewportHeight : pixels / itemLength);\n    return percent >= viewablePercentThreshold;\n  }\n}\n\nfunction _getPixelsVisible(top, bottom, viewportHeight) {\n  var visibleHeight = Math.min(bottom, viewportHeight) - Math.max(top, 0);\n  return Math.max(0, visibleHeight);\n}\n\nfunction _isEntirelyVisible(top, bottom, viewportHeight) {\n  return top >= 0 && bottom <= viewportHeight && bottom > top;\n}\n\nmodule.exports = ViewabilityHelper;","map":{"version":3,"names":["invariant","require","ViewabilityHelper","config","viewAreaCoveragePercentThreshold","_hasInteracted","_timers","Set","_viewableIndices","_viewableItems","Map","_config","forEach","clearTimeout","props","scrollOffset","viewportHeight","getFrameMetrics","renderRange","itemCount","getItemCount","data","itemVisiblePercentThreshold","viewAreaMode","viewablePercentThreshold","viewableIndices","firstVisible","first","last","console","warn","JSON","stringify","idx","metrics","top","offset","bottom","length","_isViewable","push","createViewToken","onViewableItemsChanged","waitForInteraction","computeViewableItems","every","v","ii","minimumViewTime","handle","setTimeout","delete","_onUpdateSync","add","viewableIndicesToCheck","filter","includes","prevItems","nextItems","map","viewable","key","changed","has","isViewable","viewableItems","Array","from","values","viewabilityConfig","itemLength","_isEntirelyVisible","pixels","_getPixelsVisible","percent","visibleHeight","Math","min","max","module","exports"],"sources":["/Users/zagarellagabriele/Desktop/Progetti/React Native/React-Native-Exercises/node_modules/react-native/Libraries/Lists/ViewabilityHelper.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nimport type {FrameMetricProps} from './VirtualizedListProps';\n\nconst invariant = require('invariant');\n\nexport type ViewToken = {\n  item: any,\n  key: string,\n  index: ?number,\n  isViewable: boolean,\n  section?: any,\n  ...\n};\n\nexport type ViewabilityConfigCallbackPair = {\n  viewabilityConfig: ViewabilityConfig,\n  onViewableItemsChanged: (info: {\n    viewableItems: Array<ViewToken>,\n    changed: Array<ViewToken>,\n    ...\n  }) => void,\n  ...\n};\n\nexport type ViewabilityConfig = {|\n  /**\n   * Minimum amount of time (in milliseconds) that an item must be physically viewable before the\n   * viewability callback will be fired. A high number means that scrolling through content without\n   * stopping will not mark the content as viewable.\n   */\n  minimumViewTime?: number,\n\n  /**\n   * Percent of viewport that must be covered for a partially occluded item to count as\n   * \"viewable\", 0-100. Fully visible items are always considered viewable. A value of 0 means\n   * that a single pixel in the viewport makes the item viewable, and a value of 100 means that\n   * an item must be either entirely visible or cover the entire viewport to count as viewable.\n   */\n  viewAreaCoveragePercentThreshold?: number,\n\n  /**\n   * Similar to `viewAreaPercentThreshold`, but considers the percent of the item that is visible,\n   * rather than the fraction of the viewable area it covers.\n   */\n  itemVisiblePercentThreshold?: number,\n\n  /**\n   * Nothing is considered viewable until the user scrolls or `recordInteraction` is called after\n   * render.\n   */\n  waitForInteraction?: boolean,\n|};\n\n/**\n * A Utility class for calculating viewable items based on current metrics like scroll position and\n * layout.\n *\n * An item is said to be in a \"viewable\" state when any of the following\n * is true for longer than `minimumViewTime` milliseconds (after an interaction if `waitForInteraction`\n * is true):\n *\n * - Occupying >= `viewAreaCoveragePercentThreshold` of the view area XOR fraction of the item\n *   visible in the view area >= `itemVisiblePercentThreshold`.\n * - Entirely visible on screen\n */\nclass ViewabilityHelper {\n  _config: ViewabilityConfig;\n  _hasInteracted: boolean = false;\n  _timers: Set<number> = new Set();\n  _viewableIndices: Array<number> = [];\n  _viewableItems: Map<string, ViewToken> = new Map();\n\n  constructor(\n    config: ViewabilityConfig = {viewAreaCoveragePercentThreshold: 0},\n  ) {\n    this._config = config;\n  }\n\n  /**\n   * Cleanup, e.g. on unmount. Clears any pending timers.\n   */\n  dispose() {\n    /* $FlowFixMe[incompatible-call] (>=0.63.0 site=react_native_fb) This\n     * comment suppresses an error found when Flow v0.63 was deployed. To see\n     * the error delete this comment and run Flow. */\n    this._timers.forEach(clearTimeout);\n  }\n\n  /**\n   * Determines which items are viewable based on the current metrics and config.\n   */\n  computeViewableItems(\n    props: FrameMetricProps,\n    scrollOffset: number,\n    viewportHeight: number,\n    getFrameMetrics: (\n      index: number,\n      props: FrameMetricProps,\n    ) => ?{\n      length: number,\n      offset: number,\n      ...\n    },\n    // Optional optimization to reduce the scan size\n    renderRange?: {\n      first: number,\n      last: number,\n      ...\n    },\n  ): Array<number> {\n    const itemCount = props.getItemCount(props.data);\n    const {itemVisiblePercentThreshold, viewAreaCoveragePercentThreshold} =\n      this._config;\n    const viewAreaMode = viewAreaCoveragePercentThreshold != null;\n    const viewablePercentThreshold = viewAreaMode\n      ? viewAreaCoveragePercentThreshold\n      : itemVisiblePercentThreshold;\n    invariant(\n      viewablePercentThreshold != null &&\n        (itemVisiblePercentThreshold != null) !==\n          (viewAreaCoveragePercentThreshold != null),\n      'Must set exactly one of itemVisiblePercentThreshold or viewAreaCoveragePercentThreshold',\n    );\n    const viewableIndices = [];\n    if (itemCount === 0) {\n      return viewableIndices;\n    }\n    let firstVisible = -1;\n    const {first, last} = renderRange || {first: 0, last: itemCount - 1};\n    if (last >= itemCount) {\n      console.warn(\n        'Invalid render range computing viewability ' +\n          JSON.stringify({renderRange, itemCount}),\n      );\n      return [];\n    }\n    for (let idx = first; idx <= last; idx++) {\n      const metrics = getFrameMetrics(idx, props);\n      if (!metrics) {\n        continue;\n      }\n      const top = metrics.offset - scrollOffset;\n      const bottom = top + metrics.length;\n      if (top < viewportHeight && bottom > 0) {\n        firstVisible = idx;\n        if (\n          _isViewable(\n            viewAreaMode,\n            viewablePercentThreshold,\n            top,\n            bottom,\n            viewportHeight,\n            metrics.length,\n          )\n        ) {\n          viewableIndices.push(idx);\n        }\n      } else if (firstVisible >= 0) {\n        break;\n      }\n    }\n    return viewableIndices;\n  }\n\n  /**\n   * Figures out which items are viewable and how that has changed from before and calls\n   * `onViewableItemsChanged` as appropriate.\n   */\n  onUpdate(\n    props: FrameMetricProps,\n    scrollOffset: number,\n    viewportHeight: number,\n    getFrameMetrics: (\n      index: number,\n      props: FrameMetricProps,\n    ) => ?{\n      length: number,\n      offset: number,\n      ...\n    },\n    createViewToken: (\n      index: number,\n      isViewable: boolean,\n      props: FrameMetricProps,\n    ) => ViewToken,\n    onViewableItemsChanged: ({\n      viewableItems: Array<ViewToken>,\n      changed: Array<ViewToken>,\n      ...\n    }) => void,\n    // Optional optimization to reduce the scan size\n    renderRange?: {\n      first: number,\n      last: number,\n      ...\n    },\n  ): void {\n    const itemCount = props.getItemCount(props.data);\n    if (\n      (this._config.waitForInteraction && !this._hasInteracted) ||\n      itemCount === 0 ||\n      !getFrameMetrics(0, props)\n    ) {\n      return;\n    }\n    let viewableIndices: Array<number> = [];\n    if (itemCount) {\n      viewableIndices = this.computeViewableItems(\n        props,\n        scrollOffset,\n        viewportHeight,\n        getFrameMetrics,\n        renderRange,\n      );\n    }\n    if (\n      this._viewableIndices.length === viewableIndices.length &&\n      this._viewableIndices.every((v, ii) => v === viewableIndices[ii])\n    ) {\n      // We might get a lot of scroll events where visibility doesn't change and we don't want to do\n      // extra work in those cases.\n      return;\n    }\n    this._viewableIndices = viewableIndices;\n    if (this._config.minimumViewTime) {\n      const handle: TimeoutID = setTimeout(() => {\n        /* $FlowFixMe[incompatible-call] (>=0.63.0 site=react_native_fb) This\n         * comment suppresses an error found when Flow v0.63 was deployed. To\n         * see the error delete this comment and run Flow. */\n        this._timers.delete(handle);\n        this._onUpdateSync(\n          props,\n          viewableIndices,\n          onViewableItemsChanged,\n          createViewToken,\n        );\n      }, this._config.minimumViewTime);\n      /* $FlowFixMe[incompatible-call] (>=0.63.0 site=react_native_fb) This\n       * comment suppresses an error found when Flow v0.63 was deployed. To see\n       * the error delete this comment and run Flow. */\n      this._timers.add(handle);\n    } else {\n      this._onUpdateSync(\n        props,\n        viewableIndices,\n        onViewableItemsChanged,\n        createViewToken,\n      );\n    }\n  }\n\n  /**\n   * clean-up cached _viewableIndices to evaluate changed items on next update\n   */\n  resetViewableIndices() {\n    this._viewableIndices = [];\n  }\n\n  /**\n   * Records that an interaction has happened even if there has been no scroll.\n   */\n  recordInteraction() {\n    this._hasInteracted = true;\n  }\n\n  _onUpdateSync(\n    props: FrameMetricProps,\n    viewableIndicesToCheck: Array<number>,\n    onViewableItemsChanged: ({\n      changed: Array<ViewToken>,\n      viewableItems: Array<ViewToken>,\n      ...\n    }) => void,\n    createViewToken: (\n      index: number,\n      isViewable: boolean,\n      props: FrameMetricProps,\n    ) => ViewToken,\n  ) {\n    // Filter out indices that have gone out of view since this call was scheduled.\n    viewableIndicesToCheck = viewableIndicesToCheck.filter(ii =>\n      this._viewableIndices.includes(ii),\n    );\n    const prevItems = this._viewableItems;\n    const nextItems = new Map(\n      viewableIndicesToCheck.map(ii => {\n        const viewable = createViewToken(ii, true, props);\n        return [viewable.key, viewable];\n      }),\n    );\n\n    const changed = [];\n    for (const [key, viewable] of nextItems) {\n      if (!prevItems.has(key)) {\n        changed.push(viewable);\n      }\n    }\n    for (const [key, viewable] of prevItems) {\n      if (!nextItems.has(key)) {\n        changed.push({...viewable, isViewable: false});\n      }\n    }\n    if (changed.length > 0) {\n      this._viewableItems = nextItems;\n      onViewableItemsChanged({\n        viewableItems: Array.from(nextItems.values()),\n        changed,\n        viewabilityConfig: this._config,\n      });\n    }\n  }\n}\n\nfunction _isViewable(\n  viewAreaMode: boolean,\n  viewablePercentThreshold: number,\n  top: number,\n  bottom: number,\n  viewportHeight: number,\n  itemLength: number,\n): boolean {\n  if (_isEntirelyVisible(top, bottom, viewportHeight)) {\n    return true;\n  } else {\n    const pixels = _getPixelsVisible(top, bottom, viewportHeight);\n    const percent =\n      100 * (viewAreaMode ? pixels / viewportHeight : pixels / itemLength);\n    return percent >= viewablePercentThreshold;\n  }\n}\n\nfunction _getPixelsVisible(\n  top: number,\n  bottom: number,\n  viewportHeight: number,\n): number {\n  const visibleHeight = Math.min(bottom, viewportHeight) - Math.max(top, 0);\n  return Math.max(0, visibleHeight);\n}\n\nfunction _isEntirelyVisible(\n  top: number,\n  bottom: number,\n  viewportHeight: number,\n): boolean {\n  return top >= 0 && bottom <= viewportHeight && bottom > top;\n}\n\nmodule.exports = ViewabilityHelper;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}