{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport RCTDeviceEventEmitter from \"../EventEmitter/RCTDeviceEventEmitter\";\nimport EventEmitter from \"../vendor/emitter/EventEmitter\";\nimport NativeDeviceInfo from \"./NativeDeviceInfo\";\nimport invariant from 'invariant';\nvar eventEmitter = new EventEmitter();\nvar dimensionsInitialized = false;\nvar dimensions;\n\nvar Dimensions = function () {\n  function Dimensions() {\n    _classCallCheck(this, Dimensions);\n  }\n\n  _createClass(Dimensions, null, [{\n    key: \"get\",\n    value: function get(dim) {\n      invariant(dimensions[dim], 'No dimension set for key ' + dim);\n      return dimensions[dim];\n    }\n  }, {\n    key: \"set\",\n    value: function set(dims) {\n      var screen = dims.screen,\n          window = dims.window;\n      var windowPhysicalPixels = dims.windowPhysicalPixels;\n\n      if (windowPhysicalPixels) {\n        window = {\n          width: windowPhysicalPixels.width / windowPhysicalPixels.scale,\n          height: windowPhysicalPixels.height / windowPhysicalPixels.scale,\n          scale: windowPhysicalPixels.scale,\n          fontScale: windowPhysicalPixels.fontScale\n        };\n      }\n\n      var screenPhysicalPixels = dims.screenPhysicalPixels;\n\n      if (screenPhysicalPixels) {\n        screen = {\n          width: screenPhysicalPixels.width / screenPhysicalPixels.scale,\n          height: screenPhysicalPixels.height / screenPhysicalPixels.scale,\n          scale: screenPhysicalPixels.scale,\n          fontScale: screenPhysicalPixels.fontScale\n        };\n      } else if (screen == null) {\n        screen = window;\n      }\n\n      dimensions = {\n        window: window,\n        screen: screen\n      };\n\n      if (dimensionsInitialized) {\n        eventEmitter.emit('change', dimensions);\n      } else {\n        dimensionsInitialized = true;\n      }\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(type, handler) {\n      invariant(type === 'change', 'Trying to subscribe to unknown event: \"%s\"', type);\n      return eventEmitter.addListener(type, handler);\n    }\n  }]);\n\n  return Dimensions;\n}();\n\nvar initialDims = global.nativeExtensions && global.nativeExtensions.DeviceInfo && global.nativeExtensions.DeviceInfo.Dimensions;\n\nif (!initialDims) {\n  RCTDeviceEventEmitter.addListener('didUpdateDimensions', function (update) {\n    Dimensions.set(update);\n  });\n  initialDims = NativeDeviceInfo.getConstants().Dimensions;\n}\n\nDimensions.set(initialDims);\nmodule.exports = Dimensions;","map":{"version":3,"names":["RCTDeviceEventEmitter","EventEmitter","NativeDeviceInfo","invariant","eventEmitter","dimensionsInitialized","dimensions","Dimensions","dim","dims","screen","window","windowPhysicalPixels","width","scale","height","fontScale","screenPhysicalPixels","emit","type","handler","addListener","initialDims","global","nativeExtensions","DeviceInfo","update","set","getConstants","module","exports"],"sources":["/Users/zagarellagabriele/Desktop/Progetti/React Native/React-Native-Exercises/node_modules/react-native/Libraries/Utilities/Dimensions.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\nimport RCTDeviceEventEmitter from '../EventEmitter/RCTDeviceEventEmitter';\nimport EventEmitter, {\n  type EventSubscription,\n} from '../vendor/emitter/EventEmitter';\nimport NativeDeviceInfo, {\n  type DimensionsPayload,\n  type DisplayMetrics,\n  type DisplayMetricsAndroid,\n} from './NativeDeviceInfo';\nimport invariant from 'invariant';\n\nconst eventEmitter = new EventEmitter<{\n  change: [DimensionsPayload],\n}>();\nlet dimensionsInitialized = false;\nlet dimensions: DimensionsPayload;\n\nclass Dimensions {\n  /**\n   * NOTE: `useWindowDimensions` is the preferred API for React components.\n   *\n   * Initial dimensions are set before `runApplication` is called so they should\n   * be available before any other require's are run, but may be updated later.\n   *\n   * Note: Although dimensions are available immediately, they may change (e.g\n   * due to device rotation) so any rendering logic or styles that depend on\n   * these constants should try to call this function on every render, rather\n   * than caching the value (for example, using inline styles rather than\n   * setting a value in a `StyleSheet`).\n   *\n   * Example: `const {height, width} = Dimensions.get('window');`\n   *\n   * @param {string} dim Name of dimension as defined when calling `set`.\n   * @returns {DisplayMetrics? | DisplayMetricsAndroid?} Value for the dimension.\n   */\n  static get(dim: string): DisplayMetrics | DisplayMetricsAndroid {\n    invariant(dimensions[dim], 'No dimension set for key ' + dim);\n    return dimensions[dim];\n  }\n\n  /**\n   * This should only be called from native code by sending the\n   * didUpdateDimensions event.\n   *\n   * @param {DimensionsPayload} dims Simple string-keyed object of dimensions to set\n   */\n  static set(dims: $ReadOnly<DimensionsPayload>): void {\n    // We calculate the window dimensions in JS so that we don't encounter loss of\n    // precision in transferring the dimensions (which could be non-integers) over\n    // the bridge.\n    let {screen, window} = dims;\n    const {windowPhysicalPixels} = dims;\n    if (windowPhysicalPixels) {\n      window = {\n        width: windowPhysicalPixels.width / windowPhysicalPixels.scale,\n        height: windowPhysicalPixels.height / windowPhysicalPixels.scale,\n        scale: windowPhysicalPixels.scale,\n        fontScale: windowPhysicalPixels.fontScale,\n      };\n    }\n    const {screenPhysicalPixels} = dims;\n    if (screenPhysicalPixels) {\n      screen = {\n        width: screenPhysicalPixels.width / screenPhysicalPixels.scale,\n        height: screenPhysicalPixels.height / screenPhysicalPixels.scale,\n        scale: screenPhysicalPixels.scale,\n        fontScale: screenPhysicalPixels.fontScale,\n      };\n    } else if (screen == null) {\n      screen = window;\n    }\n\n    dimensions = {window, screen};\n    if (dimensionsInitialized) {\n      // Don't fire 'change' the first time the dimensions are set.\n      eventEmitter.emit('change', dimensions);\n    } else {\n      dimensionsInitialized = true;\n    }\n  }\n\n  /**\n   * Add an event handler. Supported events:\n   *\n   * - `change`: Fires when a property within the `Dimensions` object changes. The argument\n   *   to the event handler is an object with `window` and `screen` properties whose values\n   *   are the same as the return values of `Dimensions.get('window')` and\n   *   `Dimensions.get('screen')`, respectively.\n   */\n  static addEventListener(\n    type: 'change',\n    handler: Function,\n  ): EventSubscription {\n    invariant(\n      type === 'change',\n      'Trying to subscribe to unknown event: \"%s\"',\n      type,\n    );\n    return eventEmitter.addListener(type, handler);\n  }\n}\n\nlet initialDims: ?$ReadOnly<DimensionsPayload> =\n  global.nativeExtensions &&\n  global.nativeExtensions.DeviceInfo &&\n  global.nativeExtensions.DeviceInfo.Dimensions;\nif (!initialDims) {\n  // Subscribe before calling getConstants to make sure we don't miss any updates in between.\n  RCTDeviceEventEmitter.addListener(\n    'didUpdateDimensions',\n    (update: DimensionsPayload) => {\n      Dimensions.set(update);\n    },\n  );\n  initialDims = NativeDeviceInfo.getConstants().Dimensions;\n}\n\nDimensions.set(initialDims);\n\nmodule.exports = Dimensions;\n"],"mappings":";;AAUA,OAAOA,qBAAP;AACA,OAAOC,YAAP;AAGA,OAAOC,gBAAP;AAKA,OAAOC,SAAP,MAAsB,WAAtB;AAEA,IAAMC,YAAY,GAAG,IAAIH,YAAJ,EAArB;AAGA,IAAII,qBAAqB,GAAG,KAA5B;AACA,IAAIC,UAAJ;;IAEMC,U;;;;;;;WAkBJ,aAAWC,GAAX,EAAgE;MAC9DL,SAAS,CAACG,UAAU,CAACE,GAAD,CAAX,EAAkB,8BAA8BA,GAAhD,CAAT;MACA,OAAOF,UAAU,CAACE,GAAD,CAAjB;IACD;;;WAQD,aAAWC,IAAX,EAAqD;MAInD,IAAKC,MAAL,GAAuBD,IAAvB,CAAKC,MAAL;MAAA,IAAaC,MAAb,GAAuBF,IAAvB,CAAaE,MAAb;MACA,IAAOC,oBAAP,GAA+BH,IAA/B,CAAOG,oBAAP;;MACA,IAAIA,oBAAJ,EAA0B;QACxBD,MAAM,GAAG;UACPE,KAAK,EAAED,oBAAoB,CAACC,KAArB,GAA6BD,oBAAoB,CAACE,KADlD;UAEPC,MAAM,EAAEH,oBAAoB,CAACG,MAArB,GAA8BH,oBAAoB,CAACE,KAFpD;UAGPA,KAAK,EAAEF,oBAAoB,CAACE,KAHrB;UAIPE,SAAS,EAAEJ,oBAAoB,CAACI;QAJzB,CAAT;MAMD;;MACD,IAAOC,oBAAP,GAA+BR,IAA/B,CAAOQ,oBAAP;;MACA,IAAIA,oBAAJ,EAA0B;QACxBP,MAAM,GAAG;UACPG,KAAK,EAAEI,oBAAoB,CAACJ,KAArB,GAA6BI,oBAAoB,CAACH,KADlD;UAEPC,MAAM,EAAEE,oBAAoB,CAACF,MAArB,GAA8BE,oBAAoB,CAACH,KAFpD;UAGPA,KAAK,EAAEG,oBAAoB,CAACH,KAHrB;UAIPE,SAAS,EAAEC,oBAAoB,CAACD;QAJzB,CAAT;MAMD,CAPD,MAOO,IAAIN,MAAM,IAAI,IAAd,EAAoB;QACzBA,MAAM,GAAGC,MAAT;MACD;;MAEDL,UAAU,GAAG;QAACK,MAAM,EAANA,MAAD;QAASD,MAAM,EAANA;MAAT,CAAb;;MACA,IAAIL,qBAAJ,EAA2B;QAEzBD,YAAY,CAACc,IAAb,CAAkB,QAAlB,EAA4BZ,UAA5B;MACD,CAHD,MAGO;QACLD,qBAAqB,GAAG,IAAxB;MACD;IACF;;;WAUD,0BACEc,IADF,EAEEC,OAFF,EAGqB;MACnBjB,SAAS,CACPgB,IAAI,KAAK,QADF,EAEP,4CAFO,EAGPA,IAHO,CAAT;MAKA,OAAOf,YAAY,CAACiB,WAAb,CAAyBF,IAAzB,EAA+BC,OAA/B,CAAP;IACD;;;;;;AAGH,IAAIE,WAA0C,GAC5CC,MAAM,CAACC,gBAAP,IACAD,MAAM,CAACC,gBAAP,CAAwBC,UADxB,IAEAF,MAAM,CAACC,gBAAP,CAAwBC,UAAxB,CAAmClB,UAHrC;;AAIA,IAAI,CAACe,WAAL,EAAkB;EAEhBtB,qBAAqB,CAACqB,WAAtB,CACE,qBADF,EAEE,UAACK,MAAD,EAA+B;IAC7BnB,UAAU,CAACoB,GAAX,CAAeD,MAAf;EACD,CAJH;EAMAJ,WAAW,GAAGpB,gBAAgB,CAAC0B,YAAjB,GAAgCrB,UAA9C;AACD;;AAEDA,UAAU,CAACoB,GAAX,CAAeL,WAAf;AAEAO,MAAM,CAACC,OAAP,GAAiBvB,UAAjB"},"metadata":{},"sourceType":"module"}