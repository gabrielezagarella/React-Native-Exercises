{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"tintColor\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nimport { PlatformPressable } from '@react-navigation/elements';\nimport { DrawerActions, useNavigation } from '@react-navigation/native';\nimport * as React from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nexport default function DrawerToggleButton(_ref) {\n  var tintColor = _ref.tintColor,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var navigation = useNavigation();\n  return React.createElement(PlatformPressable, _extends({}, rest, {\n    accessible: true,\n    accessibilityRole: \"button\",\n    android_ripple: {\n      borderless: true\n    },\n    onPress: function onPress() {\n      return navigation.dispatch(DrawerActions.toggleDrawer());\n    },\n    style: styles.touchable,\n    hitSlop: Platform.select({\n      ios: undefined,\n      default: {\n        top: 16,\n        right: 16,\n        bottom: 16,\n        left: 16\n      }\n    })\n  }), React.createElement(Image, {\n    style: [styles.icon, tintColor ? {\n      tintColor: tintColor\n    } : null],\n    source: require(\"./assets/toggle-drawer-icon.png\"),\n    fadeDuration: 0\n  }));\n}\nvar styles = StyleSheet.create({\n  icon: {\n    height: 24,\n    width: 24,\n    margin: 3,\n    resizeMode: 'contain'\n  },\n  touchable: {\n    marginHorizontal: 11\n  }\n});","map":{"version":3,"sources":["views/DrawerToggleButton.tsx"],"names":["PlatformPressable","DrawerActions","useNavigation","React","DrawerToggleButton","tintColor","rest","navigation","borderless","dispatch","toggleDrawer","styles","touchable","Platform","select","ios","undefined","default","top","right","bottom","left","icon","require","StyleSheet","create","height","width","margin","resizeMode","marginHorizontal"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,SAASA,iBAAT,QAAkC,4BAAlC;AACA,SACEC,aADF,EAGEC,aAHF,QAIO,0BAJP;AAKA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;;;;AAYA,eAAe,SAASC,kBAAT,CAA2B,IAA3B,EAA2D;EAA/B,IAAEC,SAAF,GAA6B,IAA7B,CAAEA,SAAF;EAAA,IAAgBC,IAAhB,4BAA6B,IAA7B;;EACzC,IAAMC,UAAU,GAAGL,aAAa,EAAhC;EAEA,OACE,KAAA,CAAA,aAAA,CAAC,iBAAD,EAAkB,QAAA,CAAA,EAAA,EACZI,IADY,EACR;IACR,UAAU,EAAA,IADF;IAER,iBAAiB,EAAC,QAFV;IAGR,cAAc,EAAE;MAAEE,UAAU,EAAE;IAAd,CAHR;IAIR,OAAO,EAAE;MAAA,OAAMD,UAAU,CAACE,QAAXF,CAAoBN,aAAa,CAACS,YAAdT,EAApBM,CAAN;IAAA,CAJD;IAKR,KAAK,EAAEI,MAAM,CAACC,SALN;IAMR,OAAO,EAAEC,QAAQ,CAACC,MAATD,CAAgB;MACvBE,GAAG,EAAEC,SADkB;MAEvBC,OAAO,EAAE;QAAEC,GAAG,EAAE,EAAP;QAAWC,KAAK,EAAE,EAAlB;QAAsBC,MAAM,EAAE,EAA9B;QAAkCC,IAAI,EAAE;MAAxC;IAFc,CAAhBR;EAND,CADQ,CAAlB,EAYE,KAAA,CAAA,aAAA,CAAC,KAAD,EAAM;IACJ,KAAK,EAAE,CAACF,MAAM,CAACW,IAAR,EAAcjB,SAAS,GAAG;MAAEA,SAAAA,EAAAA;IAAF,CAAH,GAAmB,IAA1C,CADH;IAEJ,MAAM,EAAEkB,OAAO,mCAFX;IAGJ,YAAY,EAAE;EAHV,CAAN,CAZF,CADF;AAoBF;AAEA,IAAMZ,MAAM,GAAGa,UAAU,CAACC,MAAXD,CAAkB;EAC/BF,IAAI,EAAE;IACJI,MAAM,EAAE,EADJ;IAEJC,KAAK,EAAE,EAFH;IAGJC,MAAM,EAAE,CAHJ;IAIJC,UAAU,EAAE;EAJR,CADyB;EAO/BjB,SAAS,EAAE;IACTkB,gBAAgB,EAAE;EADT;AAPoB,CAAlBN,CAAf","sourceRoot":"../../../src","sourcesContent":["function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport { PlatformPressable } from '@react-navigation/elements';\nimport { DrawerActions, useNavigation } from '@react-navigation/native';\nimport * as React from 'react';\nimport { Image, Platform, StyleSheet } from 'react-native';\nexport default function DrawerToggleButton(_ref) {\n  let {\n    tintColor,\n    ...rest\n  } = _ref;\n  const navigation = useNavigation();\n  return /*#__PURE__*/React.createElement(PlatformPressable, _extends({}, rest, {\n    accessible: true,\n    accessibilityRole: \"button\",\n    android_ripple: {\n      borderless: true\n    },\n    onPress: () => navigation.dispatch(DrawerActions.toggleDrawer()),\n    style: styles.touchable,\n    hitSlop: Platform.select({\n      ios: undefined,\n      default: {\n        top: 16,\n        right: 16,\n        bottom: 16,\n        left: 16\n      }\n    })\n  }), /*#__PURE__*/React.createElement(Image, {\n    style: [styles.icon, tintColor ? {\n      tintColor\n    } : null],\n    source: require('./assets/toggle-drawer-icon.png'),\n    fadeDuration: 0\n  }));\n}\nconst styles = StyleSheet.create({\n  icon: {\n    height: 24,\n    width: 24,\n    margin: 3,\n    resizeMode: 'contain'\n  },\n  touchable: {\n    marginHorizontal: 11\n  }\n});\n//# sourceMappingURL=DrawerToggleButton.js.map"]},"metadata":{},"sourceType":"module"}