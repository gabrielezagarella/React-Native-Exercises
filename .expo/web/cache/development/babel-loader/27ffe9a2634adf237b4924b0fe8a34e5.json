{"ast":null,"code":"'use strict';\n\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { findNodeHandle } from \"../../ReactNative/RendererProxy\";\nimport { AnimatedEvent } from \"../AnimatedEvent\";\nimport NativeAnimatedHelper from \"../NativeAnimatedHelper\";\nimport AnimatedNode from \"./AnimatedNode\";\nimport AnimatedStyle from \"./AnimatedStyle\";\nimport invariant from 'invariant';\n\nvar AnimatedProps = function (_AnimatedNode) {\n  _inherits(AnimatedProps, _AnimatedNode);\n\n  var _super = _createSuper(AnimatedProps);\n\n  function AnimatedProps(props, callback) {\n    var _this;\n\n    _classCallCheck(this, AnimatedProps);\n\n    _this = _super.call(this);\n\n    if (props.style) {\n      props = _objectSpread(_objectSpread({}, props), {}, {\n        style: new AnimatedStyle(props.style)\n      });\n    }\n\n    _this._props = props;\n    _this._callback = callback;\n    return _this;\n  }\n\n  _createClass(AnimatedProps, [{\n    key: \"__getValue\",\n    value: function __getValue() {\n      var props = {};\n\n      for (var key in this._props) {\n        var value = this._props[key];\n\n        if (value instanceof AnimatedNode) {\n          props[key] = value.__getValue();\n        } else if (value instanceof AnimatedEvent) {\n          props[key] = value.__getHandler();\n        } else {\n          props[key] = value;\n        }\n      }\n\n      return props;\n    }\n  }, {\n    key: \"__getAnimatedValue\",\n    value: function __getAnimatedValue() {\n      var props = {};\n\n      for (var key in this._props) {\n        var value = this._props[key];\n\n        if (value instanceof AnimatedNode) {\n          props[key] = value.__getAnimatedValue();\n        }\n      }\n\n      return props;\n    }\n  }, {\n    key: \"__attach\",\n    value: function __attach() {\n      for (var key in this._props) {\n        var value = this._props[key];\n\n        if (value instanceof AnimatedNode) {\n          value.__addChild(this);\n        }\n      }\n    }\n  }, {\n    key: \"__detach\",\n    value: function __detach() {\n      if (this.__isNative && this._animatedView) {\n        this.__disconnectAnimatedView();\n      }\n\n      for (var key in this._props) {\n        var value = this._props[key];\n\n        if (value instanceof AnimatedNode) {\n          value.__removeChild(this);\n        }\n      }\n\n      _get(_getPrototypeOf(AnimatedProps.prototype), \"__detach\", this).call(this);\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      this._callback();\n    }\n  }, {\n    key: \"__makeNative\",\n    value: function __makeNative(platformConfig) {\n      if (!this.__isNative) {\n        this.__isNative = true;\n\n        for (var key in this._props) {\n          var value = this._props[key];\n\n          if (value instanceof AnimatedNode) {\n            value.__makeNative(platformConfig);\n          }\n        }\n\n        _get(_getPrototypeOf(AnimatedProps.prototype), \"__setPlatformConfig\", this).call(this, platformConfig);\n\n        if (this._animatedView) {\n          this.__connectAnimatedView();\n        }\n      }\n    }\n  }, {\n    key: \"setNativeView\",\n    value: function setNativeView(animatedView) {\n      if (this._animatedView === animatedView) {\n        return;\n      }\n\n      this._animatedView = animatedView;\n\n      if (this.__isNative) {\n        this.__connectAnimatedView();\n      }\n    }\n  }, {\n    key: \"__connectAnimatedView\",\n    value: function __connectAnimatedView() {\n      invariant(this.__isNative, 'Expected node to be marked as \"native\"');\n      var nativeViewTag = findNodeHandle(this._animatedView);\n      invariant(nativeViewTag != null, 'Unable to locate attached view in the native tree');\n      NativeAnimatedHelper.API.connectAnimatedNodeToView(this.__getNativeTag(), nativeViewTag);\n    }\n  }, {\n    key: \"__disconnectAnimatedView\",\n    value: function __disconnectAnimatedView() {\n      invariant(this.__isNative, 'Expected node to be marked as \"native\"');\n      var nativeViewTag = findNodeHandle(this._animatedView);\n      invariant(nativeViewTag != null, 'Unable to locate attached view in the native tree');\n      NativeAnimatedHelper.API.disconnectAnimatedNodeFromView(this.__getNativeTag(), nativeViewTag);\n    }\n  }, {\n    key: \"__restoreDefaultValues\",\n    value: function __restoreDefaultValues() {\n      if (this.__isNative) {\n        NativeAnimatedHelper.API.restoreDefaultValues(this.__getNativeTag());\n      }\n    }\n  }, {\n    key: \"__getNativeConfig\",\n    value: function __getNativeConfig() {\n      var propsConfig = {};\n\n      for (var propKey in this._props) {\n        var value = this._props[propKey];\n\n        if (value instanceof AnimatedNode) {\n          value.__makeNative(this.__getPlatformConfig());\n\n          propsConfig[propKey] = value.__getNativeTag();\n        }\n      }\n\n      return {\n        type: 'props',\n        props: propsConfig\n      };\n    }\n  }]);\n\n  return AnimatedProps;\n}(AnimatedNode);\n\nexport { AnimatedProps as default };","map":{"version":3,"names":["findNodeHandle","AnimatedEvent","NativeAnimatedHelper","AnimatedNode","AnimatedStyle","invariant","AnimatedProps","props","callback","style","_props","_callback","key","value","__getValue","__getHandler","__getAnimatedValue","__addChild","__isNative","_animatedView","__disconnectAnimatedView","__removeChild","platformConfig","__makeNative","__connectAnimatedView","animatedView","nativeViewTag","API","connectAnimatedNodeToView","__getNativeTag","disconnectAnimatedNodeFromView","restoreDefaultValues","propsConfig","propKey","__getPlatformConfig","type"],"sources":["/Users/zagarellagabriele/Desktop/Progetti/React Native/React-Native-Exercises/node_modules/react-native/Libraries/Animated/nodes/AnimatedProps.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nimport type {PlatformConfig} from '../AnimatedPlatformConfig';\n\nimport {findNodeHandle} from '../../ReactNative/RendererProxy';\nimport {AnimatedEvent} from '../AnimatedEvent';\nimport NativeAnimatedHelper from '../NativeAnimatedHelper';\nimport AnimatedNode from './AnimatedNode';\nimport AnimatedStyle from './AnimatedStyle';\nimport invariant from 'invariant';\n\nexport default class AnimatedProps extends AnimatedNode {\n  _props: Object;\n  _animatedView: any;\n  _callback: () => void;\n\n  constructor(props: Object, callback: () => void) {\n    super();\n    if (props.style) {\n      props = {\n        ...props,\n        style: new AnimatedStyle(props.style),\n      };\n    }\n    this._props = props;\n    this._callback = callback;\n  }\n\n  __getValue(): Object {\n    const props: {[string]: any | ((...args: any) => void)} = {};\n    for (const key in this._props) {\n      const value = this._props[key];\n      if (value instanceof AnimatedNode) {\n        props[key] = value.__getValue();\n      } else if (value instanceof AnimatedEvent) {\n        props[key] = value.__getHandler();\n      } else {\n        props[key] = value;\n      }\n    }\n\n    return props;\n  }\n\n  __getAnimatedValue(): Object {\n    const props: {[string]: any} = {};\n    for (const key in this._props) {\n      const value = this._props[key];\n      if (value instanceof AnimatedNode) {\n        props[key] = value.__getAnimatedValue();\n      }\n    }\n    return props;\n  }\n\n  __attach(): void {\n    for (const key in this._props) {\n      const value = this._props[key];\n      if (value instanceof AnimatedNode) {\n        value.__addChild(this);\n      }\n    }\n  }\n\n  __detach(): void {\n    if (this.__isNative && this._animatedView) {\n      this.__disconnectAnimatedView();\n    }\n    for (const key in this._props) {\n      const value = this._props[key];\n      if (value instanceof AnimatedNode) {\n        value.__removeChild(this);\n      }\n    }\n    super.__detach();\n  }\n\n  update(): void {\n    this._callback();\n  }\n\n  __makeNative(platformConfig: ?PlatformConfig): void {\n    if (!this.__isNative) {\n      this.__isNative = true;\n      for (const key in this._props) {\n        const value = this._props[key];\n        if (value instanceof AnimatedNode) {\n          value.__makeNative(platformConfig);\n        }\n      }\n\n      // Since this does not call the super.__makeNative, we need to store the\n      // supplied platformConfig here, before calling __connectAnimatedView\n      // where it will be needed to traverse the graph of attached values.\n      super.__setPlatformConfig(platformConfig);\n\n      if (this._animatedView) {\n        this.__connectAnimatedView();\n      }\n    }\n  }\n\n  setNativeView(animatedView: any): void {\n    if (this._animatedView === animatedView) {\n      return;\n    }\n    this._animatedView = animatedView;\n    if (this.__isNative) {\n      this.__connectAnimatedView();\n    }\n  }\n\n  __connectAnimatedView(): void {\n    invariant(this.__isNative, 'Expected node to be marked as \"native\"');\n    const nativeViewTag: ?number = findNodeHandle(this._animatedView);\n    invariant(\n      nativeViewTag != null,\n      'Unable to locate attached view in the native tree',\n    );\n    NativeAnimatedHelper.API.connectAnimatedNodeToView(\n      this.__getNativeTag(),\n      nativeViewTag,\n    );\n  }\n\n  __disconnectAnimatedView(): void {\n    invariant(this.__isNative, 'Expected node to be marked as \"native\"');\n    const nativeViewTag: ?number = findNodeHandle(this._animatedView);\n    invariant(\n      nativeViewTag != null,\n      'Unable to locate attached view in the native tree',\n    );\n    NativeAnimatedHelper.API.disconnectAnimatedNodeFromView(\n      this.__getNativeTag(),\n      nativeViewTag,\n    );\n  }\n\n  __restoreDefaultValues(): void {\n    // When using the native driver, view properties need to be restored to\n    // their default values manually since react no longer tracks them. This\n    // is needed to handle cases where a prop driven by native animated is removed\n    // after having been changed natively by an animation.\n    if (this.__isNative) {\n      NativeAnimatedHelper.API.restoreDefaultValues(this.__getNativeTag());\n    }\n  }\n\n  __getNativeConfig(): Object {\n    const propsConfig: {[string]: number} = {};\n    for (const propKey in this._props) {\n      const value = this._props[propKey];\n      if (value instanceof AnimatedNode) {\n        value.__makeNative(this.__getPlatformConfig());\n        propsConfig[propKey] = value.__getNativeTag();\n      }\n    }\n    return {\n      type: 'props',\n      props: propsConfig,\n    };\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}