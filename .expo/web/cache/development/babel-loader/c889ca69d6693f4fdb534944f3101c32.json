{"ast":null,"code":"export default function memoize(callback) {\n  var previous;\n  var result;\n  return function () {\n    var hasChanged = false;\n\n    for (var _len = arguments.length, dependencies = new Array(_len), _key = 0; _key < _len; _key++) {\n      dependencies[_key] = arguments[_key];\n    }\n\n    if (previous) {\n      if (previous.length !== dependencies.length) {\n        hasChanged = true;\n      } else {\n        for (var i = 0; i < previous.length; i++) {\n          if (previous[i] !== dependencies[i]) {\n            hasChanged = true;\n            break;\n          }\n        }\n      }\n    } else {\n      hasChanged = true;\n    }\n\n    previous = dependencies;\n\n    if (hasChanged || result === undefined) {\n      result = callback.apply(void 0, dependencies);\n    }\n\n    return result;\n  };\n}","map":{"version":3,"sources":["utils/memoize.tsx"],"names":["memoize","callback","previous","result","dependencies","hasChanged","length","i","undefined"],"mappings":"AAAA,eAAe,SAASA,OAAT,CACbC,QADa,EAEb;EACA,IAAIC,QAAJ;EACA,IAAIC,MAAJ;EAEA,OAAO,YAAmC;IACxC,IAAIE,UAAU,GAAG,KAAjB;;IAAuB,KAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EADdD,YAAY,GAAA,IAAA,KAAA,CAAA,IAAA,CACE,EADF,IAAA,GAAA,CACE,EADF,IAAA,GAAA,IACE,EADF,IAAA,EACE,EADF;MAAZA,YAAY,CAAA,IAAA,CAAZA,GAAY,SAAA,CAAA,IAAA,CAAZA;IAAY;;IAGrB,IAAIF,QAAJ,EAAc;MACZ,IAAIA,QAAQ,CAACI,MAATJ,KAAoBE,YAAY,CAACE,MAArC,EAA6C;QAC3CD,UAAU,GAAG,IAAbA;MACD,CAFD,MAEO;QACL,KAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,QAAQ,CAACI,MAA7B,EAAqCC,CAAC,EAAtC,EAA0C;UACxC,IAAIL,QAAQ,CAACK,CAAD,CAARL,KAAgBE,YAAY,CAACG,CAAD,CAAhC,EAAqC;YACnCF,UAAU,GAAG,IAAbA;YACA;UACF;QACF;MACF;IACD,CAXD,MAWO;MACLA,UAAU,GAAG,IAAbA;IACF;;IAEAH,QAAQ,GAAGE,YAAXF;;IAEA,IAAIG,UAAU,IAAIF,MAAM,KAAKK,SAA7B,EAAwC;MACtCL,MAAM,GAAGF,QAAQ,MAARA,SAAYG,YAAZH,CAATE;IACF;;IAEA,OAAOA,MAAP;EACD,CAzBD;AA0BF","sourceRoot":"../../../src","sourcesContent":["export default function memoize(callback) {\n  let previous;\n  let result;\n  return function () {\n    let hasChanged = false;\n    for (var _len = arguments.length, dependencies = new Array(_len), _key = 0; _key < _len; _key++) {\n      dependencies[_key] = arguments[_key];\n    }\n    if (previous) {\n      if (previous.length !== dependencies.length) {\n        hasChanged = true;\n      } else {\n        for (let i = 0; i < previous.length; i++) {\n          if (previous[i] !== dependencies[i]) {\n            hasChanged = true;\n            break;\n          }\n        }\n      }\n    } else {\n      hasChanged = true;\n    }\n    previous = dependencies;\n    if (hasChanged || result === undefined) {\n      result = callback(...dependencies);\n    }\n    return result;\n  };\n}\n//# sourceMappingURL=memoize.js.map"]},"metadata":{},"sourceType":"module"}