{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport invariant from 'invariant';\n\nvar ChildListCollection = function () {\n  function ChildListCollection() {\n    _classCallCheck(this, ChildListCollection);\n\n    this._cellKeyToChildren = new Map();\n    this._childrenToCellKey = new Map();\n  }\n\n  _createClass(ChildListCollection, [{\n    key: \"add\",\n    value: function add(list, cellKey) {\n      var _this$_cellKeyToChild;\n\n      invariant(!this._childrenToCellKey.has(list), 'Trying to add already present child list');\n      var cellLists = (_this$_cellKeyToChild = this._cellKeyToChildren.get(cellKey)) != null ? _this$_cellKeyToChild : new Set();\n      cellLists.add(list);\n\n      this._cellKeyToChildren.set(cellKey, cellLists);\n\n      this._childrenToCellKey.set(list, cellKey);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(list) {\n      var cellKey = this._childrenToCellKey.get(list);\n\n      invariant(cellKey != null, 'Trying to remove non-present child list');\n\n      this._childrenToCellKey.delete(list);\n\n      var cellLists = this._cellKeyToChildren.get(cellKey);\n\n      invariant(cellLists, '_cellKeyToChildren should contain cellKey');\n      cellLists.delete(list);\n\n      if (cellLists.size === 0) {\n        this._cellKeyToChildren.delete(cellKey);\n      }\n    }\n  }, {\n    key: \"forEach\",\n    value: function forEach(fn) {\n      for (var _iterator = _createForOfIteratorHelperLoose(this._cellKeyToChildren.values()), _step; !(_step = _iterator()).done;) {\n        var listSet = _step.value;\n\n        for (var _iterator2 = _createForOfIteratorHelperLoose(listSet), _step2; !(_step2 = _iterator2()).done;) {\n          var list = _step2.value;\n          fn(list);\n        }\n      }\n    }\n  }, {\n    key: \"forEachInCell\",\n    value: function forEachInCell(cellKey, fn) {\n      var _this$_cellKeyToChild2;\n\n      var listSet = (_this$_cellKeyToChild2 = this._cellKeyToChildren.get(cellKey)) != null ? _this$_cellKeyToChild2 : [];\n\n      for (var _iterator3 = _createForOfIteratorHelperLoose(listSet), _step3; !(_step3 = _iterator3()).done;) {\n        var list = _step3.value;\n        fn(list);\n      }\n    }\n  }, {\n    key: \"anyInCell\",\n    value: function anyInCell(cellKey, fn) {\n      var _this$_cellKeyToChild3;\n\n      var listSet = (_this$_cellKeyToChild3 = this._cellKeyToChildren.get(cellKey)) != null ? _this$_cellKeyToChild3 : [];\n\n      for (var _iterator4 = _createForOfIteratorHelperLoose(listSet), _step4; !(_step4 = _iterator4()).done;) {\n        var list = _step4.value;\n\n        if (fn(list)) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"size\",\n    value: function size() {\n      return this._childrenToCellKey.size;\n    }\n  }]);\n\n  return ChildListCollection;\n}();\n\nexport { ChildListCollection as default };","map":{"version":3,"names":["invariant","ChildListCollection","_cellKeyToChildren","Map","_childrenToCellKey","list","cellKey","has","cellLists","get","Set","add","set","delete","size","fn","values","listSet"],"sources":["/Users/zagarellagabriele/Desktop/Progetti/React Native/React-Native-Exercises/node_modules/react-native/Libraries/Lists/ChildListCollection.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport invariant from 'invariant';\n\nexport default class ChildListCollection<TList> {\n  _cellKeyToChildren: Map<string, Set<TList>> = new Map();\n  _childrenToCellKey: Map<TList, string> = new Map();\n\n  add(list: TList, cellKey: string): void {\n    invariant(\n      !this._childrenToCellKey.has(list),\n      'Trying to add already present child list',\n    );\n\n    const cellLists = this._cellKeyToChildren.get(cellKey) ?? new Set();\n    cellLists.add(list);\n    this._cellKeyToChildren.set(cellKey, cellLists);\n\n    this._childrenToCellKey.set(list, cellKey);\n  }\n\n  remove(list: TList): void {\n    const cellKey = this._childrenToCellKey.get(list);\n    invariant(cellKey != null, 'Trying to remove non-present child list');\n    this._childrenToCellKey.delete(list);\n\n    const cellLists = this._cellKeyToChildren.get(cellKey);\n    invariant(cellLists, '_cellKeyToChildren should contain cellKey');\n    cellLists.delete(list);\n\n    if (cellLists.size === 0) {\n      this._cellKeyToChildren.delete(cellKey);\n    }\n  }\n\n  forEach(fn: TList => void): void {\n    for (const listSet of this._cellKeyToChildren.values()) {\n      for (const list of listSet) {\n        fn(list);\n      }\n    }\n  }\n\n  forEachInCell(cellKey: string, fn: TList => void): void {\n    const listSet = this._cellKeyToChildren.get(cellKey) ?? [];\n    for (const list of listSet) {\n      fn(list);\n    }\n  }\n\n  anyInCell(cellKey: string, fn: TList => boolean): boolean {\n    const listSet = this._cellKeyToChildren.get(cellKey) ?? [];\n    for (const list of listSet) {\n      if (fn(list)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  size(): number {\n    return this._childrenToCellKey.size;\n  }\n}\n"],"mappings":";;;;;;;;;AAUA,OAAOA,SAAP,MAAsB,WAAtB;;IAEqBC,mB;;;;SACnBC,kB,GAA8C,IAAIC,GAAJ,E;SAC9CC,kB,GAAyC,IAAID,GAAJ,E;;;;;WAEzC,aAAIE,IAAJ,EAAiBC,OAAjB,EAAwC;MAAA;;MACtCN,SAAS,CACP,CAAC,KAAKI,kBAAL,CAAwBG,GAAxB,CAA4BF,IAA5B,CADM,EAEP,0CAFO,CAAT;MAKA,IAAMG,SAAS,4BAAG,KAAKN,kBAAL,CAAwBO,GAAxB,CAA4BH,OAA5B,CAAH,oCAA2C,IAAII,GAAJ,EAA1D;MACAF,SAAS,CAACG,GAAV,CAAcN,IAAd;;MACA,KAAKH,kBAAL,CAAwBU,GAAxB,CAA4BN,OAA5B,EAAqCE,SAArC;;MAEA,KAAKJ,kBAAL,CAAwBQ,GAAxB,CAA4BP,IAA5B,EAAkCC,OAAlC;IACD;;;WAED,gBAAOD,IAAP,EAA0B;MACxB,IAAMC,OAAO,GAAG,KAAKF,kBAAL,CAAwBK,GAAxB,CAA4BJ,IAA5B,CAAhB;;MACAL,SAAS,CAACM,OAAO,IAAI,IAAZ,EAAkB,yCAAlB,CAAT;;MACA,KAAKF,kBAAL,CAAwBS,MAAxB,CAA+BR,IAA/B;;MAEA,IAAMG,SAAS,GAAG,KAAKN,kBAAL,CAAwBO,GAAxB,CAA4BH,OAA5B,CAAlB;;MACAN,SAAS,CAACQ,SAAD,EAAY,2CAAZ,CAAT;MACAA,SAAS,CAACK,MAAV,CAAiBR,IAAjB;;MAEA,IAAIG,SAAS,CAACM,IAAV,KAAmB,CAAvB,EAA0B;QACxB,KAAKZ,kBAAL,CAAwBW,MAAxB,CAA+BP,OAA/B;MACD;IACF;;;WAED,iBAAQS,EAAR,EAAiC;MAC/B,qDAAsB,KAAKb,kBAAL,CAAwBc,MAAxB,EAAtB,wCAAwD;QAAA,IAA7CC,OAA6C;;QACtD,sDAAmBA,OAAnB,2CAA4B;UAAA,IAAjBZ,IAAiB;UAC1BU,EAAE,CAACV,IAAD,CAAF;QACD;MACF;IACF;;;WAED,uBAAcC,OAAd,EAA+BS,EAA/B,EAAwD;MAAA;;MACtD,IAAME,OAAO,6BAAG,KAAKf,kBAAL,CAAwBO,GAAxB,CAA4BH,OAA5B,CAAH,qCAA2C,EAAxD;;MACA,sDAAmBW,OAAnB,2CAA4B;QAAA,IAAjBZ,IAAiB;QAC1BU,EAAE,CAACV,IAAD,CAAF;MACD;IACF;;;WAED,mBAAUC,OAAV,EAA2BS,EAA3B,EAA0D;MAAA;;MACxD,IAAME,OAAO,6BAAG,KAAKf,kBAAL,CAAwBO,GAAxB,CAA4BH,OAA5B,CAAH,qCAA2C,EAAxD;;MACA,sDAAmBW,OAAnB,2CAA4B;QAAA,IAAjBZ,IAAiB;;QAC1B,IAAIU,EAAE,CAACV,IAAD,CAAN,EAAc;UACZ,OAAO,IAAP;QACD;MACF;;MACD,OAAO,KAAP;IACD;;;WAED,gBAAe;MACb,OAAO,KAAKD,kBAAL,CAAwBU,IAA/B;IACD;;;;;;SA1DkBb,mB"},"metadata":{},"sourceType":"module"}