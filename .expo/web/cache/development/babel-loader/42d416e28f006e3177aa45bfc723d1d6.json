{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport * as LogBoxSymbolication from \"./LogBoxSymbolication\";\n\nvar LogBoxLog = function () {\n  function LogBoxLog(data) {\n    _classCallCheck(this, LogBoxLog);\n\n    this.symbolicated = {\n      error: null,\n      stack: null,\n      status: 'NONE'\n    };\n    this.level = data.level;\n    this.type = data.type;\n    this.message = data.message;\n    this.stack = data.stack;\n    this.category = data.category;\n    this.componentStack = data.componentStack;\n    this.codeFrame = data.codeFrame;\n    this.isComponentError = data.isComponentError;\n    this.count = 1;\n  }\n\n  _createClass(LogBoxLog, [{\n    key: \"incrementCount\",\n    value: function incrementCount() {\n      this.count += 1;\n    }\n  }, {\n    key: \"getAvailableStack\",\n    value: function getAvailableStack() {\n      return this.symbolicated.status === 'COMPLETE' ? this.symbolicated.stack : this.stack;\n    }\n  }, {\n    key: \"retrySymbolicate\",\n    value: function retrySymbolicate(callback) {\n      if (this.symbolicated.status !== 'COMPLETE') {\n        LogBoxSymbolication.deleteStack(this.stack);\n        this.handleSymbolicate(callback);\n      }\n    }\n  }, {\n    key: \"symbolicate\",\n    value: function symbolicate(callback) {\n      if (this.symbolicated.status === 'NONE') {\n        this.handleSymbolicate(callback);\n      }\n    }\n  }, {\n    key: \"handleSymbolicate\",\n    value: function handleSymbolicate(callback) {\n      var _this = this;\n\n      if (this.symbolicated.status !== 'PENDING') {\n        this.updateStatus(null, null, null, callback);\n        LogBoxSymbolication.symbolicate(this.stack).then(function (data) {\n          _this.updateStatus(null, data == null ? void 0 : data.stack, data == null ? void 0 : data.codeFrame, callback);\n        }, function (error) {\n          _this.updateStatus(error, null, null, callback);\n        });\n      }\n    }\n  }, {\n    key: \"updateStatus\",\n    value: function updateStatus(error, stack, codeFrame, callback) {\n      var lastStatus = this.symbolicated.status;\n\n      if (error != null) {\n        this.symbolicated = {\n          error: error,\n          stack: null,\n          status: 'FAILED'\n        };\n      } else if (stack != null) {\n        if (codeFrame) {\n          this.codeFrame = codeFrame;\n        }\n\n        this.symbolicated = {\n          error: null,\n          stack: stack,\n          status: 'COMPLETE'\n        };\n      } else {\n        this.symbolicated = {\n          error: null,\n          stack: null,\n          status: 'PENDING'\n        };\n      }\n\n      if (callback && lastStatus !== this.symbolicated.status) {\n        callback(this.symbolicated.status);\n      }\n    }\n  }]);\n\n  return LogBoxLog;\n}();\n\nexport default LogBoxLog;","map":{"version":3,"names":["LogBoxSymbolication","LogBoxLog","data","symbolicated","error","stack","status","level","type","message","category","componentStack","codeFrame","isComponentError","count","callback","deleteStack","handleSymbolicate","updateStatus","symbolicate","then","lastStatus"],"sources":["/Users/zagarellagabriele/Desktop/Progetti/React Native/React-Native-Exercises/node_modules/react-native/Libraries/LogBox/Data/LogBoxLog.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport type {Stack} from './LogBoxSymbolication';\nimport type {\n  Category,\n  CodeFrame,\n  ComponentStack,\n  Message,\n} from './parseLogBoxLog';\n\nimport * as LogBoxSymbolication from './LogBoxSymbolication';\n\ntype SymbolicationStatus = 'NONE' | 'PENDING' | 'COMPLETE' | 'FAILED';\n\nexport type LogLevel = 'warn' | 'error' | 'fatal' | 'syntax';\n\nexport type LogBoxLogData = $ReadOnly<{|\n  level: LogLevel,\n  type?: ?string,\n  message: Message,\n  stack: Stack,\n  category: string,\n  componentStack: ComponentStack,\n  codeFrame?: ?CodeFrame,\n  isComponentError: boolean,\n|}>;\n\nclass LogBoxLog {\n  message: Message;\n  type: ?string;\n  category: Category;\n  componentStack: ComponentStack;\n  stack: Stack;\n  count: number;\n  level: LogLevel;\n  codeFrame: ?CodeFrame;\n  isComponentError: boolean;\n  symbolicated:\n    | $ReadOnly<{|error: null, stack: null, status: 'NONE'|}>\n    | $ReadOnly<{|error: null, stack: null, status: 'PENDING'|}>\n    | $ReadOnly<{|error: null, stack: Stack, status: 'COMPLETE'|}>\n    | $ReadOnly<{|error: Error, stack: null, status: 'FAILED'|}> = {\n    error: null,\n    stack: null,\n    status: 'NONE',\n  };\n\n  constructor(data: LogBoxLogData) {\n    this.level = data.level;\n    this.type = data.type;\n    this.message = data.message;\n    this.stack = data.stack;\n    this.category = data.category;\n    this.componentStack = data.componentStack;\n    this.codeFrame = data.codeFrame;\n    this.isComponentError = data.isComponentError;\n    this.count = 1;\n  }\n\n  incrementCount(): void {\n    this.count += 1;\n  }\n\n  getAvailableStack(): Stack {\n    return this.symbolicated.status === 'COMPLETE'\n      ? this.symbolicated.stack\n      : this.stack;\n  }\n\n  retrySymbolicate(callback?: (status: SymbolicationStatus) => void): void {\n    if (this.symbolicated.status !== 'COMPLETE') {\n      LogBoxSymbolication.deleteStack(this.stack);\n      this.handleSymbolicate(callback);\n    }\n  }\n\n  symbolicate(callback?: (status: SymbolicationStatus) => void): void {\n    if (this.symbolicated.status === 'NONE') {\n      this.handleSymbolicate(callback);\n    }\n  }\n\n  handleSymbolicate(callback?: (status: SymbolicationStatus) => void): void {\n    if (this.symbolicated.status !== 'PENDING') {\n      this.updateStatus(null, null, null, callback);\n      LogBoxSymbolication.symbolicate(this.stack).then(\n        data => {\n          this.updateStatus(null, data?.stack, data?.codeFrame, callback);\n        },\n        error => {\n          this.updateStatus(error, null, null, callback);\n        },\n      );\n    }\n  }\n\n  updateStatus(\n    error: ?Error,\n    stack: ?Stack,\n    codeFrame: ?CodeFrame,\n    callback?: (status: SymbolicationStatus) => void,\n  ): void {\n    const lastStatus = this.symbolicated.status;\n    if (error != null) {\n      this.symbolicated = {\n        error,\n        stack: null,\n        status: 'FAILED',\n      };\n    } else if (stack != null) {\n      if (codeFrame) {\n        this.codeFrame = codeFrame;\n      }\n\n      this.symbolicated = {\n        error: null,\n        stack,\n        status: 'COMPLETE',\n      };\n    } else {\n      this.symbolicated = {\n        error: null,\n        stack: null,\n        status: 'PENDING',\n      };\n    }\n\n    if (callback && lastStatus !== this.symbolicated.status) {\n      callback(this.symbolicated.status);\n    }\n  }\n}\n\nexport default LogBoxLog;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}