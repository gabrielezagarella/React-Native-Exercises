{"ast":null,"code":"'use strict';\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nvar Info = _createClass(function Info() {\n  _classCallCheck(this, Info);\n\n  this.any_blank_count = 0;\n  this.any_blank_ms = 0;\n  this.any_blank_speed_sum = 0;\n  this.mostly_blank_count = 0;\n  this.mostly_blank_ms = 0;\n  this.pixels_blank = 0;\n  this.pixels_sampled = 0;\n  this.pixels_scrolled = 0;\n  this.total_time_spent = 0;\n  this.sample_count = 0;\n});\n\nvar DEBUG = false;\nvar _listeners = [];\nvar _minSampleCount = 10;\n\nvar _sampleRate = DEBUG ? 1 : null;\n\nvar FillRateHelper = function () {\n  function FillRateHelper(getFrameMetrics) {\n    _classCallCheck(this, FillRateHelper);\n\n    this._anyBlankStartTime = null;\n    this._enabled = false;\n    this._info = new Info();\n    this._mostlyBlankStartTime = null;\n    this._samplesStartTime = null;\n    this._getFrameMetrics = getFrameMetrics;\n    this._enabled = (_sampleRate || 0) > Math.random();\n\n    this._resetData();\n  }\n\n  _createClass(FillRateHelper, [{\n    key: \"activate\",\n    value: function activate() {\n      if (this._enabled && this._samplesStartTime == null) {\n        DEBUG && console.debug('FillRateHelper: activate');\n        this._samplesStartTime = global.performance.now();\n      }\n    }\n  }, {\n    key: \"deactivateAndFlush\",\n    value: function deactivateAndFlush() {\n      if (!this._enabled) {\n        return;\n      }\n\n      var start = this._samplesStartTime;\n\n      if (start == null) {\n        DEBUG && console.debug('FillRateHelper: bail on deactivate with no start time');\n        return;\n      }\n\n      if (this._info.sample_count < _minSampleCount) {\n        this._resetData();\n\n        return;\n      }\n\n      var total_time_spent = global.performance.now() - start;\n\n      var info = _objectSpread(_objectSpread({}, this._info), {}, {\n        total_time_spent: total_time_spent\n      });\n\n      if (DEBUG) {\n        var derived = {\n          avg_blankness: this._info.pixels_blank / this._info.pixels_sampled,\n          avg_speed: this._info.pixels_scrolled / (total_time_spent / 1000),\n          avg_speed_when_any_blank: this._info.any_blank_speed_sum / this._info.any_blank_count,\n          any_blank_per_min: this._info.any_blank_count / (total_time_spent / 1000 / 60),\n          any_blank_time_frac: this._info.any_blank_ms / total_time_spent,\n          mostly_blank_per_min: this._info.mostly_blank_count / (total_time_spent / 1000 / 60),\n          mostly_blank_time_frac: this._info.mostly_blank_ms / total_time_spent\n        };\n\n        for (var key in derived) {\n          derived[key] = Math.round(1000 * derived[key]) / 1000;\n        }\n\n        console.debug('FillRateHelper deactivateAndFlush: ', {\n          derived: derived,\n          info: info\n        });\n      }\n\n      _listeners.forEach(function (listener) {\n        return listener(info);\n      });\n\n      this._resetData();\n    }\n  }, {\n    key: \"computeBlankness\",\n    value: function computeBlankness(props, cellsAroundViewport, scrollMetrics) {\n      if (!this._enabled || props.getItemCount(props.data) === 0 || cellsAroundViewport.last < cellsAroundViewport.first || this._samplesStartTime == null) {\n        return 0;\n      }\n\n      var dOffset = scrollMetrics.dOffset,\n          offset = scrollMetrics.offset,\n          velocity = scrollMetrics.velocity,\n          visibleLength = scrollMetrics.visibleLength;\n      this._info.sample_count++;\n      this._info.pixels_sampled += Math.round(visibleLength);\n      this._info.pixels_scrolled += Math.round(Math.abs(dOffset));\n      var scrollSpeed = Math.round(Math.abs(velocity) * 1000);\n      var now = global.performance.now();\n\n      if (this._anyBlankStartTime != null) {\n        this._info.any_blank_ms += now - this._anyBlankStartTime;\n      }\n\n      this._anyBlankStartTime = null;\n\n      if (this._mostlyBlankStartTime != null) {\n        this._info.mostly_blank_ms += now - this._mostlyBlankStartTime;\n      }\n\n      this._mostlyBlankStartTime = null;\n      var blankTop = 0;\n      var first = cellsAroundViewport.first;\n\n      var firstFrame = this._getFrameMetrics(first, props);\n\n      while (first <= cellsAroundViewport.last && (!firstFrame || !firstFrame.inLayout)) {\n        firstFrame = this._getFrameMetrics(first, props);\n        first++;\n      }\n\n      if (firstFrame && first > 0) {\n        blankTop = Math.min(visibleLength, Math.max(0, firstFrame.offset - offset));\n      }\n\n      var blankBottom = 0;\n      var last = cellsAroundViewport.last;\n\n      var lastFrame = this._getFrameMetrics(last, props);\n\n      while (last >= cellsAroundViewport.first && (!lastFrame || !lastFrame.inLayout)) {\n        lastFrame = this._getFrameMetrics(last, props);\n        last--;\n      }\n\n      if (lastFrame && last < props.getItemCount(props.data) - 1) {\n        var bottomEdge = lastFrame.offset + lastFrame.length;\n        blankBottom = Math.min(visibleLength, Math.max(0, offset + visibleLength - bottomEdge));\n      }\n\n      var pixels_blank = Math.round(blankTop + blankBottom);\n      var blankness = pixels_blank / visibleLength;\n\n      if (blankness > 0) {\n        this._anyBlankStartTime = now;\n        this._info.any_blank_speed_sum += scrollSpeed;\n        this._info.any_blank_count++;\n        this._info.pixels_blank += pixels_blank;\n\n        if (blankness > 0.5) {\n          this._mostlyBlankStartTime = now;\n          this._info.mostly_blank_count++;\n        }\n      } else if (scrollSpeed < 0.01 || Math.abs(dOffset) < 1) {\n        this.deactivateAndFlush();\n      }\n\n      return blankness;\n    }\n  }, {\n    key: \"enabled\",\n    value: function enabled() {\n      return this._enabled;\n    }\n  }, {\n    key: \"_resetData\",\n    value: function _resetData() {\n      this._anyBlankStartTime = null;\n      this._info = new Info();\n      this._mostlyBlankStartTime = null;\n      this._samplesStartTime = null;\n    }\n  }], [{\n    key: \"addListener\",\n    value: function addListener(callback) {\n      if (_sampleRate === null) {\n        console.warn('Call `FillRateHelper.setSampleRate` before `addListener`.');\n      }\n\n      _listeners.push(callback);\n\n      return {\n        remove: function remove() {\n          _listeners = _listeners.filter(function (listener) {\n            return callback !== listener;\n          });\n        }\n      };\n    }\n  }, {\n    key: \"setSampleRate\",\n    value: function setSampleRate(sampleRate) {\n      _sampleRate = sampleRate;\n    }\n  }, {\n    key: \"setMinSampleCount\",\n    value: function setMinSampleCount(minSampleCount) {\n      _minSampleCount = minSampleCount;\n    }\n  }]);\n\n  return FillRateHelper;\n}();\n\nmodule.exports = FillRateHelper;","map":{"version":3,"names":["Info","any_blank_count","any_blank_ms","any_blank_speed_sum","mostly_blank_count","mostly_blank_ms","pixels_blank","pixels_sampled","pixels_scrolled","total_time_spent","sample_count","DEBUG","_listeners","_minSampleCount","_sampleRate","FillRateHelper","getFrameMetrics","_anyBlankStartTime","_enabled","_info","_mostlyBlankStartTime","_samplesStartTime","_getFrameMetrics","Math","random","_resetData","console","debug","global","performance","now","start","info","derived","avg_blankness","avg_speed","avg_speed_when_any_blank","any_blank_per_min","any_blank_time_frac","mostly_blank_per_min","mostly_blank_time_frac","key","round","forEach","listener","props","cellsAroundViewport","scrollMetrics","getItemCount","data","last","first","dOffset","offset","velocity","visibleLength","abs","scrollSpeed","blankTop","firstFrame","inLayout","min","max","blankBottom","lastFrame","bottomEdge","length","blankness","deactivateAndFlush","callback","warn","push","remove","filter","sampleRate","minSampleCount","module","exports"],"sources":["/Users/zagarellagabriele/Desktop/Progetti/React Native/React-Native-Exercises/node_modules/react-native/Libraries/Lists/FillRateHelper.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nimport type {FrameMetricProps} from './VirtualizedListProps';\n\nexport type FillRateInfo = Info;\n\nclass Info {\n  any_blank_count: number = 0;\n  any_blank_ms: number = 0;\n  any_blank_speed_sum: number = 0;\n  mostly_blank_count: number = 0;\n  mostly_blank_ms: number = 0;\n  pixels_blank: number = 0;\n  pixels_sampled: number = 0;\n  pixels_scrolled: number = 0;\n  total_time_spent: number = 0;\n  sample_count: number = 0;\n}\n\ntype FrameMetrics = {\n  inLayout?: boolean,\n  length: number,\n  offset: number,\n  ...\n};\n\nconst DEBUG = false;\n\nlet _listeners: Array<(Info) => void> = [];\nlet _minSampleCount = 10;\nlet _sampleRate = DEBUG ? 1 : null;\n\n/**\n * A helper class for detecting when the maximem fill rate of `VirtualizedList` is exceeded.\n * By default the sampling rate is set to zero and this will do nothing. If you want to collect\n * samples (e.g. to log them), make sure to call `FillRateHelper.setSampleRate(0.0-1.0)`.\n *\n * Listeners and sample rate are global for all `VirtualizedList`s - typical usage will combine with\n * `SceneTracker.getActiveScene` to determine the context of the events.\n */\nclass FillRateHelper {\n  _anyBlankStartTime: ?number = null;\n  _enabled = false;\n  _getFrameMetrics: (index: number, props: FrameMetricProps) => ?FrameMetrics;\n  _info: Info = new Info();\n  _mostlyBlankStartTime: ?number = null;\n  _samplesStartTime: ?number = null;\n\n  static addListener(callback: FillRateInfo => void): {\n    remove: () => void,\n    ...\n  } {\n    if (_sampleRate === null) {\n      console.warn('Call `FillRateHelper.setSampleRate` before `addListener`.');\n    }\n    _listeners.push(callback);\n    return {\n      remove: () => {\n        _listeners = _listeners.filter(listener => callback !== listener);\n      },\n    };\n  }\n\n  static setSampleRate(sampleRate: number) {\n    _sampleRate = sampleRate;\n  }\n\n  static setMinSampleCount(minSampleCount: number) {\n    _minSampleCount = minSampleCount;\n  }\n\n  constructor(\n    getFrameMetrics: (index: number, props: FrameMetricProps) => ?FrameMetrics,\n  ) {\n    this._getFrameMetrics = getFrameMetrics;\n    this._enabled = (_sampleRate || 0) > Math.random();\n    this._resetData();\n  }\n\n  activate() {\n    if (this._enabled && this._samplesStartTime == null) {\n      DEBUG && console.debug('FillRateHelper: activate');\n      this._samplesStartTime = global.performance.now();\n    }\n  }\n\n  deactivateAndFlush() {\n    if (!this._enabled) {\n      return;\n    }\n    const start = this._samplesStartTime; // const for flow\n    if (start == null) {\n      DEBUG &&\n        console.debug('FillRateHelper: bail on deactivate with no start time');\n      return;\n    }\n    if (this._info.sample_count < _minSampleCount) {\n      // Don't bother with under-sampled events.\n      this._resetData();\n      return;\n    }\n    const total_time_spent = global.performance.now() - start;\n    const info: any = {\n      ...this._info,\n      total_time_spent,\n    };\n    if (DEBUG) {\n      const derived = {\n        avg_blankness: this._info.pixels_blank / this._info.pixels_sampled,\n        avg_speed: this._info.pixels_scrolled / (total_time_spent / 1000),\n        avg_speed_when_any_blank:\n          this._info.any_blank_speed_sum / this._info.any_blank_count,\n        any_blank_per_min:\n          this._info.any_blank_count / (total_time_spent / 1000 / 60),\n        any_blank_time_frac: this._info.any_blank_ms / total_time_spent,\n        mostly_blank_per_min:\n          this._info.mostly_blank_count / (total_time_spent / 1000 / 60),\n        mostly_blank_time_frac: this._info.mostly_blank_ms / total_time_spent,\n      };\n      for (const key in derived) {\n        // $FlowFixMe[prop-missing]\n        derived[key] = Math.round(1000 * derived[key]) / 1000;\n      }\n      console.debug('FillRateHelper deactivateAndFlush: ', {derived, info});\n    }\n    _listeners.forEach(listener => listener(info));\n    this._resetData();\n  }\n\n  computeBlankness(\n    props: {\n      ...FrameMetricProps,\n      initialNumToRender?: ?number,\n      ...\n    },\n    cellsAroundViewport: {\n      first: number,\n      last: number,\n      ...\n    },\n    scrollMetrics: {\n      dOffset: number,\n      offset: number,\n      velocity: number,\n      visibleLength: number,\n      ...\n    },\n  ): number {\n    if (\n      !this._enabled ||\n      props.getItemCount(props.data) === 0 ||\n      cellsAroundViewport.last < cellsAroundViewport.first ||\n      this._samplesStartTime == null\n    ) {\n      return 0;\n    }\n    const {dOffset, offset, velocity, visibleLength} = scrollMetrics;\n\n    // Denominator metrics that we track for all events - most of the time there is no blankness and\n    // we want to capture that.\n    this._info.sample_count++;\n    this._info.pixels_sampled += Math.round(visibleLength);\n    this._info.pixels_scrolled += Math.round(Math.abs(dOffset));\n    const scrollSpeed = Math.round(Math.abs(velocity) * 1000); // px / sec\n\n    // Whether blank now or not, record the elapsed time blank if we were blank last time.\n    const now = global.performance.now();\n    if (this._anyBlankStartTime != null) {\n      this._info.any_blank_ms += now - this._anyBlankStartTime;\n    }\n    this._anyBlankStartTime = null;\n    if (this._mostlyBlankStartTime != null) {\n      this._info.mostly_blank_ms += now - this._mostlyBlankStartTime;\n    }\n    this._mostlyBlankStartTime = null;\n\n    let blankTop = 0;\n    let first = cellsAroundViewport.first;\n    let firstFrame = this._getFrameMetrics(first, props);\n    while (\n      first <= cellsAroundViewport.last &&\n      (!firstFrame || !firstFrame.inLayout)\n    ) {\n      firstFrame = this._getFrameMetrics(first, props);\n      first++;\n    }\n    // Only count blankTop if we aren't rendering the first item, otherwise we will count the header\n    // as blank.\n    if (firstFrame && first > 0) {\n      blankTop = Math.min(\n        visibleLength,\n        Math.max(0, firstFrame.offset - offset),\n      );\n    }\n    let blankBottom = 0;\n    let last = cellsAroundViewport.last;\n    let lastFrame = this._getFrameMetrics(last, props);\n    while (\n      last >= cellsAroundViewport.first &&\n      (!lastFrame || !lastFrame.inLayout)\n    ) {\n      lastFrame = this._getFrameMetrics(last, props);\n      last--;\n    }\n    // Only count blankBottom if we aren't rendering the last item, otherwise we will count the\n    // footer as blank.\n    if (lastFrame && last < props.getItemCount(props.data) - 1) {\n      const bottomEdge = lastFrame.offset + lastFrame.length;\n      blankBottom = Math.min(\n        visibleLength,\n        Math.max(0, offset + visibleLength - bottomEdge),\n      );\n    }\n    const pixels_blank = Math.round(blankTop + blankBottom);\n    const blankness = pixels_blank / visibleLength;\n    if (blankness > 0) {\n      this._anyBlankStartTime = now;\n      this._info.any_blank_speed_sum += scrollSpeed;\n      this._info.any_blank_count++;\n      this._info.pixels_blank += pixels_blank;\n      if (blankness > 0.5) {\n        this._mostlyBlankStartTime = now;\n        this._info.mostly_blank_count++;\n      }\n    } else if (scrollSpeed < 0.01 || Math.abs(dOffset) < 1) {\n      this.deactivateAndFlush();\n    }\n    return blankness;\n  }\n\n  enabled(): boolean {\n    return this._enabled;\n  }\n\n  _resetData() {\n    this._anyBlankStartTime = null;\n    this._info = new Info();\n    this._mostlyBlankStartTime = null;\n    this._samplesStartTime = null;\n  }\n}\n\nmodule.exports = FillRateHelper;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}