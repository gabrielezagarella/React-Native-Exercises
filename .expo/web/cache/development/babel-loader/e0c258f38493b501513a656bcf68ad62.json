{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"contentContainerStyle\", \"style\", \"children\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport DrawerPositionContext from \"../utils/DrawerPositionContext\";\n\nfunction DrawerContentScrollView(_ref, ref) {\n  var contentContainerStyle = _ref.contentContainerStyle,\n      style = _ref.style,\n      children = _ref.children,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var drawerPosition = React.useContext(DrawerPositionContext);\n  var insets = useSafeAreaInsets();\n  var isRight = I18nManager.getConstants().isRTL ? drawerPosition === 'left' : drawerPosition === 'right';\n  return React.createElement(ScrollView, _extends({}, rest, {\n    ref: ref,\n    contentContainerStyle: [{\n      paddingTop: insets.top + 4,\n      paddingStart: !isRight ? insets.left : 0,\n      paddingEnd: isRight ? insets.right : 0\n    }, contentContainerStyle],\n    style: [styles.container, style]\n  }), children);\n}\n\nexport default React.forwardRef(DrawerContentScrollView);\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["views/DrawerContentScrollView.tsx"],"names":["React","useSafeAreaInsets","DrawerPositionContext","DrawerContentScrollView","contentContainerStyle","style","children","rest","ref","drawerPosition","useContext","insets","isRight","I18nManager","getConstants","isRTL","paddingTop","top","paddingStart","left","paddingEnd","right","styles","container","forwardRef","StyleSheet","create","flex"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;;AAOA,SAASC,iBAAT,QAAkC,gCAAlC;AAEA,OAAOC,qBAAP;;AAMA,SAASC,uBAAT,CAAgC,IAAhC,EAEEK,GAFF,EAGE;EAFA,IAAEJ,qBAAF,GAA0D,IAA1D,CAAEA,qBAAF;EAAA,IAAyBC,KAAzB,GAA0D,IAA1D,CAAyBA,KAAzB;EAAA,IAAgCC,QAAhC,GAA0D,IAA1D,CAAgCA,QAAhC;EAAA,IAA6CC,IAA7C,4BAA0D,IAA1D;;EAGA,IAAME,cAAc,GAAGT,KAAK,CAACU,UAANV,CAAiBE,qBAAjBF,CAAvB;EACA,IAAMW,MAAM,GAAGV,iBAAiB,EAAhC;EAEA,IAAMW,OAAO,GAAGC,WAAW,CAACC,YAAZD,GAA2BE,KAA3BF,GACZJ,cAAc,KAAK,MADPI,GAEZJ,cAAc,KAAK,OAFvB;EAIA,OACE,KAAA,CAAA,aAAA,CAAC,UAAD,EAAW,QAAA,CAAA,EAAA,EACLF,IADK,EACD;IACR,GAAG,EAAEC,GADG;IAER,qBAAqB,EAAE,CACrB;MACEQ,UAAU,EAAEL,MAAM,CAACM,GAAPN,GAAa,CAD3B;MAEEO,YAAY,EAAE,CAACN,OAAD,GAAWD,MAAM,CAACQ,IAAlB,GAAyB,CAFzC;MAGEC,UAAU,EAAER,OAAO,GAAGD,MAAM,CAACU,KAAV,GAAkB;IAHvC,CADqB,EAMrBjB,qBANqB,CAFf;IAUR,KAAK,EAAE,CAACkB,MAAM,CAACC,SAAR,EAAmBlB,KAAnB;EAVC,CADC,CAAX,EAaGC,QAbH,CADF;AAiBF;;AAEA,eAAeN,KAAK,CAACwB,UAANxB,CAAiBG,uBAAjBH,CAAf;AAEA,IAAMsB,MAAM,GAAGG,UAAU,CAACC,MAAXD,CAAkB;EAC/BF,SAAS,EAAE;IACTI,IAAI,EAAE;EADG;AADoB,CAAlBF,CAAf","sourceRoot":"../../../src","sourcesContent":["function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from 'react';\nimport { I18nManager, ScrollView, StyleSheet } from 'react-native';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport DrawerPositionContext from '../utils/DrawerPositionContext';\nfunction DrawerContentScrollView(_ref, ref) {\n  let {\n    contentContainerStyle,\n    style,\n    children,\n    ...rest\n  } = _ref;\n  const drawerPosition = React.useContext(DrawerPositionContext);\n  const insets = useSafeAreaInsets();\n  const isRight = I18nManager.getConstants().isRTL ? drawerPosition === 'left' : drawerPosition === 'right';\n  return /*#__PURE__*/React.createElement(ScrollView, _extends({}, rest, {\n    ref: ref,\n    contentContainerStyle: [{\n      paddingTop: insets.top + 4,\n      paddingStart: !isRight ? insets.left : 0,\n      paddingEnd: isRight ? insets.right : 0\n    }, contentContainerStyle],\n    style: [styles.container, style]\n  }), children);\n}\nexport default /*#__PURE__*/React.forwardRef(DrawerContentScrollView);\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});\n//# sourceMappingURL=DrawerContentScrollView.js.map"]},"metadata":{},"sourceType":"module"}