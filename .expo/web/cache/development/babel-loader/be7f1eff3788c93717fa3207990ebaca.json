{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar VELOCITY_FACTOR = 0.2;\nvar MAX_POINTERS = 20;\n\nvar PointerTracker = function () {\n  function PointerTracker() {\n    _classCallCheck(this, PointerTracker);\n\n    _defineProperty(this, \"trackedPointers\", new Map());\n\n    _defineProperty(this, \"touchEventsIds\", new Map());\n\n    _defineProperty(this, \"lastMovedPointerId\", void 0);\n\n    _defineProperty(this, \"cachedAverages\", {\n      x: 0,\n      y: 0\n    });\n\n    this.lastMovedPointerId = NaN;\n\n    for (var i = 0; i < MAX_POINTERS; ++i) {\n      this.touchEventsIds.set(i, NaN);\n    }\n  }\n\n  _createClass(PointerTracker, [{\n    key: \"addToTracker\",\n    value: function addToTracker(event) {\n      if (this.trackedPointers.has(event.pointerId)) {\n        return;\n      }\n\n      this.lastMovedPointerId = event.pointerId;\n      var newElement = {\n        lastX: event.x,\n        lastY: event.y,\n        timeStamp: event.time,\n        velocityX: 0,\n        velocityY: 0\n      };\n      this.trackedPointers.set(event.pointerId, newElement);\n      this.mapTouchEventId(event.pointerId);\n      this.cachedAverages = {\n        x: this.getLastAvgX(),\n        y: this.getLastAvgY()\n      };\n    }\n  }, {\n    key: \"removeFromTracker\",\n    value: function removeFromTracker(pointerId) {\n      this.trackedPointers.delete(pointerId);\n      this.removeMappedTouchId(pointerId);\n    }\n  }, {\n    key: \"track\",\n    value: function track(event) {\n      var element = this.trackedPointers.get(event.pointerId);\n\n      if (!element) {\n        return;\n      }\n\n      this.lastMovedPointerId = event.pointerId;\n      var dx = event.x - element.lastX;\n      var dy = event.y - element.lastY;\n      var dt = event.time - element.timeStamp;\n      element.velocityX = dx / dt * 1000 * VELOCITY_FACTOR;\n      element.velocityY = dy / dt * 1000 * VELOCITY_FACTOR;\n      element.lastX = event.x;\n      element.lastY = event.y;\n      this.trackedPointers.set(event.pointerId, element);\n      var avgX = this.getLastAvgX();\n      var avgY = this.getLastAvgY();\n      this.cachedAverages = {\n        x: avgX,\n        y: avgY\n      };\n    }\n  }, {\n    key: \"mapTouchEventId\",\n    value: function mapTouchEventId(id) {\n      for (var _iterator = _createForOfIteratorHelperLoose(this.touchEventsIds), _step; !(_step = _iterator()).done;) {\n        var _ref = _step.value;\n\n        var _ref2 = _slicedToArray(_ref, 2);\n\n        var mappedId = _ref2[0];\n        var touchId = _ref2[1];\n\n        if (isNaN(touchId)) {\n          this.touchEventsIds.set(mappedId, id);\n          break;\n        }\n      }\n    }\n  }, {\n    key: \"removeMappedTouchId\",\n    value: function removeMappedTouchId(id) {\n      var mappedId = this.getMappedTouchEventId(id);\n\n      if (!isNaN(mappedId)) {\n        this.touchEventsIds.set(mappedId, NaN);\n      }\n    }\n  }, {\n    key: \"getMappedTouchEventId\",\n    value: function getMappedTouchEventId(touchEventId) {\n      for (var _iterator2 = _createForOfIteratorHelperLoose(this.touchEventsIds.entries()), _step2; !(_step2 = _iterator2()).done;) {\n        var _ref3 = _step2.value;\n\n        var _ref4 = _slicedToArray(_ref3, 2);\n\n        var key = _ref4[0];\n        var value = _ref4[1];\n\n        if (value === touchEventId) {\n          return key;\n        }\n      }\n\n      return NaN;\n    }\n  }, {\n    key: \"getVelocityX\",\n    value: function getVelocityX(pointerId) {\n      var _this$trackedPointers;\n\n      return (_this$trackedPointers = this.trackedPointers.get(pointerId)) === null || _this$trackedPointers === void 0 ? void 0 : _this$trackedPointers.velocityX;\n    }\n  }, {\n    key: \"getVelocityY\",\n    value: function getVelocityY(pointerId) {\n      var _this$trackedPointers2;\n\n      return (_this$trackedPointers2 = this.trackedPointers.get(pointerId)) === null || _this$trackedPointers2 === void 0 ? void 0 : _this$trackedPointers2.velocityY;\n    }\n  }, {\n    key: \"getLastX\",\n    value: function getLastX(pointerId) {\n      if (pointerId !== undefined) {\n        var _this$trackedPointers3;\n\n        return (_this$trackedPointers3 = this.trackedPointers.get(pointerId)) === null || _this$trackedPointers3 === void 0 ? void 0 : _this$trackedPointers3.lastX;\n      } else {\n        var _this$trackedPointers4;\n\n        return (_this$trackedPointers4 = this.trackedPointers.get(this.lastMovedPointerId)) === null || _this$trackedPointers4 === void 0 ? void 0 : _this$trackedPointers4.lastX;\n      }\n    }\n  }, {\n    key: \"getLastY\",\n    value: function getLastY(pointerId) {\n      if (pointerId !== undefined) {\n        var _this$trackedPointers5;\n\n        return (_this$trackedPointers5 = this.trackedPointers.get(pointerId)) === null || _this$trackedPointers5 === void 0 ? void 0 : _this$trackedPointers5.lastY;\n      } else {\n        var _this$trackedPointers6;\n\n        return (_this$trackedPointers6 = this.trackedPointers.get(this.lastMovedPointerId)) === null || _this$trackedPointers6 === void 0 ? void 0 : _this$trackedPointers6.lastY;\n      }\n    }\n  }, {\n    key: \"getLastAvgX\",\n    value: function getLastAvgX() {\n      var avgX = this.getSumX() / this.trackedPointers.size;\n      return isNaN(avgX) ? this.cachedAverages.x : avgX;\n    }\n  }, {\n    key: \"getLastAvgY\",\n    value: function getLastAvgY() {\n      var avgY = this.getSumY() / this.trackedPointers.size;\n      return isNaN(avgY) ? this.cachedAverages.y : avgY;\n    }\n  }, {\n    key: \"getSumX\",\n    value: function getSumX(ignoredPointer) {\n      var sumX = 0;\n      this.trackedPointers.forEach(function (value, key) {\n        if (key !== ignoredPointer) {\n          sumX += value.lastX;\n        }\n      });\n      return sumX;\n    }\n  }, {\n    key: \"getSumY\",\n    value: function getSumY(ignoredPointer) {\n      var sumY = 0;\n      this.trackedPointers.forEach(function (value, key) {\n        if (key !== ignoredPointer) {\n          sumY += value.lastY;\n        }\n      });\n      return sumY;\n    }\n  }, {\n    key: \"getTrackedPointersCount\",\n    value: function getTrackedPointersCount() {\n      return this.trackedPointers.size;\n    }\n  }, {\n    key: \"getTrackedPointersID\",\n    value: function getTrackedPointersID() {\n      var keys = [];\n      this.trackedPointers.forEach(function (_value, key) {\n        keys.push(key);\n      });\n      return keys;\n    }\n  }, {\n    key: \"getData\",\n    value: function getData() {\n      return this.trackedPointers;\n    }\n  }, {\n    key: \"resetTracker\",\n    value: function resetTracker() {\n      this.trackedPointers.clear();\n      this.lastMovedPointerId = NaN;\n\n      for (var i = 0; i < MAX_POINTERS; ++i) {\n        this.touchEventsIds.set(i, NaN);\n      }\n    }\n  }], [{\n    key: \"shareCommonPointers\",\n    value: function shareCommonPointers(stPointers, ndPointers) {\n      return stPointers.some(function (pointerId) {\n        return ndPointers.includes(pointerId);\n      });\n    }\n  }]);\n\n  return PointerTracker;\n}();\n\nexport { PointerTracker as default };","map":{"version":3,"sources":["PointerTracker.ts"],"names":["VELOCITY_FACTOR","MAX_POINTERS","x","y","constructor","i","addToTracker","event","newElement","lastX","lastY","timeStamp","velocityX","velocityY","removeFromTracker","track","element","dx","dy","dt","avgX","avgY","mapTouchEventId","isNaN","removeMappedTouchId","mappedId","getMappedTouchEventId","value","getVelocityX","getVelocityY","getLastX","pointerId","getLastY","getLastAvgX","getLastAvgY","getSumX","sumX","key","getSumY","sumY","getTrackedPointersCount","getTrackedPointersID","keys","getData","resetTracker","shareCommonPointers","stPointers","ndPointers"],"mappings":"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","sourcesContent":["import { AdaptedEvent } from '../interfaces';\n\nexport interface TrackerElement {\n  lastX: number;\n  lastY: number;\n\n  timeStamp: number;\n\n  velocityX: number;\n  velocityY: number;\n}\n\n// Used to scale velocity so that it is similar to velocity in Android/iOS\nconst VELOCITY_FACTOR = 0.2;\nconst MAX_POINTERS = 20;\n\nexport default class PointerTracker {\n  private trackedPointers: Map<number, TrackerElement> = new Map<\n    number,\n    TrackerElement\n  >();\n\n  private touchEventsIds: Map<number, number> = new Map<number, number>();\n\n  private lastMovedPointerId: number;\n\n  private cachedAverages: { x: number; y: number } = { x: 0, y: 0 };\n\n  public constructor() {\n    this.lastMovedPointerId = NaN;\n\n    for (let i = 0; i < MAX_POINTERS; ++i) {\n      this.touchEventsIds.set(i, NaN);\n    }\n  }\n\n  public addToTracker(event: AdaptedEvent): void {\n    if (this.trackedPointers.has(event.pointerId)) {\n      return;\n    }\n\n    this.lastMovedPointerId = event.pointerId;\n\n    const newElement: TrackerElement = {\n      lastX: event.x,\n      lastY: event.y,\n      timeStamp: event.time,\n      velocityX: 0,\n      velocityY: 0,\n    };\n\n    this.trackedPointers.set(event.pointerId, newElement);\n    this.mapTouchEventId(event.pointerId);\n\n    this.cachedAverages = {\n      x: this.getLastAvgX(),\n      y: this.getLastAvgY(),\n    };\n  }\n\n  public removeFromTracker(pointerId: number): void {\n    this.trackedPointers.delete(pointerId);\n    this.removeMappedTouchId(pointerId);\n  }\n\n  public track(event: AdaptedEvent): void {\n    const element: TrackerElement = this.trackedPointers.get(\n      event.pointerId\n    ) as TrackerElement;\n\n    if (!element) {\n      return;\n    }\n\n    this.lastMovedPointerId = event.pointerId;\n\n    const dx = event.x - element.lastX;\n    const dy = event.y - element.lastY;\n    const dt = event.time - element.timeStamp;\n\n    element.velocityX = (dx / dt) * 1000 * VELOCITY_FACTOR;\n    element.velocityY = (dy / dt) * 1000 * VELOCITY_FACTOR;\n\n    element.lastX = event.x;\n    element.lastY = event.y;\n\n    this.trackedPointers.set(event.pointerId, element);\n\n    const avgX: number = this.getLastAvgX();\n    const avgY: number = this.getLastAvgY();\n\n    this.cachedAverages = {\n      x: avgX,\n      y: avgY,\n    };\n  }\n\n  //Mapping TouchEvents ID\n  private mapTouchEventId(id: number): void {\n    for (const [mappedId, touchId] of this.touchEventsIds) {\n      if (isNaN(touchId)) {\n        this.touchEventsIds.set(mappedId, id);\n        break;\n      }\n    }\n  }\n\n  private removeMappedTouchId(id: number): void {\n    const mappedId: number = this.getMappedTouchEventId(id);\n    if (!isNaN(mappedId)) {\n      this.touchEventsIds.set(mappedId, NaN);\n    }\n  }\n\n  public getMappedTouchEventId(touchEventId: number): number {\n    for (const [key, value] of this.touchEventsIds.entries()) {\n      if (value === touchEventId) {\n        return key;\n      }\n    }\n\n    return NaN;\n  }\n\n  public getVelocityX(pointerId: number): number {\n    return this.trackedPointers.get(pointerId)?.velocityX as number;\n  }\n  public getVelocityY(pointerId: number): number {\n    return this.trackedPointers.get(pointerId)?.velocityY as number;\n  }\n\n  /**\n   * Returns X coordinate of last moved pointer\n   */\n  public getLastX(): number;\n\n  /**\n   *\n   * @param pointerId\n   * Returns X coordinate of given pointer\n   */\n  // eslint-disable-next-line @typescript-eslint/unified-signatures\n  public getLastX(pointerId: number): number;\n\n  public getLastX(pointerId?: number): number {\n    if (pointerId !== undefined) {\n      return this.trackedPointers.get(pointerId)?.lastX as number;\n    } else {\n      return this.trackedPointers.get(this.lastMovedPointerId)?.lastX as number;\n    }\n  }\n\n  /**\n   * Returns Y coordinate of last moved pointer\n   */\n  public getLastY(): number;\n\n  /**\n   *\n   * @param pointerId\n   * Returns Y coordinate of given pointer\n   */\n  // eslint-disable-next-line @typescript-eslint/unified-signatures\n  public getLastY(pointerId: number): number;\n\n  public getLastY(pointerId?: number): number {\n    if (pointerId !== undefined) {\n      return this.trackedPointers.get(pointerId)?.lastY as number;\n    } else {\n      return this.trackedPointers.get(this.lastMovedPointerId)?.lastY as number;\n    }\n  }\n\n  // Some handlers use these methods to send average values in native event.\n  // This may happen when pointers have already been removed from tracker (i.e. pointerup event).\n  // In situation when NaN would be sent as a response, we return cached value.\n  // That prevents handlers from crashing\n  public getLastAvgX(): number {\n    const avgX: number = this.getSumX() / this.trackedPointers.size;\n    return isNaN(avgX) ? this.cachedAverages.x : avgX;\n  }\n  public getLastAvgY(): number {\n    const avgY: number = this.getSumY() / this.trackedPointers.size;\n    return isNaN(avgY) ? this.cachedAverages.y : avgY;\n  }\n  public getSumX(ignoredPointer?: number): number {\n    let sumX = 0;\n\n    this.trackedPointers.forEach((value, key) => {\n      if (key !== ignoredPointer) {\n        sumX += value.lastX;\n      }\n    });\n\n    return sumX;\n  }\n  public getSumY(ignoredPointer?: number): number {\n    let sumY = 0;\n\n    this.trackedPointers.forEach((value, key) => {\n      if (key !== ignoredPointer) {\n        sumY += value.lastY;\n      }\n    });\n\n    return sumY;\n  }\n  public getTrackedPointersCount(): number {\n    return this.trackedPointers.size;\n  }\n  public getTrackedPointersID(): number[] {\n    const keys: number[] = [];\n\n    this.trackedPointers.forEach((_value, key) => {\n      keys.push(key);\n    });\n\n    return keys;\n  }\n\n  public getData(): Map<number, TrackerElement> {\n    return this.trackedPointers;\n  }\n\n  public resetTracker(): void {\n    this.trackedPointers.clear();\n    this.lastMovedPointerId = NaN;\n\n    for (let i = 0; i < MAX_POINTERS; ++i) {\n      this.touchEventsIds.set(i, NaN);\n    }\n  }\n\n  public static shareCommonPointers(\n    stPointers: number[],\n    ndPointers: number[]\n  ): boolean {\n    return stPointers.some((pointerId) => ndPointers.includes(pointerId));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}