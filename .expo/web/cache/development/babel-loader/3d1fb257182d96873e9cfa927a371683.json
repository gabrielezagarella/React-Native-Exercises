{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar getDevServer = require(\"./getDevServer\");\n\nfunction symbolicateStackTrace(stack) {\n  var _global$fetch;\n\n  var devServer, fetch, response;\n  return _regeneratorRuntime.async(function symbolicateStackTrace$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          devServer = getDevServer();\n\n          if (devServer.bundleLoadedFromServer) {\n            _context.next = 3;\n            break;\n          }\n\n          throw new Error('Bundle was not loaded from Metro.');\n\n        case 3:\n          fetch = (_global$fetch = global.fetch) != null ? _global$fetch : require(\"../../Network/fetch\");\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(fetch(devServer.url + 'symbolicate', {\n            method: 'POST',\n            body: JSON.stringify({\n              stack: stack\n            })\n          }));\n\n        case 6:\n          response = _context.sent;\n          _context.next = 9;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 9:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nmodule.exports = symbolicateStackTrace;","map":{"version":3,"names":["getDevServer","require","symbolicateStackTrace","stack","devServer","bundleLoadedFromServer","Error","fetch","global","url","method","body","JSON","stringify","response","json","module","exports"],"sources":["/Users/zagarellagabriele/Desktop/Progetti/React Native/React-Native-Exercises/node_modules/react-native/Libraries/Core/Devtools/symbolicateStackTrace.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\n'use strict';\n\nimport type {StackFrame} from '../NativeExceptionsManager';\n\nconst getDevServer = require('./getDevServer');\n\nexport type CodeFrame = $ReadOnly<{\n  content: string,\n  location: ?{\n    row: number,\n    column: number,\n    ...\n  },\n  fileName: string,\n}>;\n\nexport type SymbolicatedStackTrace = $ReadOnly<{\n  stack: Array<StackFrame>,\n  codeFrame: ?CodeFrame,\n}>;\n\nasync function symbolicateStackTrace(\n  stack: Array<StackFrame>,\n): Promise<SymbolicatedStackTrace> {\n  const devServer = getDevServer();\n  if (!devServer.bundleLoadedFromServer) {\n    throw new Error('Bundle was not loaded from Metro.');\n  }\n\n  // Lazy-load `fetch` until the first symbolication call to avoid circular requires.\n  const fetch = global.fetch ?? require('../../Network/fetch');\n  const response = await fetch(devServer.url + 'symbolicate', {\n    method: 'POST',\n    body: JSON.stringify({stack}),\n  });\n  return await response.json();\n}\n\nmodule.exports = symbolicateStackTrace;\n"],"mappings":"AAUA;;;;AAIA,IAAMA,YAAY,GAAGC,OAAO,kBAA5B;;AAiBA,SAAeC,qBAAf,CACEC,KADF;EAAA;;EAAA;EAAA;IAAA;MAAA;QAAA;UAGQC,SAHR,GAGoBJ,YAAY,EAHhC;;UAAA,IAIOI,SAAS,CAACC,sBAJjB;YAAA;YAAA;UAAA;;UAAA,MAKU,IAAIC,KAAJ,CAAU,mCAAV,CALV;;QAAA;UASQC,KATR,oBASgBC,MAAM,CAACD,KATvB,4BASgCN,OAAO,uBATvC;UAAA;UAAA,iCAUyBM,KAAK,CAACH,SAAS,CAACK,GAAV,GAAgB,aAAjB,EAAgC;YAC1DC,MAAM,EAAE,MADkD;YAE1DC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;cAACV,KAAK,EAALA;YAAD,CAAf;UAFoD,CAAhC,CAV9B;;QAAA;UAUQW,QAVR;UAAA;UAAA,iCAceA,QAAQ,CAACC,IAAT,EAdf;;QAAA;UAAA;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;;AAiBAC,MAAM,CAACC,OAAP,GAAiBf,qBAAjB"},"metadata":{},"sourceType":"script"}