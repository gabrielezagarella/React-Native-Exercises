{"ast":null,"code":"import { createViewConfig } from \"../NativeComponent/ViewConfig\";\nimport UIManager from \"../ReactNative/UIManager\";\nimport createReactNativeComponentClass from \"../Renderer/shims/createReactNativeComponentClass\";\nvar textViewConfig = {\n  validAttributes: {\n    isHighlighted: true,\n    isPressable: true,\n    numberOfLines: true,\n    ellipsizeMode: true,\n    allowFontScaling: true,\n    dynamicTypeRamp: true,\n    maxFontSizeMultiplier: true,\n    disabled: true,\n    selectable: true,\n    selectionColor: true,\n    adjustsFontSizeToFit: true,\n    minimumFontScale: true,\n    textBreakStrategy: true,\n    onTextLayout: true,\n    onInlineViewLayout: true,\n    dataDetectorType: true,\n    android_hyphenationFrequency: true,\n    lineBreakStrategyIOS: true\n  },\n  directEventTypes: {\n    topTextLayout: {\n      registrationName: 'onTextLayout'\n    },\n    topInlineViewLayout: {\n      registrationName: 'onInlineViewLayout'\n    }\n  },\n  uiViewClassName: 'RCTText'\n};\nvar virtualTextViewConfig = {\n  validAttributes: {\n    isHighlighted: true,\n    isPressable: true,\n    maxFontSizeMultiplier: true\n  },\n  uiViewClassName: 'RCTVirtualText'\n};\nexport var NativeText = createReactNativeComponentClass('RCTText', function () {\n  return createViewConfig(textViewConfig);\n});\nexport var NativeVirtualText = !global.RN$Bridgeless && !UIManager.hasViewManagerConfig('RCTVirtualText') ? NativeText : createReactNativeComponentClass('RCTVirtualText', function () {\n  return createViewConfig(virtualTextViewConfig);\n});","map":{"version":3,"names":["createViewConfig","UIManager","createReactNativeComponentClass","textViewConfig","validAttributes","isHighlighted","isPressable","numberOfLines","ellipsizeMode","allowFontScaling","dynamicTypeRamp","maxFontSizeMultiplier","disabled","selectable","selectionColor","adjustsFontSizeToFit","minimumFontScale","textBreakStrategy","onTextLayout","onInlineViewLayout","dataDetectorType","android_hyphenationFrequency","lineBreakStrategyIOS","directEventTypes","topTextLayout","registrationName","topInlineViewLayout","uiViewClassName","virtualTextViewConfig","NativeText","NativeVirtualText","global","RN$Bridgeless","hasViewManagerConfig"],"sources":["/Users/zagarellagabriele/Desktop/Progetti/React Native/React-Native-Exercises/node_modules/react-native/Libraries/Text/TextNativeComponent.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\nimport {createViewConfig} from '../NativeComponent/ViewConfig';\nimport UIManager from '../ReactNative/UIManager';\nimport createReactNativeComponentClass from '../Renderer/shims/createReactNativeComponentClass';\nimport {type HostComponent} from '../Renderer/shims/ReactNativeTypes';\nimport {type ProcessedColorValue} from '../StyleSheet/processColor';\nimport {type PressEvent} from '../Types/CoreEventTypes';\nimport {type TextProps} from './TextProps';\n\ntype NativeTextProps = $ReadOnly<{\n  ...TextProps,\n  isHighlighted?: ?boolean,\n  selectionColor?: ?ProcessedColorValue,\n  onClick?: ?(event: PressEvent) => mixed,\n  // This is only needed for platforms that optimize text hit testing, e.g.,\n  // react-native-windows. It can be used to only hit test virtual text spans\n  // that have pressable events attached to them.\n  isPressable?: ?boolean,\n}>;\n\nconst textViewConfig = {\n  validAttributes: {\n    isHighlighted: true,\n    isPressable: true,\n    numberOfLines: true,\n    ellipsizeMode: true,\n    allowFontScaling: true,\n    dynamicTypeRamp: true,\n    maxFontSizeMultiplier: true,\n    disabled: true,\n    selectable: true,\n    selectionColor: true,\n    adjustsFontSizeToFit: true,\n    minimumFontScale: true,\n    textBreakStrategy: true,\n    onTextLayout: true,\n    onInlineViewLayout: true,\n    dataDetectorType: true,\n    android_hyphenationFrequency: true,\n    lineBreakStrategyIOS: true,\n  },\n  directEventTypes: {\n    topTextLayout: {\n      registrationName: 'onTextLayout',\n    },\n    topInlineViewLayout: {\n      registrationName: 'onInlineViewLayout',\n    },\n  },\n  uiViewClassName: 'RCTText',\n};\n\nconst virtualTextViewConfig = {\n  validAttributes: {\n    isHighlighted: true,\n    isPressable: true,\n    maxFontSizeMultiplier: true,\n  },\n  uiViewClassName: 'RCTVirtualText',\n};\n\nexport const NativeText: HostComponent<NativeTextProps> =\n  (createReactNativeComponentClass('RCTText', () =>\n    createViewConfig(textViewConfig),\n  ): any);\n\nexport const NativeVirtualText: HostComponent<NativeTextProps> =\n  !global.RN$Bridgeless && !UIManager.hasViewManagerConfig('RCTVirtualText')\n    ? NativeText\n    : (createReactNativeComponentClass('RCTVirtualText', () =>\n        createViewConfig(virtualTextViewConfig),\n      ): any);\n"],"mappings":"AAUA,SAAQA,gBAAR;AACA,OAAOC,SAAP;AACA,OAAOC,+BAAP;AAiBA,IAAMC,cAAc,GAAG;EACrBC,eAAe,EAAE;IACfC,aAAa,EAAE,IADA;IAEfC,WAAW,EAAE,IAFE;IAGfC,aAAa,EAAE,IAHA;IAIfC,aAAa,EAAE,IAJA;IAKfC,gBAAgB,EAAE,IALH;IAMfC,eAAe,EAAE,IANF;IAOfC,qBAAqB,EAAE,IAPR;IAQfC,QAAQ,EAAE,IARK;IASfC,UAAU,EAAE,IATG;IAUfC,cAAc,EAAE,IAVD;IAWfC,oBAAoB,EAAE,IAXP;IAYfC,gBAAgB,EAAE,IAZH;IAafC,iBAAiB,EAAE,IAbJ;IAcfC,YAAY,EAAE,IAdC;IAefC,kBAAkB,EAAE,IAfL;IAgBfC,gBAAgB,EAAE,IAhBH;IAiBfC,4BAA4B,EAAE,IAjBf;IAkBfC,oBAAoB,EAAE;EAlBP,CADI;EAqBrBC,gBAAgB,EAAE;IAChBC,aAAa,EAAE;MACbC,gBAAgB,EAAE;IADL,CADC;IAIhBC,mBAAmB,EAAE;MACnBD,gBAAgB,EAAE;IADC;EAJL,CArBG;EA6BrBE,eAAe,EAAE;AA7BI,CAAvB;AAgCA,IAAMC,qBAAqB,GAAG;EAC5BxB,eAAe,EAAE;IACfC,aAAa,EAAE,IADA;IAEfC,WAAW,EAAE,IAFE;IAGfK,qBAAqB,EAAE;EAHR,CADW;EAM5BgB,eAAe,EAAE;AANW,CAA9B;AASA,OAAO,IAAME,UAA0C,GACpD3B,+BAA+B,CAAC,SAAD,EAAY;EAAA,OAC1CF,gBAAgB,CAACG,cAAD,CAD0B;AAAA,CAAZ,CAD3B;AAKP,OAAO,IAAM2B,iBAAiD,GAC5D,CAACC,MAAM,CAACC,aAAR,IAAyB,CAAC/B,SAAS,CAACgC,oBAAV,CAA+B,gBAA/B,CAA1B,GACIJ,UADJ,GAEK3B,+BAA+B,CAAC,gBAAD,EAAmB;EAAA,OACjDF,gBAAgB,CAAC4B,qBAAD,CADiC;AAAA,CAAnB,CAH/B"},"metadata":{},"sourceType":"module"}