{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nvar EventEmitter = function () {\n  function EventEmitter() {\n    _classCallCheck(this, EventEmitter);\n\n    this._registry = {};\n  }\n\n  _createClass(EventEmitter, [{\n    key: \"addListener\",\n    value: function addListener(eventType, listener, context) {\n      var registrations = allocate(this._registry, eventType);\n      var registration = {\n        context: context,\n        listener: listener,\n        remove: function remove() {\n          registrations.delete(registration);\n        }\n      };\n      registrations.add(registration);\n      return registration;\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(eventType) {\n      var registrations = this._registry[eventType];\n\n      if (registrations != null) {\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        for (var _i = 0, _arr = _toConsumableArray(registrations); _i < _arr.length; _i++) {\n          var registration = _arr[_i];\n          registration.listener.apply(registration.context, args);\n        }\n      }\n    }\n  }, {\n    key: \"removeAllListeners\",\n    value: function removeAllListeners(eventType) {\n      if (eventType == null) {\n        this._registry = {};\n      } else {\n        delete this._registry[eventType];\n      }\n    }\n  }, {\n    key: \"listenerCount\",\n    value: function listenerCount(eventType) {\n      var registrations = this._registry[eventType];\n      return registrations == null ? 0 : registrations.size;\n    }\n  }]);\n\n  return EventEmitter;\n}();\n\nexport { EventEmitter as default };\n\nfunction allocate(registry, eventType) {\n  var registrations = registry[eventType];\n\n  if (registrations == null) {\n    registrations = new Set();\n    registry[eventType] = registrations;\n  }\n\n  return registrations;\n}","map":{"version":3,"names":["EventEmitter","_registry","eventType","listener","context","registrations","allocate","registration","remove","delete","add","args","apply","size","registry","Set"],"sources":["/Users/zagarellagabriele/Desktop/Progetti/React Native/React-Native-Exercises/node_modules/react-native/Libraries/vendor/emitter/EventEmitter.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nexport interface EventSubscription {\n  remove(): void;\n}\n\nexport interface IEventEmitter<TEventToArgsMap: {...}> {\n  addListener<TEvent: $Keys<TEventToArgsMap>>(\n    eventType: TEvent,\n    listener: (...args: $ElementType<TEventToArgsMap, TEvent>) => mixed,\n    context?: mixed,\n  ): EventSubscription;\n\n  emit<TEvent: $Keys<TEventToArgsMap>>(\n    eventType: TEvent,\n    ...args: $ElementType<TEventToArgsMap, TEvent>\n  ): void;\n\n  removeAllListeners<TEvent: $Keys<TEventToArgsMap>>(eventType?: ?TEvent): void;\n\n  listenerCount<TEvent: $Keys<TEventToArgsMap>>(eventType: TEvent): number;\n}\n\ninterface Registration<TArgs> {\n  +context: mixed;\n  +listener: (...args: TArgs) => mixed;\n  +remove: () => void;\n}\n\ntype Registry<TEventToArgsMap: {...}> = $ObjMap<\n  TEventToArgsMap,\n  <TArgs>(TArgs) => Set<Registration<TArgs>>,\n>;\n\n/**\n * EventEmitter manages listeners and publishes events to them.\n *\n * EventEmitter accepts a single type parameter that defines the valid events\n * and associated listener argument(s).\n *\n * @example\n *\n *   const emitter = new EventEmitter<{\n *     success: [number, string],\n *     error: [Error],\n *   }>();\n *\n *   emitter.on('success', (statusCode, responseText) => {...});\n *   emitter.emit('success', 200, '...');\n *\n *   emitter.on('error', error => {...});\n *   emitter.emit('error', new Error('Resource not found'));\n *\n */\nexport default class EventEmitter<TEventToArgsMap: {...}>\n  implements IEventEmitter<TEventToArgsMap>\n{\n  _registry: Registry<TEventToArgsMap> = {};\n\n  /**\n   * Registers a listener that is called when the supplied event is emitted.\n   * Returns a subscription that has a `remove` method to undo registration.\n   */\n  addListener<TEvent: $Keys<TEventToArgsMap>>(\n    eventType: TEvent,\n    listener: (...args: $ElementType<TEventToArgsMap, TEvent>) => mixed,\n    context: mixed,\n  ): EventSubscription {\n    const registrations = allocate(this._registry, eventType);\n    const registration: Registration<$ElementType<TEventToArgsMap, TEvent>> = {\n      context,\n      listener,\n      remove(): void {\n        registrations.delete(registration);\n      },\n    };\n    registrations.add(registration);\n    return registration;\n  }\n\n  /**\n   * Emits the supplied event. Additional arguments supplied to `emit` will be\n   * passed through to each of the registered listeners.\n   *\n   * If a listener modifies the listeners registered for the same event, those\n   * changes will not be reflected in the current invocation of `emit`.\n   */\n  emit<TEvent: $Keys<TEventToArgsMap>>(\n    eventType: TEvent,\n    ...args: $ElementType<TEventToArgsMap, TEvent>\n  ): void {\n    const registrations: ?Set<\n      Registration<$ElementType<TEventToArgsMap, TEvent>>,\n    > = this._registry[eventType];\n    if (registrations != null) {\n      for (const registration of [...registrations]) {\n        registration.listener.apply(registration.context, args);\n      }\n    }\n  }\n\n  /**\n   * Removes all registered listeners.\n   */\n  removeAllListeners<TEvent: $Keys<TEventToArgsMap>>(\n    eventType?: ?TEvent,\n  ): void {\n    if (eventType == null) {\n      this._registry = {};\n    } else {\n      delete this._registry[eventType];\n    }\n  }\n\n  /**\n   * Returns the number of registered listeners for the supplied event.\n   */\n  listenerCount<TEvent: $Keys<TEventToArgsMap>>(eventType: TEvent): number {\n    const registrations: ?Set<Registration<mixed>> = this._registry[eventType];\n    return registrations == null ? 0 : registrations.size;\n  }\n}\n\nfunction allocate<\n  TEventToArgsMap: {...},\n  TEvent: $Keys<TEventToArgsMap>,\n  TEventArgs: $ElementType<TEventToArgsMap, TEvent>,\n>(\n  registry: Registry<TEventToArgsMap>,\n  eventType: TEvent,\n): Set<Registration<TEventArgs>> {\n  let registrations: ?Set<Registration<TEventArgs>> = registry[eventType];\n  if (registrations == null) {\n    registrations = new Set();\n    registry[eventType] = registrations;\n  }\n  return registrations;\n}\n"],"mappings":";;;;IA8DqBA,Y;;;;SAGnBC,S,GAAuC,E;;;;;WAMvC,qBACEC,SADF,EAEEC,QAFF,EAGEC,OAHF,EAIqB;MACnB,IAAMC,aAAa,GAAGC,QAAQ,CAAC,KAAKL,SAAN,EAAiBC,SAAjB,CAA9B;MACA,IAAMK,YAAiE,GAAG;QACxEH,OAAO,EAAPA,OADwE;QAExED,QAAQ,EAARA,QAFwE;QAGxEK,MAHwE,oBAGzD;UACbH,aAAa,CAACI,MAAd,CAAqBF,YAArB;QACD;MALuE,CAA1E;MAOAF,aAAa,CAACK,GAAd,CAAkBH,YAAlB;MACA,OAAOA,YAAP;IACD;;;WASD,cACEL,SADF,EAGQ;MACN,IAAMG,aAEL,GAAG,KAAKJ,SAAL,CAAeC,SAAf,CAFJ;;MAGA,IAAIG,aAAa,IAAI,IAArB,EAA2B;QAAA,kCALxBM,IAKwB;UALxBA,IAKwB;QAAA;;QACzB,2CAA+BN,aAA/B,2BAA+C;UAA1C,IAAME,YAAY,WAAlB;UACHA,YAAY,CAACJ,QAAb,CAAsBS,KAAtB,CAA4BL,YAAY,CAACH,OAAzC,EAAkDO,IAAlD;QACD;MACF;IACF;;;WAKD,4BACET,SADF,EAEQ;MACN,IAAIA,SAAS,IAAI,IAAjB,EAAuB;QACrB,KAAKD,SAAL,GAAiB,EAAjB;MACD,CAFD,MAEO;QACL,OAAO,KAAKA,SAAL,CAAeC,SAAf,CAAP;MACD;IACF;;;WAKD,uBAA8CA,SAA9C,EAAyE;MACvE,IAAMG,aAAwC,GAAG,KAAKJ,SAAL,CAAeC,SAAf,CAAjD;MACA,OAAOG,aAAa,IAAI,IAAjB,GAAwB,CAAxB,GAA4BA,aAAa,CAACQ,IAAjD;IACD;;;;;;SAlEkBb,Y;;AAqErB,SAASM,QAAT,CAKEQ,QALF,EAMEZ,SANF,EAOiC;EAC/B,IAAIG,aAA6C,GAAGS,QAAQ,CAACZ,SAAD,CAA5D;;EACA,IAAIG,aAAa,IAAI,IAArB,EAA2B;IACzBA,aAAa,GAAG,IAAIU,GAAJ,EAAhB;IACAD,QAAQ,CAACZ,SAAD,CAAR,GAAsBG,aAAtB;EACD;;EACD,OAAOA,aAAP;AACD"},"metadata":{},"sourceType":"module"}