{"ast":null,"code":"import NativeFrameRateLogger from \"./NativeFrameRateLogger\";\n\nvar invariant = require('invariant');\n\nvar FrameRateLogger = {\n  setGlobalOptions: function setGlobalOptions(options) {\n    if (options.debug !== undefined) {\n      invariant(NativeFrameRateLogger, 'Trying to debug FrameRateLogger without the native module!');\n    }\n\n    if (NativeFrameRateLogger) {\n      var optionsClone = {\n        debug: !!options.debug,\n        reportStackTraces: !!options.reportStackTraces\n      };\n      NativeFrameRateLogger.setGlobalOptions(optionsClone);\n    }\n  },\n  setContext: function setContext(context) {\n    NativeFrameRateLogger && NativeFrameRateLogger.setContext(context);\n  },\n  beginScroll: function beginScroll() {\n    NativeFrameRateLogger && NativeFrameRateLogger.beginScroll();\n  },\n  endScroll: function endScroll() {\n    NativeFrameRateLogger && NativeFrameRateLogger.endScroll();\n  }\n};\nmodule.exports = FrameRateLogger;","map":{"version":3,"names":["NativeFrameRateLogger","invariant","require","FrameRateLogger","setGlobalOptions","options","debug","undefined","optionsClone","reportStackTraces","setContext","context","beginScroll","endScroll","module","exports"],"sources":["/Users/zagarellagabriele/Desktop/Progetti/React Native/React-Native-Exercises/node_modules/react-native/Libraries/Interaction/FrameRateLogger.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport NativeFrameRateLogger from './NativeFrameRateLogger';\n\nconst invariant = require('invariant');\n\n/**\n * Flow API for native FrameRateLogger module. If the native module is not installed, function calls\n * are just no-ops.\n *\n * Typical behavior is that `setContext` is called when a new screen is loaded (e.g. via a\n * navigation integration), and then `beginScroll` is called by `ScrollResponder` at which point the\n * native module then begins tracking frame drops. When `ScrollResponder` calls `endScroll`, the\n * native module gathers up all it's frame drop data and reports it via an analytics pipeline for\n * analysis.\n *\n * Note that `beginScroll` may be called multiple times by `ScrollResponder` - unclear if that's a\n * bug, but the native module should be robust to that.\n *\n * In the future we may add support for tracking frame drops in other types of interactions beyond\n * scrolling.\n */\nconst FrameRateLogger = {\n  /**\n   * Enable `debug` to see local logs of what's going on. `reportStackTraces` will grab stack traces\n   * during UI thread stalls and upload them if the native module supports it.\n   */\n  setGlobalOptions: function (options: {\n    debug?: boolean,\n    reportStackTraces?: boolean,\n    ...\n  }) {\n    if (options.debug !== undefined) {\n      invariant(\n        NativeFrameRateLogger,\n        'Trying to debug FrameRateLogger without the native module!',\n      );\n    }\n    if (NativeFrameRateLogger) {\n      // Needs to clone the object first to avoid modifying the argument.\n      const optionsClone = {\n        debug: !!options.debug,\n        reportStackTraces: !!options.reportStackTraces,\n      };\n      NativeFrameRateLogger.setGlobalOptions(optionsClone);\n    }\n  },\n\n  /**\n   * Must call `setContext` before any events can be properly tracked, which is done automatically\n   * in `AppRegistry`, but navigation is also a common place to hook in.\n   */\n  setContext: function (context: string) {\n    NativeFrameRateLogger && NativeFrameRateLogger.setContext(context);\n  },\n\n  /**\n   * Called in `ScrollResponder` so any component that uses that module will handle this\n   * automatically.\n   */\n  beginScroll() {\n    NativeFrameRateLogger && NativeFrameRateLogger.beginScroll();\n  },\n\n  /**\n   * Called in `ScrollResponder` so any component that uses that module will handle this\n   * automatically.\n   */\n  endScroll() {\n    NativeFrameRateLogger && NativeFrameRateLogger.endScroll();\n  },\n};\n\nmodule.exports = FrameRateLogger;\n"],"mappings":"AAUA,OAAOA,qBAAP;;AAEA,IAAMC,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAzB;;AAkBA,IAAMC,eAAe,GAAG;EAKtBC,gBAAgB,EAAE,0BAAUC,OAAV,EAIf;IACD,IAAIA,OAAO,CAACC,KAAR,KAAkBC,SAAtB,EAAiC;MAC/BN,SAAS,CACPD,qBADO,EAEP,4DAFO,CAAT;IAID;;IACD,IAAIA,qBAAJ,EAA2B;MAEzB,IAAMQ,YAAY,GAAG;QACnBF,KAAK,EAAE,CAAC,CAACD,OAAO,CAACC,KADE;QAEnBG,iBAAiB,EAAE,CAAC,CAACJ,OAAO,CAACI;MAFV,CAArB;MAIAT,qBAAqB,CAACI,gBAAtB,CAAuCI,YAAvC;IACD;EACF,CAxBqB;EA8BtBE,UAAU,EAAE,oBAAUC,OAAV,EAA2B;IACrCX,qBAAqB,IAAIA,qBAAqB,CAACU,UAAtB,CAAiCC,OAAjC,CAAzB;EACD,CAhCqB;EAsCtBC,WAtCsB,yBAsCR;IACZZ,qBAAqB,IAAIA,qBAAqB,CAACY,WAAtB,EAAzB;EACD,CAxCqB;EA8CtBC,SA9CsB,uBA8CV;IACVb,qBAAqB,IAAIA,qBAAqB,CAACa,SAAtB,EAAzB;EACD;AAhDqB,CAAxB;AAmDAC,MAAM,CAACC,OAAP,GAAiBZ,eAAjB"},"metadata":{},"sourceType":"module"}