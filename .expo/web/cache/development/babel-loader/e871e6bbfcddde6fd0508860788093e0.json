{"ast":null,"code":"import * as React from 'react';\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nexport default function useKeyboardManager(isEnabled) {\n  var previouslyFocusedTextInputRef = React.useRef(undefined);\n  var startTimestampRef = React.useRef(0);\n  var keyboardTimeoutRef = React.useRef();\n  var clearKeyboardTimeout = React.useCallback(function () {\n    if (keyboardTimeoutRef.current !== undefined) {\n      clearTimeout(keyboardTimeoutRef.current);\n      keyboardTimeoutRef.current = undefined;\n    }\n  }, []);\n  var onPageChangeStart = React.useCallback(function () {\n    if (!isEnabled()) {\n      return;\n    }\n\n    clearKeyboardTimeout();\n    var input = TextInput.State.currentlyFocusedInput();\n    input === null || input === void 0 ? void 0 : input.blur();\n    previouslyFocusedTextInputRef.current = input;\n    startTimestampRef.current = Date.now();\n  }, [clearKeyboardTimeout, isEnabled]);\n  var onPageChangeConfirm = React.useCallback(function (force) {\n    if (!isEnabled()) {\n      return;\n    }\n\n    clearKeyboardTimeout();\n\n    if (force) {\n      Keyboard.dismiss();\n    } else {\n      var input = previouslyFocusedTextInputRef.current;\n      input === null || input === void 0 ? void 0 : input.blur();\n    }\n\n    previouslyFocusedTextInputRef.current = undefined;\n  }, [clearKeyboardTimeout, isEnabled]);\n  var onPageChangeCancel = React.useCallback(function () {\n    if (!isEnabled()) {\n      return;\n    }\n\n    clearKeyboardTimeout();\n    var input = previouslyFocusedTextInputRef.current;\n\n    if (input) {\n      if (Date.now() - startTimestampRef.current < 100) {\n        keyboardTimeoutRef.current = setTimeout(function () {\n          input === null || input === void 0 ? void 0 : input.focus();\n          previouslyFocusedTextInputRef.current = undefined;\n        }, 100);\n      } else {\n        input === null || input === void 0 ? void 0 : input.focus();\n        previouslyFocusedTextInputRef.current = undefined;\n      }\n    }\n  }, [clearKeyboardTimeout, isEnabled]);\n  React.useEffect(function () {\n    return function () {\n      return clearKeyboardTimeout();\n    };\n  }, [clearKeyboardTimeout]);\n  return {\n    onPageChangeStart: onPageChangeStart,\n    onPageChangeConfirm: onPageChangeConfirm,\n    onPageChangeCancel: onPageChangeCancel\n  };\n}","map":{"version":3,"sources":["utils/useKeyboardManager.tsx"],"names":["React","useKeyboardManager","isEnabled","previouslyFocusedTextInputRef","useRef","undefined","startTimestampRef","keyboardTimeoutRef","clearKeyboardTimeout","useCallback","current","clearTimeout","onPageChangeStart","input","TextInput","State","currentlyFocusedInput","blur","Date","now","onPageChangeConfirm","force","Keyboard","dismiss","onPageChangeCancel","setTimeout","focus","useEffect"],"mappings":"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","sourceRoot":"../../../src","sourcesContent":["import * as React from 'react';\nimport { Keyboard, TextInput } from 'react-native';\nexport default function useKeyboardManager(isEnabled) {\n  // Numeric id of the previously focused text input\n  // When a gesture didn't change the tab, we can restore the focused input with this\n  const previouslyFocusedTextInputRef = React.useRef(undefined);\n  const startTimestampRef = React.useRef(0);\n  const keyboardTimeoutRef = React.useRef();\n  const clearKeyboardTimeout = React.useCallback(() => {\n    if (keyboardTimeoutRef.current !== undefined) {\n      clearTimeout(keyboardTimeoutRef.current);\n      keyboardTimeoutRef.current = undefined;\n    }\n  }, []);\n  const onPageChangeStart = React.useCallback(() => {\n    if (!isEnabled()) {\n      return;\n    }\n    clearKeyboardTimeout();\n    const input = TextInput.State.currentlyFocusedInput();\n\n    // When a page change begins, blur the currently focused input\n    input === null || input === void 0 ? void 0 : input.blur();\n\n    // Store the id of this input so we can refocus it if change was cancelled\n    previouslyFocusedTextInputRef.current = input;\n\n    // Store timestamp for touch start\n    startTimestampRef.current = Date.now();\n  }, [clearKeyboardTimeout, isEnabled]);\n  const onPageChangeConfirm = React.useCallback(force => {\n    if (!isEnabled()) {\n      return;\n    }\n    clearKeyboardTimeout();\n    if (force) {\n      // Always dismiss input, even if we don't have a ref to it\n      // We might not have the ref if onPageChangeStart was never called\n      // This can happen if page change was not from a gesture\n      Keyboard.dismiss();\n    } else {\n      const input = previouslyFocusedTextInputRef.current;\n\n      // Dismiss the keyboard only if an input was a focused before\n      // This makes sure we don't dismiss input on going back and focusing an input\n      input === null || input === void 0 ? void 0 : input.blur();\n    }\n\n    // Cleanup the ID on successful page change\n    previouslyFocusedTextInputRef.current = undefined;\n  }, [clearKeyboardTimeout, isEnabled]);\n  const onPageChangeCancel = React.useCallback(() => {\n    if (!isEnabled()) {\n      return;\n    }\n    clearKeyboardTimeout();\n\n    // The page didn't change, we should restore the focus of text input\n    const input = previouslyFocusedTextInputRef.current;\n    if (input) {\n      // If the interaction was super short we should make sure keyboard won't hide again.\n\n      // Too fast input refocus will result only in keyboard flashing on screen and hiding right away.\n      // During first ~100ms keyboard will be dismissed no matter what,\n      // so we have to make sure it won't interrupt input refocus logic.\n      // That's why when the interaction is shorter than 100ms we add delay so it won't hide once again.\n      // Subtracting timestamps makes us sure the delay is executed only when needed.\n      if (Date.now() - startTimestampRef.current < 100) {\n        keyboardTimeoutRef.current = setTimeout(() => {\n          input === null || input === void 0 ? void 0 : input.focus();\n          previouslyFocusedTextInputRef.current = undefined;\n        }, 100);\n      } else {\n        input === null || input === void 0 ? void 0 : input.focus();\n        previouslyFocusedTextInputRef.current = undefined;\n      }\n    }\n  }, [clearKeyboardTimeout, isEnabled]);\n  React.useEffect(() => {\n    return () => clearKeyboardTimeout();\n  }, [clearKeyboardTimeout]);\n  return {\n    onPageChangeStart,\n    onPageChangeConfirm,\n    onPageChangeCancel\n  };\n}\n//# sourceMappingURL=useKeyboardManager.js.map"]},"metadata":{},"sourceType":"module"}