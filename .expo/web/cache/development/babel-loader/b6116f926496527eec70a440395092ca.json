{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport NativeUIManager from \"./NativeUIManager\";\n\nvar NativeModules = require(\"../BatchedBridge/NativeModules\");\n\nvar defineLazyObjectProperty = require(\"../Utilities/defineLazyObjectProperty\");\n\nvar Platform = require(\"../Utilities/Platform\");\n\nvar UIManagerProperties = require(\"./UIManagerProperties\");\n\nvar viewManagerConfigs = {};\nvar triedLoadingConfig = new Set();\nvar NativeUIManagerConstants = {};\nvar isNativeUIManagerConstantsSet = false;\n\nfunction _getConstants() {\n  if (!isNativeUIManagerConstantsSet) {\n    NativeUIManagerConstants = NativeUIManager.getConstants();\n    isNativeUIManagerConstantsSet = true;\n  }\n\n  return NativeUIManagerConstants;\n}\n\nfunction _getViewManagerConfig(viewManagerName) {\n  if (viewManagerConfigs[viewManagerName] === undefined && global.nativeCallSyncHook && NativeUIManager.getConstantsForViewManager) {\n    try {\n      viewManagerConfigs[viewManagerName] = NativeUIManager.getConstantsForViewManager(viewManagerName);\n    } catch (e) {\n      console.error(\"NativeUIManager.getConstantsForViewManager('\" + viewManagerName + \"') threw an exception.\", e);\n      viewManagerConfigs[viewManagerName] = null;\n    }\n  }\n\n  var config = viewManagerConfigs[viewManagerName];\n\n  if (config) {\n    return config;\n  }\n\n  if (!global.nativeCallSyncHook) {\n    return config;\n  }\n\n  if (NativeUIManager.lazilyLoadView && !triedLoadingConfig.has(viewManagerName)) {\n    var result = NativeUIManager.lazilyLoadView(viewManagerName);\n    triedLoadingConfig.add(viewManagerName);\n\n    if (result != null && result.viewConfig != null) {\n      _getConstants()[viewManagerName] = result.viewConfig;\n      lazifyViewManagerConfig(viewManagerName);\n    }\n  }\n\n  return viewManagerConfigs[viewManagerName];\n}\n\nvar UIManagerJS = _objectSpread(_objectSpread({}, NativeUIManager), {}, {\n  createView: function createView(reactTag, viewName, rootTag, props) {\n    if (Platform.OS === 'ios' && viewManagerConfigs[viewName] === undefined) {\n      _getViewManagerConfig(viewName);\n    }\n\n    NativeUIManager.createView(reactTag, viewName, rootTag, props);\n  },\n  getConstants: function getConstants() {\n    return _getConstants();\n  },\n  getViewManagerConfig: function getViewManagerConfig(viewManagerName) {\n    return _getViewManagerConfig(viewManagerName);\n  },\n  hasViewManagerConfig: function hasViewManagerConfig(viewManagerName) {\n    return _getViewManagerConfig(viewManagerName) != null;\n  }\n});\n\nNativeUIManager.getViewManagerConfig = UIManagerJS.getViewManagerConfig;\n\nfunction lazifyViewManagerConfig(viewName) {\n  var viewConfig = _getConstants()[viewName];\n\n  viewManagerConfigs[viewName] = viewConfig;\n\n  if (viewConfig.Manager) {\n    defineLazyObjectProperty(viewConfig, 'Constants', {\n      get: function get() {\n        var viewManager = NativeModules[viewConfig.Manager];\n        var constants = {};\n        viewManager && Object.keys(viewManager).forEach(function (key) {\n          var value = viewManager[key];\n\n          if (typeof value !== 'function') {\n            constants[key] = value;\n          }\n        });\n        return constants;\n      }\n    });\n    defineLazyObjectProperty(viewConfig, 'Commands', {\n      get: function get() {\n        var viewManager = NativeModules[viewConfig.Manager];\n        var commands = {};\n        var index = 0;\n        viewManager && Object.keys(viewManager).forEach(function (key) {\n          var value = viewManager[key];\n\n          if (typeof value === 'function') {\n            commands[key] = index++;\n          }\n        });\n        return commands;\n      }\n    });\n  }\n}\n\nif (Platform.OS === 'ios') {\n  Object.keys(_getConstants()).forEach(function (viewName) {\n    lazifyViewManagerConfig(viewName);\n  });\n} else if (_getConstants().ViewManagerNames) {\n  NativeUIManager.getConstants().ViewManagerNames.forEach(function (viewManagerName) {\n    defineLazyObjectProperty(NativeUIManager, viewManagerName, {\n      get: function get() {\n        return NativeUIManager.getConstantsForViewManager(viewManagerName);\n      }\n    });\n  });\n}\n\nif (!global.nativeCallSyncHook) {\n  Object.keys(_getConstants()).forEach(function (viewManagerName) {\n    if (!UIManagerProperties.includes(viewManagerName)) {\n      if (!viewManagerConfigs[viewManagerName]) {\n        viewManagerConfigs[viewManagerName] = _getConstants()[viewManagerName];\n      }\n\n      defineLazyObjectProperty(NativeUIManager, viewManagerName, {\n        get: function get() {\n          console.warn(\"Accessing view manager configs directly off UIManager via UIManager['\" + viewManagerName + \"'] \" + (\"is no longer supported. Use UIManager.getViewManagerConfig('\" + viewManagerName + \"') instead.\"));\n          return UIManagerJS.getViewManagerConfig(viewManagerName);\n        }\n      });\n    }\n  });\n}\n\nmodule.exports = UIManagerJS;","map":{"version":3,"names":["NativeUIManager","NativeModules","require","defineLazyObjectProperty","Platform","UIManagerProperties","viewManagerConfigs","triedLoadingConfig","Set","NativeUIManagerConstants","isNativeUIManagerConstantsSet","getConstants","getViewManagerConfig","viewManagerName","undefined","global","nativeCallSyncHook","getConstantsForViewManager","e","console","error","config","lazilyLoadView","has","result","add","viewConfig","lazifyViewManagerConfig","UIManagerJS","createView","reactTag","viewName","rootTag","props","OS","hasViewManagerConfig","Manager","get","viewManager","constants","Object","keys","forEach","key","value","commands","index","ViewManagerNames","includes","warn","module","exports"],"sources":["/Users/zagarellagabriele/Desktop/Progetti/React Native/React-Native-Exercises/node_modules/react-native/Libraries/ReactNative/PaperUIManager.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\nimport type {RootTag} from '../Types/RootTagTypes';\n\nimport NativeUIManager from './NativeUIManager';\n\nconst NativeModules = require('../BatchedBridge/NativeModules');\nconst defineLazyObjectProperty = require('../Utilities/defineLazyObjectProperty');\nconst Platform = require('../Utilities/Platform');\nconst UIManagerProperties = require('./UIManagerProperties');\n\nconst viewManagerConfigs: {[string]: any | null} = {};\n\nconst triedLoadingConfig = new Set<string>();\n\nlet NativeUIManagerConstants = {};\nlet isNativeUIManagerConstantsSet = false;\nfunction getConstants(): Object {\n  if (!isNativeUIManagerConstantsSet) {\n    NativeUIManagerConstants = NativeUIManager.getConstants();\n    isNativeUIManagerConstantsSet = true;\n  }\n  return NativeUIManagerConstants;\n}\n\nfunction getViewManagerConfig(viewManagerName: string): any {\n  if (\n    viewManagerConfigs[viewManagerName] === undefined &&\n    global.nativeCallSyncHook && // If we're in the Chrome Debugger, let's not even try calling the sync method\n    NativeUIManager.getConstantsForViewManager\n  ) {\n    try {\n      viewManagerConfigs[viewManagerName] =\n        NativeUIManager.getConstantsForViewManager(viewManagerName);\n    } catch (e) {\n      console.error(\n        \"NativeUIManager.getConstantsForViewManager('\" +\n          viewManagerName +\n          \"') threw an exception.\",\n        e,\n      );\n      viewManagerConfigs[viewManagerName] = null;\n    }\n  }\n\n  const config = viewManagerConfigs[viewManagerName];\n  if (config) {\n    return config;\n  }\n\n  // If we're in the Chrome Debugger, let's not even try calling the sync\n  // method.\n  if (!global.nativeCallSyncHook) {\n    return config;\n  }\n\n  if (\n    NativeUIManager.lazilyLoadView &&\n    !triedLoadingConfig.has(viewManagerName)\n  ) {\n    const result = NativeUIManager.lazilyLoadView(viewManagerName);\n    triedLoadingConfig.add(viewManagerName);\n    if (result != null && result.viewConfig != null) {\n      getConstants()[viewManagerName] = result.viewConfig;\n      lazifyViewManagerConfig(viewManagerName);\n    }\n  }\n\n  return viewManagerConfigs[viewManagerName];\n}\n\n/* $FlowFixMe[cannot-spread-interface] (>=0.123.0 site=react_native_fb) This\n * comment suppresses an error found when Flow v0.123.0 was deployed. To see\n * the error, delete this comment and run Flow. */\nconst UIManagerJS = {\n  ...NativeUIManager,\n  createView(\n    reactTag: ?number,\n    viewName: string,\n    rootTag: RootTag,\n    props: Object,\n  ): void {\n    if (Platform.OS === 'ios' && viewManagerConfigs[viewName] === undefined) {\n      // This is necessary to force the initialization of native viewManager\n      // classes in iOS when using static ViewConfigs\n      getViewManagerConfig(viewName);\n    }\n\n    NativeUIManager.createView(reactTag, viewName, rootTag, props);\n  },\n  getConstants(): Object {\n    return getConstants();\n  },\n  getViewManagerConfig(viewManagerName: string): any {\n    return getViewManagerConfig(viewManagerName);\n  },\n  hasViewManagerConfig(viewManagerName: string): boolean {\n    return getViewManagerConfig(viewManagerName) != null;\n  },\n};\n\n// TODO (T45220498): Remove this.\n// 3rd party libs may be calling `NativeModules.UIManager.getViewManagerConfig()`\n// instead of `UIManager.getViewManagerConfig()` off UIManager.js.\n// This is a workaround for now.\n// $FlowFixMe[prop-missing]\nNativeUIManager.getViewManagerConfig = UIManagerJS.getViewManagerConfig;\n\nfunction lazifyViewManagerConfig(viewName: string) {\n  const viewConfig = getConstants()[viewName];\n  viewManagerConfigs[viewName] = viewConfig;\n  if (viewConfig.Manager) {\n    defineLazyObjectProperty(viewConfig, 'Constants', {\n      get: () => {\n        const viewManager = NativeModules[viewConfig.Manager];\n        const constants: {[string]: mixed} = {};\n        viewManager &&\n          Object.keys(viewManager).forEach(key => {\n            const value = viewManager[key];\n            if (typeof value !== 'function') {\n              constants[key] = value;\n            }\n          });\n        return constants;\n      },\n    });\n    defineLazyObjectProperty(viewConfig, 'Commands', {\n      get: () => {\n        const viewManager = NativeModules[viewConfig.Manager];\n        const commands: {[string]: number} = {};\n        let index = 0;\n        viewManager &&\n          Object.keys(viewManager).forEach(key => {\n            const value = viewManager[key];\n            if (typeof value === 'function') {\n              commands[key] = index++;\n            }\n          });\n        return commands;\n      },\n    });\n  }\n}\n\n/**\n * Copies the ViewManager constants and commands into UIManager. This is\n * only needed for iOS, which puts the constants in the ViewManager\n * namespace instead of UIManager, unlike Android.\n */\nif (Platform.OS === 'ios') {\n  Object.keys(getConstants()).forEach(viewName => {\n    lazifyViewManagerConfig(viewName);\n  });\n} else if (getConstants().ViewManagerNames) {\n  NativeUIManager.getConstants().ViewManagerNames.forEach(viewManagerName => {\n    defineLazyObjectProperty(NativeUIManager, viewManagerName, {\n      get: () => NativeUIManager.getConstantsForViewManager(viewManagerName),\n    });\n  });\n}\n\nif (!global.nativeCallSyncHook) {\n  Object.keys(getConstants()).forEach(viewManagerName => {\n    if (!UIManagerProperties.includes(viewManagerName)) {\n      if (!viewManagerConfigs[viewManagerName]) {\n        viewManagerConfigs[viewManagerName] = getConstants()[viewManagerName];\n      }\n      defineLazyObjectProperty(NativeUIManager, viewManagerName, {\n        get: () => {\n          console.warn(\n            `Accessing view manager configs directly off UIManager via UIManager['${viewManagerName}'] ` +\n              `is no longer supported. Use UIManager.getViewManagerConfig('${viewManagerName}') instead.`,\n          );\n\n          return UIManagerJS.getViewManagerConfig(viewManagerName);\n        },\n      });\n    }\n  });\n}\n\nmodule.exports = UIManagerJS;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}