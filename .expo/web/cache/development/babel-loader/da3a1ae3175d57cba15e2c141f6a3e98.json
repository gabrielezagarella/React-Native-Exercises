{"ast":null,"code":"import _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"enabled\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { State } from \"../../State\";\nimport { DEFAULT_TOUCH_SLOP } from \"../constants\";\nimport GestureHandler from \"./GestureHandler\";\nimport ScaleGestureDetector from \"../detectors/ScaleGestureDetector\";\n\nvar PinchGestureHandler = function (_GestureHandler) {\n  _inherits(PinchGestureHandler, _GestureHandler);\n\n  var _super = _createSuper(PinchGestureHandler);\n\n  function PinchGestureHandler() {\n    var _this;\n\n    _classCallCheck(this, PinchGestureHandler);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"scale\", 1);\n\n    _defineProperty(_assertThisInitialized(_this), \"velocity\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"startingSpan\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"spanSlop\", DEFAULT_TOUCH_SLOP);\n\n    _defineProperty(_assertThisInitialized(_this), \"scaleDetectorListener\", {\n      onScaleBegin: function onScaleBegin(detector) {\n        _this.startingSpan = detector.getCurrentSpan();\n        return true;\n      },\n      onScale: function onScale(detector) {\n        var prevScaleFactor = _this.scale;\n        _this.scale *= detector.getScaleFactor(_this.tracker.getTrackedPointersCount());\n        var delta = detector.getTimeDelta();\n\n        if (delta > 0) {\n          _this.velocity = (_this.scale - prevScaleFactor) / delta;\n        }\n\n        if (Math.abs(_this.startingSpan - detector.getCurrentSpan()) >= _this.spanSlop && _this.currentState === State.BEGAN) {\n          _this.activate();\n        }\n\n        return true;\n      },\n      onScaleEnd: function onScaleEnd(_detector) {}\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"scaleGestureDetector\", new ScaleGestureDetector(_this.scaleDetectorListener));\n\n    return _this;\n  }\n\n  _createClass(PinchGestureHandler, [{\n    key: \"init\",\n    value: function init(ref, propsRef) {\n      _get(_getPrototypeOf(PinchGestureHandler.prototype), \"init\", this).call(this, ref, propsRef);\n\n      this.setShouldCancelWhenOutside(false);\n    }\n  }, {\n    key: \"updateGestureConfig\",\n    value: function updateGestureConfig(_ref) {\n      var _ref$enabled = _ref.enabled,\n          enabled = _ref$enabled === void 0 ? true : _ref$enabled,\n          props = _objectWithoutProperties(_ref, _excluded);\n\n      _get(_getPrototypeOf(PinchGestureHandler.prototype), \"updateGestureConfig\", this).call(this, _objectSpread({\n        enabled: enabled\n      }, props));\n    }\n  }, {\n    key: \"transformNativeEvent\",\n    value: function transformNativeEvent() {\n      return {\n        focalX: this.scaleGestureDetector.getFocusX(),\n        focalY: this.scaleGestureDetector.getFocusY(),\n        velocity: this.velocity,\n        scale: this.scale\n      };\n    }\n  }, {\n    key: \"onPointerDown\",\n    value: function onPointerDown(event) {\n      this.tracker.addToTracker(event);\n\n      _get(_getPrototypeOf(PinchGestureHandler.prototype), \"onPointerDown\", this).call(this, event);\n    }\n  }, {\n    key: \"onPointerAdd\",\n    value: function onPointerAdd(event) {\n      this.tracker.addToTracker(event);\n\n      _get(_getPrototypeOf(PinchGestureHandler.prototype), \"onPointerAdd\", this).call(this, event);\n\n      this.tryBegin();\n      this.scaleGestureDetector.onTouchEvent(event, this.tracker);\n    }\n  }, {\n    key: \"onPointerUp\",\n    value: function onPointerUp(event) {\n      _get(_getPrototypeOf(PinchGestureHandler.prototype), \"onPointerUp\", this).call(this, event);\n\n      this.tracker.removeFromTracker(event.pointerId);\n\n      if (this.currentState !== State.ACTIVE) {\n        return;\n      }\n\n      this.scaleGestureDetector.onTouchEvent(event, this.tracker);\n\n      if (this.currentState === State.ACTIVE) {\n        this.end();\n      } else {\n        this.fail();\n      }\n    }\n  }, {\n    key: \"onPointerRemove\",\n    value: function onPointerRemove(event) {\n      _get(_getPrototypeOf(PinchGestureHandler.prototype), \"onPointerRemove\", this).call(this, event);\n\n      this.scaleGestureDetector.onTouchEvent(event, this.tracker);\n      this.tracker.removeFromTracker(event.pointerId);\n\n      if (this.currentState === State.ACTIVE && this.tracker.getTrackedPointersCount() < 2) {\n        this.end();\n      }\n    }\n  }, {\n    key: \"onPointerMove\",\n    value: function onPointerMove(event) {\n      if (this.tracker.getTrackedPointersCount() < 2) {\n        return;\n      }\n\n      this.tracker.track(event);\n      this.scaleGestureDetector.onTouchEvent(event, this.tracker);\n\n      _get(_getPrototypeOf(PinchGestureHandler.prototype), \"onPointerMove\", this).call(this, event);\n    }\n  }, {\n    key: \"onPointerOutOfBounds\",\n    value: function onPointerOutOfBounds(event) {\n      if (this.tracker.getTrackedPointersCount() < 2) {\n        return;\n      }\n\n      this.tracker.track(event);\n      this.scaleGestureDetector.onTouchEvent(event, this.tracker);\n\n      _get(_getPrototypeOf(PinchGestureHandler.prototype), \"onPointerOutOfBounds\", this).call(this, event);\n    }\n  }, {\n    key: \"onPointerCancel\",\n    value: function onPointerCancel(event) {\n      _get(_getPrototypeOf(PinchGestureHandler.prototype), \"onPointerCancel\", this).call(this, event);\n\n      this.reset();\n    }\n  }, {\n    key: \"tryBegin\",\n    value: function tryBegin() {\n      if (this.currentState !== State.UNDETERMINED) {\n        return;\n      }\n\n      this.resetProgress();\n      this.begin();\n    }\n  }, {\n    key: \"activate\",\n    value: function activate(force) {\n      if (this.currentState !== State.ACTIVE) {\n        this.resetProgress();\n      }\n\n      _get(_getPrototypeOf(PinchGestureHandler.prototype), \"activate\", this).call(this, force);\n    }\n  }, {\n    key: \"onReset\",\n    value: function onReset() {\n      this.resetProgress();\n    }\n  }, {\n    key: \"resetProgress\",\n    value: function resetProgress() {\n      if (this.currentState === State.ACTIVE) {\n        return;\n      }\n\n      this.velocity = 0;\n      this.scale = 1;\n    }\n  }]);\n\n  return PinchGestureHandler;\n}(GestureHandler);\n\nexport { PinchGestureHandler as default };","map":{"version":3,"sources":["PinchGestureHandler.ts"],"names":["onScaleBegin","detector","onScale","prevScaleFactor","delta","Math","State","onScaleEnd","_detector","init","updateGestureConfig","enabled","props","transformNativeEvent","focalX","focalY","velocity","scale","onPointerDown","onPointerAdd","onPointerUp","event","onPointerRemove","onPointerMove","onPointerOutOfBounds","onPointerCancel","tryBegin","activate","onReset","resetProgress"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,KAAA;AACA,SAAA,kBAAA;AAGA,OAAA,cAAA;AACA,OAAA,oBAAA;;IAIe,mB;;;;;EAAiD,+BAAA;IAAA;;IAAA;;IAAA,kCAAA,IAAA;MAAA,IAAA;IAAA;;IAAA,gDAAA,IAAA;;IAAA,eAAA,gCAAA,OAAA,EAAA,CAAA,CAAA;;IAAA,eAAA,gCAAA,UAAA,EAAA,CAAA,CAAA;;IAAA,eAAA,gCAAA,cAAA,EAAA,CAAA,CAAA;;IAAA,eAAA,gCAAA,UAAA,EAAA,kBAAA,CAAA;;IAAA,eAAA,gCAAA,uBAAA,EAOR;MACpDA,YAAY,EAAGC,sBAAAA,QAAD,EAA6C;QACzD,MAAA,YAAA,GAAoBA,QAAQ,CAA5B,cAAoBA,EAApB;QACA,OAAA,IAAA;MAHkD,CAAA;MAKpDC,OAAO,EAAGD,iBAAAA,QAAD,EAA6C;QACpD,IAAME,eAAuB,GAAG,MAAhC,KAAA;QACA,MAAA,KAAA,IAAcF,QAAQ,CAARA,cAAAA,CACZ,MAAA,OAAA,CADF,uBACE,EADYA,CAAd;QAIA,IAAMG,KAAK,GAAGH,QAAQ,CAAtB,YAAcA,EAAd;;QACA,IAAIG,KAAK,GAAT,CAAA,EAAe;UACb,MAAA,QAAA,GAAgB,CAAC,MAAA,KAAA,GAAD,eAAA,IAAhB,KAAA;QACD;;QAED,IACEC,IAAI,CAAJA,GAAAA,CAAS,MAAA,YAAA,GAAoBJ,QAAQ,CAArCI,cAA6BJ,EAA7BI,KACE,MADFA,QAAAA,IAEA,MAAA,YAAA,KAAsBC,KAAK,CAH7B,KAAA,EAIE;UACA,MAAA,QAAA;QACD;;QACD,OAAA,IAAA;MAvBkD,CAAA;MAyBpDC,UAAU,EACRC,oBAAAA,SADU,EAGD,CAAE;IA5BuC,CAPQ,CAAA;;IAAA,eAAA,gCAAA,sBAAA,EAsCT,IAAA,oBAAA,CACnD,MAvC4D,qBAsCT,CAtCS,CAAA;;IAAA;EAAA;;;;WA0CvDC,cAAI,GAAJA,EAAI,QAAJA,EAAsD;MAC3D,8EAAA,GAAA,EAAA,QAAA;;MAEA,KAAA,0BAAA,CAAA,KAAA;IACD;;;WAEMC,mCAAgE;MAAA,wBAA1CC,OAA0C;MAAA,IAA1CA,OAA0C,6BAA5C,IAA4C;MAAA,IAAvBC,KAAuB;;MACrE;QAA4BD,OAAO,EAAT;MAA1B,GAAiDC,KAAjD;IACD;;;WAESC,gCAAuB;MAC/B,OAAO;QACLC,MAAM,EAAE,KAAA,oBAAA,CADH,SACG,EADH;QAELC,MAAM,EAAE,KAAA,oBAAA,CAFH,SAEG,EAFH;QAGLC,QAAQ,EAAE,KAHL,QAAA;QAILC,KAAK,EAAE,KAAKA;MAJP,CAAP;IAMD;;;WAESC,uBAAa,KAAbA,EAAyC;MACjD,KAAA,OAAA,CAAA,YAAA,CAAA,KAAA;;MACA,uFAAA,KAAA;IACD;;;WAESC,sBAAY,KAAZA,EAAwC;MAChD,KAAA,OAAA,CAAA,YAAA,CAAA,KAAA;;MACA,sFAAA,KAAA;;MACA,KAAA,QAAA;MACA,KAAA,oBAAA,CAAA,YAAA,CAAA,KAAA,EAA8C,KAA9C,OAAA;IACD;;;WAESC,qBAAW,KAAXA,EAAuC;MAC/C,qFAAA,KAAA;;MACA,KAAA,OAAA,CAAA,iBAAA,CAA+BC,KAAK,CAApC,SAAA;;MACA,IAAI,KAAA,YAAA,KAAsBf,KAAK,CAA/B,MAAA,EAAwC;QACtC;MACD;;MACD,KAAA,oBAAA,CAAA,YAAA,CAAA,KAAA,EAA8C,KAA9C,OAAA;;MAEA,IAAI,KAAA,YAAA,KAAsBA,KAAK,CAA/B,MAAA,EAAwC;QACtC,KAAA,GAAA;MADF,CAAA,MAEO;QACL,KAAA,IAAA;MACD;IACF;;;WAESgB,yBAAe,KAAfA,EAA2C;MACnD,yFAAA,KAAA;;MACA,KAAA,oBAAA,CAAA,YAAA,CAAA,KAAA,EAA8C,KAA9C,OAAA;MACA,KAAA,OAAA,CAAA,iBAAA,CAA+BD,KAAK,CAApC,SAAA;;MAEA,IACE,KAAA,YAAA,KAAsBf,KAAK,CAA3B,MAAA,IACA,KAAA,OAAA,CAAA,uBAAA,KAFF,CAAA,EAGE;QACA,KAAA,GAAA;MACD;IACF;;;WAESiB,uBAAa,KAAbA,EAAyC;MACjD,IAAI,KAAA,OAAA,CAAA,uBAAA,KAAJ,CAAA,EAAgD;QAC9C;MACD;;MACD,KAAA,OAAA,CAAA,KAAA,CAAA,KAAA;MAEA,KAAA,oBAAA,CAAA,YAAA,CAAA,KAAA,EAA8C,KAA9C,OAAA;;MACA,uFAAA,KAAA;IACD;;;WACSC,8BAAoB,KAApBA,EAAgD;MACxD,IAAI,KAAA,OAAA,CAAA,uBAAA,KAAJ,CAAA,EAAgD;QAC9C;MACD;;MACD,KAAA,OAAA,CAAA,KAAA,CAAA,KAAA;MAEA,KAAA,oBAAA,CAAA,YAAA,CAAA,KAAA,EAA8C,KAA9C,OAAA;;MACA,8FAAA,KAAA;IACD;;;WAESC,yBAAe,KAAfA,EAA2C;MACnD,yFAAA,KAAA;;MACA,KAAA,KAAA;IACD;;;WAEOC,oBAAiB;MACvB,IAAI,KAAA,YAAA,KAAsBpB,KAAK,CAA/B,YAAA,EAA8C;QAC5C;MACD;;MAED,KAAA,aAAA;MACA,KAAA,KAAA;IACD;;;WAEMqB,kBAAQ,KAARA,EAAgC;MACrC,IAAI,KAAA,YAAA,KAAsBrB,KAAK,CAA/B,MAAA,EAAwC;QACtC,KAAA,aAAA;MACD;;MAED,kFAAA,KAAA;IACD;;;WAESsB,mBAAgB;MACxB,KAAA,aAAA;IACD;;;WAESC,yBAAsB;MAC9B,IAAI,KAAA,YAAA,KAAsBvB,KAAK,CAA/B,MAAA,EAAwC;QACtC;MACD;;MACD,KAAA,QAAA,GAAA,CAAA;MACA,KAAA,KAAA,GAAA,CAAA;IACD;;;;EAxJY,c;;SAAA,mB","sourcesContent":["import { State } from '../../State';\nimport { DEFAULT_TOUCH_SLOP } from '../constants';\nimport { AdaptedEvent, Config } from '../interfaces';\n\nimport GestureHandler from './GestureHandler';\nimport ScaleGestureDetector, {\n  ScaleGestureListener,\n} from '../detectors/ScaleGestureDetector';\n\nexport default class PinchGestureHandler extends GestureHandler {\n  private scale = 1;\n  private velocity = 0;\n\n  private startingSpan = 0;\n  private spanSlop = DEFAULT_TOUCH_SLOP;\n\n  private scaleDetectorListener: ScaleGestureListener = {\n    onScaleBegin: (detector: ScaleGestureDetector): boolean => {\n      this.startingSpan = detector.getCurrentSpan();\n      return true;\n    },\n    onScale: (detector: ScaleGestureDetector): boolean => {\n      const prevScaleFactor: number = this.scale;\n      this.scale *= detector.getScaleFactor(\n        this.tracker.getTrackedPointersCount()\n      );\n\n      const delta = detector.getTimeDelta();\n      if (delta > 0) {\n        this.velocity = (this.scale - prevScaleFactor) / delta;\n      }\n\n      if (\n        Math.abs(this.startingSpan - detector.getCurrentSpan()) >=\n          this.spanSlop &&\n        this.currentState === State.BEGAN\n      ) {\n        this.activate();\n      }\n      return true;\n    },\n    onScaleEnd: (\n      _detector: ScaleGestureDetector\n      // eslint-disable-next-line @typescript-eslint/no-empty-function\n    ): void => {},\n  };\n\n  private scaleGestureDetector: ScaleGestureDetector = new ScaleGestureDetector(\n    this.scaleDetectorListener\n  );\n\n  public init(ref: number, propsRef: React.RefObject<unknown>) {\n    super.init(ref, propsRef);\n\n    this.setShouldCancelWhenOutside(false);\n  }\n\n  public updateGestureConfig({ enabled = true, ...props }: Config): void {\n    super.updateGestureConfig({ enabled: enabled, ...props });\n  }\n\n  protected transformNativeEvent() {\n    return {\n      focalX: this.scaleGestureDetector.getFocusX(),\n      focalY: this.scaleGestureDetector.getFocusY(),\n      velocity: this.velocity,\n      scale: this.scale,\n    };\n  }\n\n  protected onPointerDown(event: AdaptedEvent): void {\n    this.tracker.addToTracker(event);\n    super.onPointerDown(event);\n  }\n\n  protected onPointerAdd(event: AdaptedEvent): void {\n    this.tracker.addToTracker(event);\n    super.onPointerAdd(event);\n    this.tryBegin();\n    this.scaleGestureDetector.onTouchEvent(event, this.tracker);\n  }\n\n  protected onPointerUp(event: AdaptedEvent): void {\n    super.onPointerUp(event);\n    this.tracker.removeFromTracker(event.pointerId);\n    if (this.currentState !== State.ACTIVE) {\n      return;\n    }\n    this.scaleGestureDetector.onTouchEvent(event, this.tracker);\n\n    if (this.currentState === State.ACTIVE) {\n      this.end();\n    } else {\n      this.fail();\n    }\n  }\n\n  protected onPointerRemove(event: AdaptedEvent): void {\n    super.onPointerRemove(event);\n    this.scaleGestureDetector.onTouchEvent(event, this.tracker);\n    this.tracker.removeFromTracker(event.pointerId);\n\n    if (\n      this.currentState === State.ACTIVE &&\n      this.tracker.getTrackedPointersCount() < 2\n    ) {\n      this.end();\n    }\n  }\n\n  protected onPointerMove(event: AdaptedEvent): void {\n    if (this.tracker.getTrackedPointersCount() < 2) {\n      return;\n    }\n    this.tracker.track(event);\n\n    this.scaleGestureDetector.onTouchEvent(event, this.tracker);\n    super.onPointerMove(event);\n  }\n  protected onPointerOutOfBounds(event: AdaptedEvent): void {\n    if (this.tracker.getTrackedPointersCount() < 2) {\n      return;\n    }\n    this.tracker.track(event);\n\n    this.scaleGestureDetector.onTouchEvent(event, this.tracker);\n    super.onPointerOutOfBounds(event);\n  }\n\n  protected onPointerCancel(event: AdaptedEvent): void {\n    super.onPointerCancel(event);\n    this.reset();\n  }\n\n  private tryBegin(): void {\n    if (this.currentState !== State.UNDETERMINED) {\n      return;\n    }\n\n    this.resetProgress();\n    this.begin();\n  }\n\n  public activate(force?: boolean): void {\n    if (this.currentState !== State.ACTIVE) {\n      this.resetProgress();\n    }\n\n    super.activate(force);\n  }\n\n  protected onReset(): void {\n    this.resetProgress();\n  }\n\n  protected resetProgress(): void {\n    if (this.currentState === State.ACTIVE) {\n      return;\n    }\n    this.velocity = 0;\n    this.scale = 1;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}