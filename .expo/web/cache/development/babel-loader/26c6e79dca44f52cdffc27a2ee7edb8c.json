{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"numColumns\", \"columnWrapperStyle\", \"removeClippedSubviews\", \"strictMode\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport VirtualizedList from \"./VirtualizedList\";\nimport { keyExtractor as defaultKeyExtractor } from \"./VirtualizeUtils\";\nimport memoizeOne from 'memoize-one';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar View = require(\"../Components/View/View\");\n\nvar StyleSheet = require(\"../StyleSheet/StyleSheet\");\n\nvar deepDiffer = require(\"../Utilities/differ/deepDiffer\");\n\nvar Platform = require(\"../Utilities/Platform\");\n\nvar invariant = require('invariant');\n\nvar React = require('react');\n\nfunction removeClippedSubviewsOrDefault(removeClippedSubviews) {\n  return removeClippedSubviews != null ? removeClippedSubviews : Platform.OS === 'android';\n}\n\nfunction numColumnsOrDefault(numColumns) {\n  return numColumns != null ? numColumns : 1;\n}\n\nvar FlatList = function (_React$PureComponent) {\n  _inherits(FlatList, _React$PureComponent);\n\n  var _super = _createSuper(FlatList);\n\n  function FlatList(_props) {\n    var _this;\n\n    _classCallCheck(this, FlatList);\n\n    _this = _super.call(this, _props);\n    _this._virtualizedListPairs = [];\n\n    _this._captureRef = function (ref) {\n      _this._listRef = ref;\n    };\n\n    _this._getItem = function (data, index) {\n      var numColumns = numColumnsOrDefault(_this.props.numColumns);\n\n      if (numColumns > 1) {\n        var ret = [];\n\n        for (var kk = 0; kk < numColumns; kk++) {\n          var itemIndex = index * numColumns + kk;\n\n          if (itemIndex < data.length) {\n            var _item = data[itemIndex];\n            ret.push(_item);\n          }\n        }\n\n        return ret;\n      } else {\n        return data[index];\n      }\n    };\n\n    _this._getItemCount = function (data) {\n      if (Array.isArray(data)) {\n        var numColumns = numColumnsOrDefault(_this.props.numColumns);\n        return numColumns > 1 ? Math.ceil(data.length / numColumns) : data.length;\n      } else {\n        return 0;\n      }\n    };\n\n    _this._keyExtractor = function (items, index) {\n      var _this$props$keyExtrac;\n\n      var numColumns = numColumnsOrDefault(_this.props.numColumns);\n      var keyExtractor = (_this$props$keyExtrac = _this.props.keyExtractor) != null ? _this$props$keyExtrac : defaultKeyExtractor;\n\n      if (numColumns > 1) {\n        invariant(Array.isArray(items), 'FlatList: Encountered internal consistency error, expected each item to consist of an ' + 'array with 1-%s columns; instead, received a single item.', numColumns);\n        return items.map(function (item, kk) {\n          return keyExtractor(item, index * numColumns + kk);\n        }).join(':');\n      }\n\n      return keyExtractor(items, index);\n    };\n\n    _this._renderer = function (ListItemComponent, renderItem, columnWrapperStyle, numColumns, extraData) {\n      var cols = numColumnsOrDefault(numColumns);\n\n      var render = function render(props) {\n        if (ListItemComponent) {\n          return _jsx(ListItemComponent, _objectSpread({}, props));\n        } else if (renderItem) {\n          return renderItem(props);\n        } else {\n          return null;\n        }\n      };\n\n      var renderProp = function renderProp(info) {\n        if (cols > 1) {\n          var _item2 = info.item,\n              _index = info.index;\n          invariant(Array.isArray(_item2), 'Expected array of items with numColumns > 1');\n          return _jsx(View, {\n            style: StyleSheet.compose(styles.row, columnWrapperStyle),\n            children: _item2.map(function (it, kk) {\n              var element = render({\n                item: it,\n                index: _index * cols + kk,\n                separators: info.separators\n              });\n              return element != null ? _jsx(React.Fragment, {\n                children: element\n              }, kk) : null;\n            })\n          });\n        } else {\n          return render(info);\n        }\n      };\n\n      return ListItemComponent ? {\n        ListItemComponent: renderProp\n      } : {\n        renderItem: renderProp\n      };\n    };\n\n    _this._memoizedRenderer = memoizeOne(_this._renderer);\n\n    _this._checkProps(_this.props);\n\n    if (_this.props.viewabilityConfigCallbackPairs) {\n      _this._virtualizedListPairs = _this.props.viewabilityConfigCallbackPairs.map(function (pair) {\n        return {\n          viewabilityConfig: pair.viewabilityConfig,\n          onViewableItemsChanged: _this._createOnViewableItemsChanged(pair.onViewableItemsChanged)\n        };\n      });\n    } else if (_this.props.onViewableItemsChanged) {\n      _this._virtualizedListPairs.push({\n        viewabilityConfig: _this.props.viewabilityConfig,\n        onViewableItemsChanged: _this._createOnViewableItemsChanged(_this.props.onViewableItemsChanged)\n      });\n    }\n\n    return _this;\n  }\n\n  _createClass(FlatList, [{\n    key: \"scrollToEnd\",\n    value: function scrollToEnd(params) {\n      if (this._listRef) {\n        this._listRef.scrollToEnd(params);\n      }\n    }\n  }, {\n    key: \"scrollToIndex\",\n    value: function scrollToIndex(params) {\n      if (this._listRef) {\n        this._listRef.scrollToIndex(params);\n      }\n    }\n  }, {\n    key: \"scrollToItem\",\n    value: function scrollToItem(params) {\n      if (this._listRef) {\n        this._listRef.scrollToItem(params);\n      }\n    }\n  }, {\n    key: \"scrollToOffset\",\n    value: function scrollToOffset(params) {\n      if (this._listRef) {\n        this._listRef.scrollToOffset(params);\n      }\n    }\n  }, {\n    key: \"recordInteraction\",\n    value: function recordInteraction() {\n      if (this._listRef) {\n        this._listRef.recordInteraction();\n      }\n    }\n  }, {\n    key: \"flashScrollIndicators\",\n    value: function flashScrollIndicators() {\n      if (this._listRef) {\n        this._listRef.flashScrollIndicators();\n      }\n    }\n  }, {\n    key: \"getScrollResponder\",\n    value: function getScrollResponder() {\n      if (this._listRef) {\n        return this._listRef.getScrollResponder();\n      }\n    }\n  }, {\n    key: \"getNativeScrollRef\",\n    value: function getNativeScrollRef() {\n      if (this._listRef) {\n        return this._listRef.getScrollRef();\n      }\n    }\n  }, {\n    key: \"getScrollableNode\",\n    value: function getScrollableNode() {\n      if (this._listRef) {\n        return this._listRef.getScrollableNode();\n      }\n    }\n  }, {\n    key: \"setNativeProps\",\n    value: function setNativeProps(props) {\n      if (this._listRef) {\n        this._listRef.setNativeProps(props);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      invariant(prevProps.numColumns === this.props.numColumns, 'Changing numColumns on the fly is not supported. Change the key prop on FlatList when ' + 'changing the number of columns to force a fresh render of the component.');\n      invariant(prevProps.onViewableItemsChanged === this.props.onViewableItemsChanged, 'Changing onViewableItemsChanged on the fly is not supported');\n      invariant(!deepDiffer(prevProps.viewabilityConfig, this.props.viewabilityConfig), 'Changing viewabilityConfig on the fly is not supported');\n      invariant(prevProps.viewabilityConfigCallbackPairs === this.props.viewabilityConfigCallbackPairs, 'Changing viewabilityConfigCallbackPairs on the fly is not supported');\n\n      this._checkProps(this.props);\n    }\n  }, {\n    key: \"_checkProps\",\n    value: function _checkProps(props) {\n      var getItem = props.getItem,\n          getItemCount = props.getItemCount,\n          horizontal = props.horizontal,\n          columnWrapperStyle = props.columnWrapperStyle,\n          onViewableItemsChanged = props.onViewableItemsChanged,\n          viewabilityConfigCallbackPairs = props.viewabilityConfigCallbackPairs;\n      var numColumns = numColumnsOrDefault(this.props.numColumns);\n      invariant(!getItem && !getItemCount, 'FlatList does not support custom data formats.');\n\n      if (numColumns > 1) {\n        invariant(!horizontal, 'numColumns does not support horizontal.');\n      } else {\n        invariant(!columnWrapperStyle, 'columnWrapperStyle not supported for single column lists');\n      }\n\n      invariant(!(onViewableItemsChanged && viewabilityConfigCallbackPairs), 'FlatList does not support setting both onViewableItemsChanged and ' + 'viewabilityConfigCallbackPairs.');\n    }\n  }, {\n    key: \"_pushMultiColumnViewable\",\n    value: function _pushMultiColumnViewable(arr, v) {\n      var _this$props$keyExtrac2;\n\n      var numColumns = numColumnsOrDefault(this.props.numColumns);\n      var keyExtractor = (_this$props$keyExtrac2 = this.props.keyExtractor) != null ? _this$props$keyExtrac2 : defaultKeyExtractor;\n      v.item.forEach(function (item, ii) {\n        invariant(v.index != null, 'Missing index!');\n        var index = v.index * numColumns + ii;\n        arr.push(_objectSpread(_objectSpread({}, v), {}, {\n          item: item,\n          key: keyExtractor(item, index),\n          index: index\n        }));\n      });\n    }\n  }, {\n    key: \"_createOnViewableItemsChanged\",\n    value: function _createOnViewableItemsChanged(onViewableItemsChanged) {\n      var _this2 = this;\n\n      return function (info) {\n        var numColumns = numColumnsOrDefault(_this2.props.numColumns);\n\n        if (onViewableItemsChanged) {\n          if (numColumns > 1) {\n            var changed = [];\n            var viewableItems = [];\n            info.viewableItems.forEach(function (v) {\n              return _this2._pushMultiColumnViewable(viewableItems, v);\n            });\n            info.changed.forEach(function (v) {\n              return _this2._pushMultiColumnViewable(changed, v);\n            });\n            onViewableItemsChanged({\n              viewableItems: viewableItems,\n              changed: changed\n            });\n          } else {\n            onViewableItemsChanged(info);\n          }\n        }\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          numColumns = _this$props.numColumns,\n          columnWrapperStyle = _this$props.columnWrapperStyle,\n          _removeClippedSubviews = _this$props.removeClippedSubviews,\n          _this$props$strictMod = _this$props.strictMode,\n          strictMode = _this$props$strictMod === void 0 ? false : _this$props$strictMod,\n          restProps = _objectWithoutProperties(_this$props, _excluded);\n\n      var renderer = strictMode ? this._memoizedRenderer : this._renderer;\n      return _jsx(VirtualizedList, _objectSpread(_objectSpread({}, restProps), {}, {\n        getItem: this._getItem,\n        getItemCount: this._getItemCount,\n        keyExtractor: this._keyExtractor,\n        ref: this._captureRef,\n        viewabilityConfigCallbackPairs: this._virtualizedListPairs,\n        removeClippedSubviews: removeClippedSubviewsOrDefault(_removeClippedSubviews)\n      }, renderer(this.props.ListItemComponent, this.props.renderItem, columnWrapperStyle, numColumns, this.props.extraData)));\n    }\n  }]);\n\n  return FlatList;\n}(React.PureComponent);\n\nvar styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row'\n  }\n});\nmodule.exports = FlatList;","map":{"version":3,"names":["VirtualizedList","keyExtractor","defaultKeyExtractor","memoizeOne","View","require","StyleSheet","deepDiffer","Platform","invariant","React","removeClippedSubviewsOrDefault","removeClippedSubviews","OS","numColumnsOrDefault","numColumns","FlatList","props","_virtualizedListPairs","_captureRef","ref","_listRef","_getItem","data","index","ret","kk","itemIndex","length","item","push","_getItemCount","Array","isArray","Math","ceil","_keyExtractor","items","map","join","_renderer","ListItemComponent","renderItem","columnWrapperStyle","extraData","cols","render","renderProp","info","compose","styles","row","it","element","separators","_memoizedRenderer","_checkProps","viewabilityConfigCallbackPairs","pair","viewabilityConfig","onViewableItemsChanged","_createOnViewableItemsChanged","params","scrollToEnd","scrollToIndex","scrollToItem","scrollToOffset","recordInteraction","flashScrollIndicators","getScrollResponder","getScrollRef","getScrollableNode","setNativeProps","prevProps","getItem","getItemCount","horizontal","arr","v","forEach","ii","key","changed","viewableItems","_pushMultiColumnViewable","_removeClippedSubviews","strictMode","restProps","renderer","PureComponent","create","flexDirection","module","exports"],"sources":["/Users/zagarellagabriele/Desktop/Progetti/React Native/React-Native-Exercises/node_modules/react-native/Libraries/Lists/FlatList.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\nimport typeof ScrollViewNativeComponent from '../Components/ScrollView/ScrollViewNativeComponent';\nimport type {ViewStyleProp} from '../StyleSheet/StyleSheet';\nimport type {\n  ViewabilityConfigCallbackPair,\n  ViewToken,\n} from './ViewabilityHelper';\nimport type {RenderItemProps, RenderItemType} from './VirtualizedList';\n\nimport {type ScrollResponderType} from '../Components/ScrollView/ScrollView';\nimport VirtualizedList from './VirtualizedList';\nimport {keyExtractor as defaultKeyExtractor} from './VirtualizeUtils';\nimport memoizeOne from 'memoize-one';\n\nconst View = require('../Components/View/View');\nconst StyleSheet = require('../StyleSheet/StyleSheet');\nconst deepDiffer = require('../Utilities/differ/deepDiffer');\nconst Platform = require('../Utilities/Platform');\nconst invariant = require('invariant');\nconst React = require('react');\n\ntype RequiredProps<ItemT> = {|\n  /**\n   * For simplicity, data is just a plain array. If you want to use something else, like an\n   * immutable list, use the underlying `VirtualizedList` directly.\n   */\n  data: ?$ReadOnlyArray<ItemT>,\n|};\ntype OptionalProps<ItemT> = {|\n  /**\n   * Takes an item from `data` and renders it into the list. Example usage:\n   *\n   *     <FlatList\n   *       ItemSeparatorComponent={Platform.OS !== 'android' && ({highlighted}) => (\n   *         <View style={[style.separator, highlighted && {marginLeft: 0}]} />\n   *       )}\n   *       data={[{title: 'Title Text', key: 'item1'}]}\n   *       renderItem={({item, separators}) => (\n   *         <TouchableHighlight\n   *           onPress={() => this._onPress(item)}\n   *           onShowUnderlay={separators.highlight}\n   *           onHideUnderlay={separators.unhighlight}>\n   *           <View style={{backgroundColor: 'white'}}>\n   *             <Text>{item.title}</Text>\n   *           </View>\n   *         </TouchableHighlight>\n   *       )}\n   *     />\n   *\n   * Provides additional metadata like `index` if you need it, as well as a more generic\n   * `separators.updateProps` function which let's you set whatever props you want to change the\n   * rendering of either the leading separator or trailing separator in case the more common\n   * `highlight` and `unhighlight` (which set the `highlighted: boolean` prop) are insufficient for\n   * your use-case.\n   */\n  renderItem?: ?RenderItemType<ItemT>,\n\n  /**\n   * Optional custom style for multi-item rows generated when numColumns > 1.\n   */\n  columnWrapperStyle?: ViewStyleProp,\n  /**\n   * A marker property for telling the list to re-render (since it implements `PureComponent`). If\n   * any of your `renderItem`, Header, Footer, etc. functions depend on anything outside of the\n   * `data` prop, stick it here and treat it immutably.\n   */\n  extraData?: any,\n  /**\n   * `getItemLayout` is an optional optimizations that let us skip measurement of dynamic content if\n   * you know the height of items a priori. `getItemLayout` is the most efficient, and is easy to\n   * use if you have fixed height items, for example:\n   *\n   *     getItemLayout={(data, index) => (\n   *       {length: ITEM_HEIGHT, offset: ITEM_HEIGHT * index, index}\n   *     )}\n   *\n   * Adding `getItemLayout` can be a great performance boost for lists of several hundred items.\n   * Remember to include separator length (height or width) in your offset calculation if you\n   * specify `ItemSeparatorComponent`.\n   */\n  getItemLayout?: (\n    data: ?Array<ItemT>,\n    index: number,\n  ) => {\n    length: number,\n    offset: number,\n    index: number,\n    ...\n  },\n  /**\n   * If true, renders items next to each other horizontally instead of stacked vertically.\n   */\n  horizontal?: ?boolean,\n  /**\n   * How many items to render in the initial batch. This should be enough to fill the screen but not\n   * much more. Note these items will never be unmounted as part of the windowed rendering in order\n   * to improve perceived performance of scroll-to-top actions.\n   */\n  initialNumToRender?: ?number,\n  /**\n   * Instead of starting at the top with the first item, start at `initialScrollIndex`. This\n   * disables the \"scroll to top\" optimization that keeps the first `initialNumToRender` items\n   * always rendered and immediately renders the items starting at this initial index. Requires\n   * `getItemLayout` to be implemented.\n   */\n  initialScrollIndex?: ?number,\n  /**\n   * Reverses the direction of scroll. Uses scale transforms of -1.\n   */\n  inverted?: ?boolean,\n  /**\n   * Used to extract a unique key for a given item at the specified index. Key is used for caching\n   * and as the react key to track item re-ordering. The default extractor checks `item.key`, then\n   * falls back to using the index, like React does.\n   */\n  keyExtractor?: ?(item: ItemT, index: number) => string,\n  /**\n   * Multiple columns can only be rendered with `horizontal={false}` and will zig-zag like a\n   * `flexWrap` layout. Items should all be the same height - masonry layouts are not supported.\n   *\n   * The default value is 1.\n   */\n  numColumns?: number,\n  /**\n   * Note: may have bugs (missing content) in some circumstances - use at your own risk.\n   *\n   * This may improve scroll performance for large lists.\n   *\n   * The default value is true for Android.\n   */\n  removeClippedSubviews?: boolean,\n  /**\n   * See `ScrollView` for flow type and further documentation.\n   */\n  fadingEdgeLength?: ?number,\n  /**\n   * Enable an optimization to memoize the item renderer to prevent unnecessary rerenders.\n   */\n  strictMode?: boolean,\n|};\n\n/**\n * Default Props Helper Functions\n * Use the following helper functions for default values\n */\n\n// removeClippedSubviewsOrDefault(this.props.removeClippedSubviews)\nfunction removeClippedSubviewsOrDefault(removeClippedSubviews: ?boolean) {\n  return removeClippedSubviews ?? Platform.OS === 'android';\n}\n\n// numColumnsOrDefault(this.props.numColumns)\nfunction numColumnsOrDefault(numColumns: ?number) {\n  return numColumns ?? 1;\n}\n\ntype FlatListProps<ItemT> = {|\n  ...RequiredProps<ItemT>,\n  ...OptionalProps<ItemT>,\n|};\n\ntype VirtualizedListProps = React.ElementConfig<typeof VirtualizedList>;\n\nexport type Props<ItemT> = {\n  ...$Diff<\n    VirtualizedListProps,\n    {\n      getItem: $PropertyType<VirtualizedListProps, 'getItem'>,\n      getItemCount: $PropertyType<VirtualizedListProps, 'getItemCount'>,\n      getItemLayout: $PropertyType<VirtualizedListProps, 'getItemLayout'>,\n      renderItem: $PropertyType<VirtualizedListProps, 'renderItem'>,\n      keyExtractor: $PropertyType<VirtualizedListProps, 'keyExtractor'>,\n      ...\n    },\n  >,\n  ...FlatListProps<ItemT>,\n  ...\n};\n\n/**\n * A performant interface for rendering simple, flat lists, supporting the most handy features:\n *\n *  - Fully cross-platform.\n *  - Optional horizontal mode.\n *  - Configurable viewability callbacks.\n *  - Header support.\n *  - Footer support.\n *  - Separator support.\n *  - Pull to Refresh.\n *  - Scroll loading.\n *  - ScrollToIndex support.\n *\n * If you need section support, use [`<SectionList>`](docs/sectionlist.html).\n *\n * Minimal Example:\n *\n *     <FlatList\n *       data={[{key: 'a'}, {key: 'b'}]}\n *       renderItem={({item}) => <Text>{item.key}</Text>}\n *     />\n *\n * More complex, multi-select example demonstrating `PureComponent` usage for perf optimization and avoiding bugs.\n *\n * - By binding the `onPressItem` handler, the props will remain `===` and `PureComponent` will\n *   prevent wasteful re-renders unless the actual `id`, `selected`, or `title` props change, even\n *   if the components rendered in `MyListItem` did not have such optimizations.\n * - By passing `extraData={this.state}` to `FlatList` we make sure `FlatList` itself will re-render\n *   when the `state.selected` changes. Without setting this prop, `FlatList` would not know it\n *   needs to re-render any items because it is also a `PureComponent` and the prop comparison will\n *   not show any changes.\n * - `keyExtractor` tells the list to use the `id`s for the react keys instead of the default `key` property.\n *\n *\n *     class MyListItem extends React.PureComponent {\n *       _onPress = () => {\n *         this.props.onPressItem(this.props.id);\n *       };\n *\n *       render() {\n *         const textColor = this.props.selected ? \"red\" : \"black\";\n *         return (\n *           <TouchableOpacity onPress={this._onPress}>\n *             <View>\n *               <Text style={{ color: textColor }}>\n *                 {this.props.title}\n *               </Text>\n *             </View>\n *           </TouchableOpacity>\n *         );\n *       }\n *     }\n *\n *     class MultiSelectList extends React.PureComponent {\n *       state = {selected: (new Map(): Map<string, boolean>)};\n *\n *       _keyExtractor = (item, index) => item.id;\n *\n *       _onPressItem = (id: string) => {\n *         // updater functions are preferred for transactional updates\n *         this.setState((state) => {\n *           // copy the map rather than modifying state.\n *           const selected = new Map(state.selected);\n *           selected.set(id, !selected.get(id)); // toggle\n *           return {selected};\n *         });\n *       };\n *\n *       _renderItem = ({item}) => (\n *         <MyListItem\n *           id={item.id}\n *           onPressItem={this._onPressItem}\n *           selected={!!this.state.selected.get(item.id)}\n *           title={item.title}\n *         />\n *       );\n *\n *       render() {\n *         return (\n *           <FlatList\n *             data={this.props.data}\n *             extraData={this.state}\n *             keyExtractor={this._keyExtractor}\n *             renderItem={this._renderItem}\n *           />\n *         );\n *       }\n *     }\n *\n * This is a convenience wrapper around [`<VirtualizedList>`](docs/virtualizedlist.html),\n * and thus inherits its props (as well as those of `ScrollView`) that aren't explicitly listed\n * here, along with the following caveats:\n *\n * - Internal state is not preserved when content scrolls out of the render window. Make sure all\n *   your data is captured in the item data or external stores like Flux, Redux, or Relay.\n * - This is a `PureComponent` which means that it will not re-render if `props` remain shallow-\n *   equal. Make sure that everything your `renderItem` function depends on is passed as a prop\n *   (e.g. `extraData`) that is not `===` after updates, otherwise your UI may not update on\n *   changes. This includes the `data` prop and parent component state.\n * - In order to constrain memory and enable smooth scrolling, content is rendered asynchronously\n *   offscreen. This means it's possible to scroll faster than the fill rate ands momentarily see\n *   blank content. This is a tradeoff that can be adjusted to suit the needs of each application,\n *   and we are working on improving it behind the scenes.\n * - By default, the list looks for a `key` prop on each item and uses that for the React key.\n *   Alternatively, you can provide a custom `keyExtractor` prop.\n *\n * Also inherits [ScrollView Props](docs/scrollview.html#props), unless it is nested in another FlatList of same orientation.\n */\nclass FlatList<ItemT> extends React.PureComponent<Props<ItemT>, void> {\n  props: Props<ItemT>;\n  /**\n   * Scrolls to the end of the content. May be janky without `getItemLayout` prop.\n   */\n  scrollToEnd(params?: ?{animated?: ?boolean, ...}) {\n    if (this._listRef) {\n      this._listRef.scrollToEnd(params);\n    }\n  }\n\n  /**\n   * Scrolls to the item at the specified index such that it is positioned in the viewable area\n   * such that `viewPosition` 0 places it at the top, 1 at the bottom, and 0.5 centered in the\n   * middle. `viewOffset` is a fixed number of pixels to offset the final target position.\n   *\n   * Note: cannot scroll to locations outside the render window without specifying the\n   * `getItemLayout` prop.\n   */\n  scrollToIndex(params: {\n    animated?: ?boolean,\n    index: number,\n    viewOffset?: number,\n    viewPosition?: number,\n    ...\n  }) {\n    if (this._listRef) {\n      this._listRef.scrollToIndex(params);\n    }\n  }\n\n  /**\n   * Requires linear scan through data - use `scrollToIndex` instead if possible.\n   *\n   * Note: cannot scroll to locations outside the render window without specifying the\n   * `getItemLayout` prop.\n   */\n  scrollToItem(params: {\n    animated?: ?boolean,\n    item: ItemT,\n    viewOffset?: number,\n    viewPosition?: number,\n    ...\n  }) {\n    if (this._listRef) {\n      this._listRef.scrollToItem(params);\n    }\n  }\n\n  /**\n   * Scroll to a specific content pixel offset in the list.\n   *\n   * Check out [scrollToOffset](docs/virtualizedlist.html#scrolltooffset) of VirtualizedList\n   */\n  scrollToOffset(params: {animated?: ?boolean, offset: number, ...}) {\n    if (this._listRef) {\n      this._listRef.scrollToOffset(params);\n    }\n  }\n\n  /**\n   * Tells the list an interaction has occurred, which should trigger viewability calculations, e.g.\n   * if `waitForInteractions` is true and the user has not scrolled. This is typically called by\n   * taps on items or by navigation actions.\n   */\n  recordInteraction() {\n    if (this._listRef) {\n      this._listRef.recordInteraction();\n    }\n  }\n\n  /**\n   * Displays the scroll indicators momentarily.\n   *\n   * @platform ios\n   */\n  flashScrollIndicators() {\n    if (this._listRef) {\n      this._listRef.flashScrollIndicators();\n    }\n  }\n\n  /**\n   * Provides a handle to the underlying scroll responder.\n   */\n  getScrollResponder(): ?ScrollResponderType {\n    if (this._listRef) {\n      return this._listRef.getScrollResponder();\n    }\n  }\n\n  /**\n   * Provides a reference to the underlying host component\n   */\n  getNativeScrollRef():\n    | ?React.ElementRef<typeof View>\n    | ?React.ElementRef<ScrollViewNativeComponent> {\n    if (this._listRef) {\n      /* $FlowFixMe[incompatible-return] Suppresses errors found when fixing\n       * TextInput typing */\n      return this._listRef.getScrollRef();\n    }\n  }\n\n  getScrollableNode(): any {\n    if (this._listRef) {\n      return this._listRef.getScrollableNode();\n    }\n  }\n\n  setNativeProps(props: {[string]: mixed, ...}) {\n    if (this._listRef) {\n      this._listRef.setNativeProps(props);\n    }\n  }\n\n  constructor(props: Props<ItemT>) {\n    super(props);\n    this._checkProps(this.props);\n    if (this.props.viewabilityConfigCallbackPairs) {\n      this._virtualizedListPairs =\n        this.props.viewabilityConfigCallbackPairs.map(pair => ({\n          viewabilityConfig: pair.viewabilityConfig,\n          onViewableItemsChanged: this._createOnViewableItemsChanged(\n            pair.onViewableItemsChanged,\n          ),\n        }));\n    } else if (this.props.onViewableItemsChanged) {\n      this._virtualizedListPairs.push({\n        /* $FlowFixMe[incompatible-call] (>=0.63.0 site=react_native_fb) This\n         * comment suppresses an error found when Flow v0.63 was deployed. To\n         * see the error delete this comment and run Flow. */\n        viewabilityConfig: this.props.viewabilityConfig,\n        onViewableItemsChanged: this._createOnViewableItemsChanged(\n          this.props.onViewableItemsChanged,\n        ),\n      });\n    }\n  }\n\n  // $FlowFixMe[missing-local-annot]\n  componentDidUpdate(prevProps: Props<ItemT>) {\n    invariant(\n      prevProps.numColumns === this.props.numColumns,\n      'Changing numColumns on the fly is not supported. Change the key prop on FlatList when ' +\n        'changing the number of columns to force a fresh render of the component.',\n    );\n    invariant(\n      prevProps.onViewableItemsChanged === this.props.onViewableItemsChanged,\n      'Changing onViewableItemsChanged on the fly is not supported',\n    );\n    invariant(\n      !deepDiffer(prevProps.viewabilityConfig, this.props.viewabilityConfig),\n      'Changing viewabilityConfig on the fly is not supported',\n    );\n    invariant(\n      prevProps.viewabilityConfigCallbackPairs ===\n        this.props.viewabilityConfigCallbackPairs,\n      'Changing viewabilityConfigCallbackPairs on the fly is not supported',\n    );\n\n    this._checkProps(this.props);\n  }\n\n  _listRef: ?React.ElementRef<typeof VirtualizedList>;\n  _virtualizedListPairs: Array<ViewabilityConfigCallbackPair> = [];\n\n  _captureRef = (ref: ?React.ElementRef<typeof VirtualizedList>) => {\n    this._listRef = ref;\n  };\n\n  // $FlowFixMe[missing-local-annot]\n  _checkProps(props: Props<ItemT>) {\n    const {\n      // $FlowFixMe[prop-missing] this prop doesn't exist, is only used for an invariant\n      getItem,\n      // $FlowFixMe[prop-missing] this prop doesn't exist, is only used for an invariant\n      getItemCount,\n      horizontal,\n      columnWrapperStyle,\n      onViewableItemsChanged,\n      viewabilityConfigCallbackPairs,\n    } = props;\n    const numColumns = numColumnsOrDefault(this.props.numColumns);\n    invariant(\n      !getItem && !getItemCount,\n      'FlatList does not support custom data formats.',\n    );\n    if (numColumns > 1) {\n      invariant(!horizontal, 'numColumns does not support horizontal.');\n    } else {\n      invariant(\n        !columnWrapperStyle,\n        'columnWrapperStyle not supported for single column lists',\n      );\n    }\n    invariant(\n      !(onViewableItemsChanged && viewabilityConfigCallbackPairs),\n      'FlatList does not support setting both onViewableItemsChanged and ' +\n        'viewabilityConfigCallbackPairs.',\n    );\n  }\n\n  // $FlowFixMe[missing-local-annot]\n  _getItem = (data: Array<ItemT>, index: number) => {\n    const numColumns = numColumnsOrDefault(this.props.numColumns);\n    if (numColumns > 1) {\n      const ret = [];\n      for (let kk = 0; kk < numColumns; kk++) {\n        const itemIndex = index * numColumns + kk;\n        if (itemIndex < data.length) {\n          const item = data[itemIndex];\n          ret.push(item);\n        }\n      }\n      return ret;\n    } else {\n      return data[index];\n    }\n  };\n\n  _getItemCount = (data: ?Array<ItemT>): number => {\n    if (Array.isArray(data)) {\n      const numColumns = numColumnsOrDefault(this.props.numColumns);\n      return numColumns > 1 ? Math.ceil(data.length / numColumns) : data.length;\n    } else {\n      return 0;\n    }\n  };\n\n  _keyExtractor = (items: ItemT | Array<ItemT>, index: number): string => {\n    const numColumns = numColumnsOrDefault(this.props.numColumns);\n    const keyExtractor = this.props.keyExtractor ?? defaultKeyExtractor;\n\n    if (numColumns > 1) {\n      invariant(\n        Array.isArray(items),\n        'FlatList: Encountered internal consistency error, expected each item to consist of an ' +\n          'array with 1-%s columns; instead, received a single item.',\n        numColumns,\n      );\n      return items\n        .map((item, kk) =>\n          keyExtractor(((item: $FlowFixMe): ItemT), index * numColumns + kk),\n        )\n        .join(':');\n    }\n\n    // $FlowFixMe[incompatible-call] Can't call keyExtractor with an array\n    return keyExtractor(items, index);\n  };\n\n  _pushMultiColumnViewable(arr: Array<ViewToken>, v: ViewToken): void {\n    const numColumns = numColumnsOrDefault(this.props.numColumns);\n    const keyExtractor = this.props.keyExtractor ?? defaultKeyExtractor;\n    v.item.forEach((item, ii) => {\n      invariant(v.index != null, 'Missing index!');\n      const index = v.index * numColumns + ii;\n      arr.push({...v, item, key: keyExtractor(item, index), index});\n    });\n  }\n\n  _createOnViewableItemsChanged(\n    onViewableItemsChanged: ?(info: {\n      viewableItems: Array<ViewToken>,\n      changed: Array<ViewToken>,\n      ...\n    }) => void,\n    // $FlowFixMe[missing-local-annot]\n  ) {\n    return (info: {\n      viewableItems: Array<ViewToken>,\n      changed: Array<ViewToken>,\n      ...\n    }) => {\n      const numColumns = numColumnsOrDefault(this.props.numColumns);\n      if (onViewableItemsChanged) {\n        if (numColumns > 1) {\n          const changed: Array<ViewToken> = [];\n          const viewableItems: Array<ViewToken> = [];\n          info.viewableItems.forEach(v =>\n            this._pushMultiColumnViewable(viewableItems, v),\n          );\n          info.changed.forEach(v => this._pushMultiColumnViewable(changed, v));\n          onViewableItemsChanged({viewableItems, changed});\n        } else {\n          onViewableItemsChanged(info);\n        }\n      }\n    };\n  }\n\n  _renderer = (\n    ListItemComponent: ?(React.ComponentType<any> | React.Element<any>),\n    renderItem: ?RenderItemType<ItemT>,\n    columnWrapperStyle: ?ViewStyleProp,\n    numColumns: ?number,\n    extraData: ?any,\n    // $FlowFixMe[missing-local-annot]\n  ) => {\n    const cols = numColumnsOrDefault(numColumns);\n\n    const render = (props: RenderItemProps<ItemT>): React.Node => {\n      if (ListItemComponent) {\n        // $FlowFixMe[not-a-component] Component isn't valid\n        // $FlowFixMe[incompatible-type-arg] Component isn't valid\n        // $FlowFixMe[incompatible-return] Component isn't valid\n        return <ListItemComponent {...props} />;\n      } else if (renderItem) {\n        // $FlowFixMe[incompatible-call]\n        return renderItem(props);\n      } else {\n        return null;\n      }\n    };\n\n    const renderProp = (info: RenderItemProps<ItemT>) => {\n      if (cols > 1) {\n        const {item, index} = info;\n        invariant(\n          Array.isArray(item),\n          'Expected array of items with numColumns > 1',\n        );\n        return (\n          <View style={StyleSheet.compose(styles.row, columnWrapperStyle)}>\n            {item.map((it, kk) => {\n              const element = render({\n                // $FlowFixMe[incompatible-call]\n                item: it,\n                index: index * cols + kk,\n                separators: info.separators,\n              });\n              return element != null ? (\n                <React.Fragment key={kk}>{element}</React.Fragment>\n              ) : null;\n            })}\n          </View>\n        );\n      } else {\n        return render(info);\n      }\n    };\n\n    return ListItemComponent\n      ? {ListItemComponent: renderProp}\n      : {renderItem: renderProp};\n  };\n\n  // $FlowFixMe[missing-local-annot]\n  _memoizedRenderer = memoizeOne(this._renderer);\n\n  render(): React.Node {\n    const {\n      numColumns,\n      columnWrapperStyle,\n      removeClippedSubviews: _removeClippedSubviews,\n      strictMode = false,\n      ...restProps\n    } = this.props;\n\n    const renderer = strictMode ? this._memoizedRenderer : this._renderer;\n\n    return (\n      // $FlowFixMe[incompatible-exact] - `restProps` (`Props`) is inexact.\n      <VirtualizedList\n        {...restProps}\n        getItem={this._getItem}\n        getItemCount={this._getItemCount}\n        keyExtractor={this._keyExtractor}\n        ref={this._captureRef}\n        viewabilityConfigCallbackPairs={this._virtualizedListPairs}\n        removeClippedSubviews={removeClippedSubviewsOrDefault(\n          _removeClippedSubviews,\n        )}\n        {...renderer(\n          this.props.ListItemComponent,\n          this.props.renderItem,\n          columnWrapperStyle,\n          numColumns,\n          this.props.extraData,\n        )}\n      />\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  row: {flexDirection: 'row'},\n});\n\nmodule.exports = FlatList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}