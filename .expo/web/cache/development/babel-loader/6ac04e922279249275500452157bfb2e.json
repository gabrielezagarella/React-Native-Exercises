{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar Blob = require(\"./Blob\");\n\nvar invariant = require('invariant');\n\nvar File = function (_Blob) {\n  _inherits(File, _Blob);\n\n  var _super = _createSuper(File);\n\n  function File(parts, name, options) {\n    var _this;\n\n    _classCallCheck(this, File);\n\n    invariant(parts != null && name != null, 'Failed to construct `File`: Must pass both `parts` and `name` arguments.');\n    _this = _super.call(this, parts, options);\n    _this.data.name = name;\n    return _this;\n  }\n\n  _createClass(File, [{\n    key: \"name\",\n    get: function get() {\n      invariant(this.data.name != null, 'Files must have a name set.');\n      return this.data.name;\n    }\n  }, {\n    key: \"lastModified\",\n    get: function get() {\n      return this.data.lastModified || 0;\n    }\n  }]);\n\n  return File;\n}(Blob);\n\nmodule.exports = File;","map":{"version":3,"names":["Blob","require","invariant","File","parts","name","options","data","lastModified","module","exports"],"sources":["/Users/zagarellagabriele/Desktop/Progetti/React Native/React-Native-Exercises/node_modules/react-native/Libraries/Blob/File.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nimport type {BlobOptions} from './BlobTypes';\n\nconst Blob = require('./Blob');\nconst invariant = require('invariant');\n\n/**\n * The File interface provides information about files.\n */\nclass File extends Blob {\n  /**\n   * Constructor for JS consumers.\n   */\n  constructor(\n    parts: Array<Blob | string>,\n    name: string,\n    options?: BlobOptions,\n  ) {\n    invariant(\n      parts != null && name != null,\n      'Failed to construct `File`: Must pass both `parts` and `name` arguments.',\n    );\n\n    super(parts, options);\n    this.data.name = name;\n  }\n\n  /**\n   * Name of the file.\n   */\n  get name(): string {\n    invariant(this.data.name != null, 'Files must have a name set.');\n    return this.data.name;\n  }\n\n  /*\n   * Last modified time of the file.\n   */\n  get lastModified(): number {\n    return this.data.lastModified || 0;\n  }\n}\n\nmodule.exports = File;\n"],"mappings":"AAUA;;;;;;;;;;;;;;;;AAIA,IAAMA,IAAI,GAAGC,OAAO,UAApB;;AACA,IAAMC,SAAS,GAAGD,OAAO,CAAC,WAAD,CAAzB;;IAKME,I;;;;;EAIJ,cACEC,KADF,EAEEC,IAFF,EAGEC,OAHF,EAIE;IAAA;;IAAA;;IACAJ,SAAS,CACPE,KAAK,IAAI,IAAT,IAAiBC,IAAI,IAAI,IADlB,EAEP,0EAFO,CAAT;IAKA,0BAAMD,KAAN,EAAaE,OAAb;IACA,MAAKC,IAAL,CAAUF,IAAV,GAAiBA,IAAjB;IAPA;EAQD;;;;SAKD,eAAmB;MACjBH,SAAS,CAAC,KAAKK,IAAL,CAAUF,IAAV,IAAkB,IAAnB,EAAyB,6BAAzB,CAAT;MACA,OAAO,KAAKE,IAAL,CAAUF,IAAjB;IACD;;;SAKD,eAA2B;MACzB,OAAO,KAAKE,IAAL,CAAUC,YAAV,IAA0B,CAAjC;IACD;;;;EA/BgBR,I;;AAkCnBS,MAAM,CAACC,OAAP,GAAiBP,IAAjB"},"metadata":{},"sourceType":"script"}