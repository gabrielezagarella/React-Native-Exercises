{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar InteractionManager = function () {\n  function InteractionManager() {\n    _classCallCheck(this, InteractionManager);\n\n    _defineProperty(this, \"waitForRelations\", new Map());\n\n    _defineProperty(this, \"simultaneousRelations\", new Map());\n  }\n\n  _createClass(InteractionManager, [{\n    key: \"configureInteractions\",\n    value: function configureInteractions(handler, config) {\n      this.dropRelationsForHandlerWithTag(handler.getTag());\n\n      if (config.waitFor) {\n        var waitFor = [];\n        config.waitFor.forEach(function (otherHandler) {\n          if (typeof otherHandler === 'number') {\n            waitFor.push(otherHandler);\n          } else {\n            waitFor.push(otherHandler.handlerTag);\n          }\n        });\n        this.waitForRelations.set(handler.getTag(), waitFor);\n      }\n\n      if (config.simultaneousHandlers) {\n        var simultaneousHandlers = [];\n        config.simultaneousHandlers.forEach(function (otherHandler) {\n          if (typeof otherHandler === 'number') {\n            simultaneousHandlers.push(otherHandler);\n          } else {\n            simultaneousHandlers.push(otherHandler.handlerTag);\n          }\n        });\n        this.simultaneousRelations.set(handler.getTag(), simultaneousHandlers);\n      }\n    }\n  }, {\n    key: \"shouldWaitForHandlerFailure\",\n    value: function shouldWaitForHandlerFailure(handler, otherHandler) {\n      var waitFor = this.waitForRelations.get(handler.getTag());\n\n      if (!waitFor) {\n        return false;\n      }\n\n      var shouldWait = false;\n      waitFor.forEach(function (tag) {\n        if (tag === otherHandler.getTag()) {\n          shouldWait = true;\n          return;\n        }\n      });\n      return shouldWait;\n    }\n  }, {\n    key: \"shouldRecognizeSimultaneously\",\n    value: function shouldRecognizeSimultaneously(handler, otherHandler) {\n      var simultaneousHandlers = this.simultaneousRelations.get(handler.getTag());\n\n      if (!simultaneousHandlers) {\n        return false;\n      }\n\n      var shouldRecognizeSimultaneously = false;\n      simultaneousHandlers.forEach(function (tag) {\n        if (tag === otherHandler.getTag()) {\n          shouldRecognizeSimultaneously = true;\n          return;\n        }\n      });\n      return shouldRecognizeSimultaneously;\n    }\n  }, {\n    key: \"shouldRequireHandlerToWaitForFailure\",\n    value: function shouldRequireHandlerToWaitForFailure(_handler, _otherHandler) {\n      return false;\n    }\n  }, {\n    key: \"shouldHandlerBeCancelledBy\",\n    value: function shouldHandlerBeCancelledBy(_handler, _otherHandler) {\n      return false;\n    }\n  }, {\n    key: \"dropRelationsForHandlerWithTag\",\n    value: function dropRelationsForHandlerWithTag(handlerTag) {\n      this.waitForRelations.delete(handlerTag);\n      this.simultaneousRelations.delete(handlerTag);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.waitForRelations.clear();\n      this.simultaneousRelations.clear();\n    }\n  }], [{\n    key: \"getInstance\",\n    value: function getInstance() {\n      if (!this.instance) {\n        this.instance = new InteractionManager();\n      }\n\n      return this.instance;\n    }\n  }]);\n\n  return InteractionManager;\n}();\n\nexport { InteractionManager as default };\n\n_defineProperty(InteractionManager, \"instance\", void 0);","map":{"version":3,"sources":["InteractionManager.ts"],"names":["InteractionManager","constructor","configureInteractions","handler","config","waitFor","otherHandler","simultaneousHandlers","shouldWaitForHandlerFailure","shouldWait","tag","shouldRecognizeSimultaneously","shouldRequireHandlerToWaitForFailure","shouldHandlerBeCancelledBy","dropRelationsForHandlerWithTag","reset","getInstance"],"mappings":"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","sourcesContent":["import GestureHandler from '../handlers/GestureHandler';\nimport { Config, Handler } from '../interfaces';\n\nexport default class InteractionManager {\n  private static instance: InteractionManager;\n  private readonly waitForRelations: Map<number, number[]> = new Map();\n  private readonly simultaneousRelations: Map<number, number[]> = new Map();\n\n  // Private becaues of singleton\n  // eslint-disable-next-line no-useless-constructor, @typescript-eslint/no-empty-function\n  private constructor() {}\n\n  public configureInteractions(handler: GestureHandler, config: Config) {\n    this.dropRelationsForHandlerWithTag(handler.getTag());\n\n    if (config.waitFor) {\n      const waitFor: number[] = [];\n      config.waitFor.forEach((otherHandler: Handler): void => {\n        // New API reference\n        if (typeof otherHandler === 'number') {\n          waitFor.push(otherHandler);\n        } else {\n          // Old API reference\n          waitFor.push(otherHandler.handlerTag);\n        }\n      });\n\n      this.waitForRelations.set(handler.getTag(), waitFor);\n    }\n\n    if (config.simultaneousHandlers) {\n      const simultaneousHandlers: number[] = [];\n      config.simultaneousHandlers.forEach((otherHandler: Handler): void => {\n        if (typeof otherHandler === 'number') {\n          simultaneousHandlers.push(otherHandler);\n        } else {\n          simultaneousHandlers.push(otherHandler.handlerTag);\n        }\n      });\n\n      this.simultaneousRelations.set(handler.getTag(), simultaneousHandlers);\n    }\n  }\n\n  public shouldWaitForHandlerFailure(\n    handler: GestureHandler,\n    otherHandler: GestureHandler\n  ): boolean {\n    const waitFor: number[] | undefined = this.waitForRelations.get(\n      handler.getTag()\n    );\n    if (!waitFor) {\n      return false;\n    }\n\n    let shouldWait = false;\n\n    waitFor.forEach((tag: number): void => {\n      if (tag === otherHandler.getTag()) {\n        shouldWait = true;\n        return; //Returns from callback\n      }\n    });\n\n    return shouldWait;\n  }\n\n  public shouldRecognizeSimultaneously(\n    handler: GestureHandler,\n    otherHandler: GestureHandler\n  ): boolean {\n    const simultaneousHandlers: number[] | undefined =\n      this.simultaneousRelations.get(handler.getTag());\n    if (!simultaneousHandlers) {\n      return false;\n    }\n\n    let shouldRecognizeSimultaneously = false;\n\n    simultaneousHandlers.forEach((tag: number): void => {\n      if (tag === otherHandler.getTag()) {\n        shouldRecognizeSimultaneously = true;\n        return;\n      }\n    });\n\n    return shouldRecognizeSimultaneously;\n  }\n\n  public shouldRequireHandlerToWaitForFailure(\n    _handler: GestureHandler,\n    _otherHandler: GestureHandler\n  ): boolean {\n    //TODO: Implement logic\n    return false;\n  }\n\n  public shouldHandlerBeCancelledBy(\n    _handler: GestureHandler,\n    _otherHandler: GestureHandler\n  ): boolean {\n    //TODO: Implement logic\n    return false;\n  }\n\n  public dropRelationsForHandlerWithTag(handlerTag: number): void {\n    this.waitForRelations.delete(handlerTag);\n    this.simultaneousRelations.delete(handlerTag);\n  }\n\n  public reset() {\n    this.waitForRelations.clear();\n    this.simultaneousRelations.clear();\n  }\n\n  public static getInstance(): InteractionManager {\n    if (!this.instance) {\n      this.instance = new InteractionManager();\n    }\n\n    return this.instance;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}