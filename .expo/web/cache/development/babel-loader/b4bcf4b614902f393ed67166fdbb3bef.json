{"ast":null,"code":"'use strict';\n\nvar _ease;\n\nvar Easing = {\n  step0: function step0(n) {\n    return n > 0 ? 1 : 0;\n  },\n  step1: function step1(n) {\n    return n >= 1 ? 1 : 0;\n  },\n  linear: function linear(t) {\n    return t;\n  },\n  ease: function ease(t) {\n    if (!_ease) {\n      _ease = Easing.bezier(0.42, 0, 1, 1);\n    }\n\n    return _ease(t);\n  },\n  quad: function quad(t) {\n    return t * t;\n  },\n  cubic: function cubic(t) {\n    return t * t * t;\n  },\n  poly: function poly(n) {\n    return function (t) {\n      return Math.pow(t, n);\n    };\n  },\n  sin: function sin(t) {\n    return 1 - Math.cos(t * Math.PI / 2);\n  },\n  circle: function circle(t) {\n    return 1 - Math.sqrt(1 - t * t);\n  },\n  exp: function exp(t) {\n    return Math.pow(2, 10 * (t - 1));\n  },\n  elastic: function elastic() {\n    var bounciness = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    var p = bounciness * Math.PI;\n    return function (t) {\n      return 1 - Math.pow(Math.cos(t * Math.PI / 2), 3) * Math.cos(t * p);\n    };\n  },\n  back: function back() {\n    var s = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1.70158;\n    return function (t) {\n      return t * t * ((s + 1) * t - s);\n    };\n  },\n  bounce: function bounce(t) {\n    if (t < 1 / 2.75) {\n      return 7.5625 * t * t;\n    }\n\n    if (t < 2 / 2.75) {\n      var _t = t - 1.5 / 2.75;\n\n      return 7.5625 * _t * _t + 0.75;\n    }\n\n    if (t < 2.5 / 2.75) {\n      var _t2 = t - 2.25 / 2.75;\n\n      return 7.5625 * _t2 * _t2 + 0.9375;\n    }\n\n    var t2 = t - 2.625 / 2.75;\n    return 7.5625 * t2 * t2 + 0.984375;\n  },\n  bezier: function bezier(x1, y1, x2, y2) {\n    var _bezier = require(\"./bezier\").default;\n\n    return _bezier(x1, y1, x2, y2);\n  },\n  in: function _in(easing) {\n    return easing;\n  },\n  out: function out(easing) {\n    return function (t) {\n      return 1 - easing(1 - t);\n    };\n  },\n  inOut: function inOut(easing) {\n    return function (t) {\n      if (t < 0.5) {\n        return easing(t * 2) / 2;\n      }\n\n      return 1 - easing((1 - t) * 2) / 2;\n    };\n  }\n};\nexport default Easing;","map":{"version":3,"names":["ease","Easing","step0","n","step1","linear","t","bezier","quad","cubic","poly","Math","pow","sin","cos","PI","circle","sqrt","exp","elastic","bounciness","p","back","s","bounce","t2","x1","y1","x2","y2","_bezier","require","default","in","easing","out","inOut"],"sources":["/Users/zagarellagabriele/Desktop/Progetti/React Native/React-Native-Exercises/node_modules/react-native/Libraries/Animated/Easing.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\n'use strict';\n\nlet ease;\n\n/**\n * The `Easing` module implements common easing functions. This module is used\n * by [Animate.timing()](docs/animate.html#timing) to convey physically\n * believable motion in animations.\n *\n * You can find a visualization of some common easing functions at\n * http://easings.net/\n *\n * ### Predefined animations\n *\n * The `Easing` module provides several predefined animations through the\n * following methods:\n *\n * - [`back`](docs/easing.html#back) provides a simple animation where the\n *   object goes slightly back before moving forward\n * - [`bounce`](docs/easing.html#bounce) provides a bouncing animation\n * - [`ease`](docs/easing.html#ease) provides a simple inertial animation\n * - [`elastic`](docs/easing.html#elastic) provides a simple spring interaction\n *\n * ### Standard functions\n *\n * Three standard easing functions are provided:\n *\n * - [`linear`](docs/easing.html#linear)\n * - [`quad`](docs/easing.html#quad)\n * - [`cubic`](docs/easing.html#cubic)\n *\n * The [`poly`](docs/easing.html#poly) function can be used to implement\n * quartic, quintic, and other higher power functions.\n *\n * ### Additional functions\n *\n * Additional mathematical functions are provided by the following methods:\n *\n * - [`bezier`](docs/easing.html#bezier) provides a cubic bezier curve\n * - [`circle`](docs/easing.html#circle) provides a circular function\n * - [`sin`](docs/easing.html#sin) provides a sinusoidal function\n * - [`exp`](docs/easing.html#exp) provides an exponential function\n *\n * The following helpers are used to modify other easing functions.\n *\n * - [`in`](docs/easing.html#in) runs an easing function forwards\n * - [`inOut`](docs/easing.html#inout) makes any easing function symmetrical\n * - [`out`](docs/easing.html#out) runs an easing function backwards\n */\nconst Easing = {\n  /**\n   * A stepping function, returns 1 for any positive value of `n`.\n   */\n  step0(n: number): number {\n    return n > 0 ? 1 : 0;\n  },\n\n  /**\n   * A stepping function, returns 1 if `n` is greater than or equal to 1.\n   */\n  step1(n: number): number {\n    return n >= 1 ? 1 : 0;\n  },\n\n  /**\n   * A linear function, `f(t) = t`. Position correlates to elapsed time one to\n   * one.\n   *\n   * http://cubic-bezier.com/#0,0,1,1\n   */\n  linear(t: number): number {\n    return t;\n  },\n\n  /**\n   * A simple inertial interaction, similar to an object slowly accelerating to\n   * speed.\n   *\n   * http://cubic-bezier.com/#.42,0,1,1\n   */\n  ease(t: number): number {\n    if (!ease) {\n      ease = Easing.bezier(0.42, 0, 1, 1);\n    }\n    return ease(t);\n  },\n\n  /**\n   * A quadratic function, `f(t) = t * t`. Position equals the square of elapsed\n   * time.\n   *\n   * http://easings.net/#easeInQuad\n   */\n  quad(t: number): number {\n    return t * t;\n  },\n\n  /**\n   * A cubic function, `f(t) = t * t * t`. Position equals the cube of elapsed\n   * time.\n   *\n   * http://easings.net/#easeInCubic\n   */\n  cubic(t: number): number {\n    return t * t * t;\n  },\n\n  /**\n   * A power function. Position is equal to the Nth power of elapsed time.\n   *\n   * n = 4: http://easings.net/#easeInQuart\n   * n = 5: http://easings.net/#easeInQuint\n   */\n  poly(n: number): (t: number) => number {\n    return (t: number) => Math.pow(t, n);\n  },\n\n  /**\n   * A sinusoidal function.\n   *\n   * http://easings.net/#easeInSine\n   */\n  sin(t: number): number {\n    return 1 - Math.cos((t * Math.PI) / 2);\n  },\n\n  /**\n   * A circular function.\n   *\n   * http://easings.net/#easeInCirc\n   */\n  circle(t: number): number {\n    return 1 - Math.sqrt(1 - t * t);\n  },\n\n  /**\n   * An exponential function.\n   *\n   * http://easings.net/#easeInExpo\n   */\n  exp(t: number): number {\n    return Math.pow(2, 10 * (t - 1));\n  },\n\n  /**\n   * A simple elastic interaction, similar to a spring oscillating back and\n   * forth.\n   *\n   * Default bounciness is 1, which overshoots a little bit once. 0 bounciness\n   * doesn't overshoot at all, and bounciness of N > 1 will overshoot about N\n   * times.\n   *\n   * http://easings.net/#easeInElastic\n   */\n  elastic(bounciness: number = 1): (t: number) => number {\n    const p = bounciness * Math.PI;\n    return t => 1 - Math.pow(Math.cos((t * Math.PI) / 2), 3) * Math.cos(t * p);\n  },\n\n  /**\n   * Use with `Animated.parallel()` to create a simple effect where the object\n   * animates back slightly as the animation starts.\n   *\n   * https://easings.net/#easeInBack\n   */\n  back(s: number = 1.70158): (t: number) => number {\n    return t => t * t * ((s + 1) * t - s);\n  },\n\n  /**\n   * Provides a simple bouncing effect.\n   *\n   * http://easings.net/#easeInBounce\n   */\n  bounce(t: number): number {\n    if (t < 1 / 2.75) {\n      return 7.5625 * t * t;\n    }\n\n    if (t < 2 / 2.75) {\n      const t2 = t - 1.5 / 2.75;\n      return 7.5625 * t2 * t2 + 0.75;\n    }\n\n    if (t < 2.5 / 2.75) {\n      const t2 = t - 2.25 / 2.75;\n      return 7.5625 * t2 * t2 + 0.9375;\n    }\n\n    const t2 = t - 2.625 / 2.75;\n    return 7.5625 * t2 * t2 + 0.984375;\n  },\n\n  /**\n   * Provides a cubic bezier curve, equivalent to CSS Transitions'\n   * `transition-timing-function`.\n   *\n   * A useful tool to visualize cubic bezier curves can be found at\n   * http://cubic-bezier.com/\n   */\n  bezier(\n    x1: number,\n    y1: number,\n    x2: number,\n    y2: number,\n  ): (t: number) => number {\n    const _bezier = require('./bezier').default;\n    return _bezier(x1, y1, x2, y2);\n  },\n\n  /**\n   * Runs an easing function forwards.\n   */\n  in(easing: (t: number) => number): (t: number) => number {\n    return easing;\n  },\n\n  /**\n   * Runs an easing function backwards.\n   */\n  out(easing: (t: number) => number): (t: number) => number {\n    return t => 1 - easing(1 - t);\n  },\n\n  /**\n   * Makes any easing function symmetrical. The easing function will run\n   * forwards for half of the duration, then backwards for the rest of the\n   * duration.\n   */\n  inOut(easing: (t: number) => number): (t: number) => number {\n    return t => {\n      if (t < 0.5) {\n        return easing(t * 2) / 2;\n      }\n      return 1 - easing((1 - t) * 2) / 2;\n    };\n  },\n};\n\nexport default Easing;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}