{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport DiscreteGestureHandler from \"./DiscreteGestureHandler\";\nimport * as NodeManager from \"./NodeManager\";\nimport PressGestureHandler from \"./PressGestureHandler\";\nimport { TEST_MIN_IF_NOT_NAN, VEC_LEN_SQ } from \"./utils\";\n\nvar NativeViewGestureHandler = function (_PressGestureHandler) {\n  _inherits(NativeViewGestureHandler, _PressGestureHandler);\n\n  var _super = _createSuper(NativeViewGestureHandler);\n\n  function NativeViewGestureHandler() {\n    _classCallCheck(this, NativeViewGestureHandler);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(NativeViewGestureHandler, [{\n    key: \"isNative\",\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: \"onRawEvent\",\n    value: function onRawEvent(ev) {\n      var _this = this;\n\n      _get(_getPrototypeOf(NativeViewGestureHandler.prototype), \"onRawEvent\", this).call(this, ev);\n\n      if (!ev.isFinal) {\n        if (TEST_MIN_IF_NOT_NAN(VEC_LEN_SQ({\n          x: ev.deltaX,\n          y: ev.deltaY\n        }), 10)) {\n          if (this.config.disallowInterruption) {\n            var gestures = Object.values(NodeManager.getNodes()).filter(function (gesture) {\n              var handlerTag = gesture.handlerTag,\n                  view = gesture.view,\n                  isGestureRunning = gesture.isGestureRunning;\n              return handlerTag !== _this.handlerTag && isGestureRunning && gesture instanceof DiscreteGestureHandler && view && _this.view.contains(view);\n            });\n\n            for (var gesture of gestures) {\n              gesture.forceInvalidate(ev);\n            }\n          }\n        }\n      }\n    }\n  }]);\n\n  return NativeViewGestureHandler;\n}(PressGestureHandler);\n\nexport default NativeViewGestureHandler;","map":{"version":3,"sources":["NativeViewGestureHandler.ts"],"names":["isNative","onRawEvent","ev","TEST_MIN_IF_NOT_NAN","VEC_LEN_SQ","x","y","deltaY","gestures","NodeManager","gesture","isGestureRunning","handlerTag"],"mappings":";;;;;;;;;;;AAAA,OAAA,sBAAA;AAEA,OAAO,KAAP,WAAA;AACA,OAAA,mBAAA;AACA,SAAA,mBAAA,EAAA,UAAA;;IAEA,wB;;;;;;;;;;;;;SACMA,eAAW;MACb,OAAA,IAAA;IACD;;;WAEDC,oBAAU,EAAVA,EAA+B;MAAA;;MAC7B,yFAAA,EAAA;;MACA,IAAI,CAACC,EAAE,CAAP,OAAA,EAAiB;QAEf,IAAIC,mBAAmB,CAACC,UAAU,CAAC;UAAEC,CAAC,EAAEH,EAAE,CAAP,MAAA;UAAgBI,CAAC,EAAEJ,EAAE,CAACK;QAAtB,CAAD,CAAX,EAAvB,EAAuB,CAAvB,EAAyE;UAEvE,IAAI,KAAA,MAAA,CAAJ,oBAAA,EAAsC;YACpC,IAAMC,QAAQ,GAAG,MAAM,CAAN,MAAA,CAAcC,WAAW,CAAzB,QAAcA,EAAd,EAAA,MAAA,CACdC,UAAAA,OAAD,EAAa;cACX,IAAM,UAAN,GAAA,OAAA,CAAM,UAAN;cAAA,IAAM,IAAN,GAAA,OAAA,CAAM,IAAN;cAAA,IAA0BC,gBAA1B,GAAA,OAAA,CAA0BA,gBAA1B;cACA,OAEEC,UAAU,KAAK,KAAA,CAAfA,UAAAA,IAAAA,gBAAAA,IAIAF,OAAO,YAJPE,sBAAAA,IAAAA,IAAAA,IAQA,KAAA,CAAA,IAAA,CAAA,QAAA,CAAA,IAAA,CAVF;YAJgC,CACnB,CAAjB;;YAkBA,KAAK,IAAL,OAAA,IAAA,QAAA,EAAgC;cAE9BF,OAAO,CAAPA,eAAAA,CAAAA,EAAAA;YACD;UACF;QACF;MACF;IACF;;;;EArCH,mB;;AAwCA,eAAA,wBAAA","sourcesContent":["import DiscreteGestureHandler from './DiscreteGestureHandler';\nimport { HammerInputExt } from './GestureHandler';\nimport * as NodeManager from './NodeManager';\nimport PressGestureHandler from './PressGestureHandler';\nimport { TEST_MIN_IF_NOT_NAN, VEC_LEN_SQ } from './utils';\n\nclass NativeViewGestureHandler extends PressGestureHandler {\n  get isNative() {\n    return true;\n  }\n\n  onRawEvent(ev: HammerInputExt) {\n    super.onRawEvent(ev);\n    if (!ev.isFinal) {\n      // if (this.ref instanceof ScrollView) {\n      if (TEST_MIN_IF_NOT_NAN(VEC_LEN_SQ({ x: ev.deltaX, y: ev.deltaY }), 10)) {\n        // @ts-ignore FIXME(TS) config type\n        if (this.config.disallowInterruption) {\n          const gestures = Object.values(NodeManager.getNodes()).filter(\n            (gesture) => {\n              const { handlerTag, view, isGestureRunning } = gesture;\n              return (\n                // Check if this gesture isn't self\n                handlerTag !== this.handlerTag &&\n                // Ensure the gesture needs to be cancelled\n                isGestureRunning &&\n                // ScrollView can cancel discrete gestures like taps and presses\n                gesture instanceof DiscreteGestureHandler &&\n                // Ensure a view exists and is a child of the current view\n                view &&\n                // @ts-ignore FIXME(TS) view type\n                this.view.contains(view)\n              );\n            }\n          );\n          // Cancel all of the gestures that passed the filter\n          for (const gesture of gestures) {\n            // TODO: Bacon: Send some cached event.\n            gesture.forceInvalidate(ev);\n          }\n        }\n      }\n    }\n  }\n}\n\nexport default NativeViewGestureHandler;\n"]},"metadata":{},"sourceType":"module"}