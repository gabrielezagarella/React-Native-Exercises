{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport normalizeColor from \"../../StyleSheet/normalizeColor\";\nimport NativeAnimatedHelper from \"../NativeAnimatedHelper\";\nimport AnimatedWithChildren from \"./AnimatedWithChildren\";\nimport invariant from 'invariant';\n\nvar linear = function linear(t) {\n  return t;\n};\n\nfunction createInterpolation(config) {\n  if (config.outputRange && typeof config.outputRange[0] === 'string') {\n    return createInterpolationFromStringOutputRange(config);\n  }\n\n  var outputRange = config.outputRange;\n  var inputRange = config.inputRange;\n\n  if (__DEV__) {\n    checkInfiniteRange('outputRange', outputRange);\n    checkInfiniteRange('inputRange', inputRange);\n    checkValidInputRange(inputRange);\n    invariant(inputRange.length === outputRange.length, 'inputRange (' + inputRange.length + ') and outputRange (' + outputRange.length + ') must have the same length');\n  }\n\n  var easing = config.easing || linear;\n  var extrapolateLeft = 'extend';\n\n  if (config.extrapolateLeft !== undefined) {\n    extrapolateLeft = config.extrapolateLeft;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateLeft = config.extrapolate;\n  }\n\n  var extrapolateRight = 'extend';\n\n  if (config.extrapolateRight !== undefined) {\n    extrapolateRight = config.extrapolateRight;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateRight = config.extrapolate;\n  }\n\n  return function (input) {\n    invariant(typeof input === 'number', 'Cannot interpolation an input which is not a number');\n    var range = findRange(input, inputRange);\n    return interpolate(input, inputRange[range], inputRange[range + 1], outputRange[range], outputRange[range + 1], easing, extrapolateLeft, extrapolateRight);\n  };\n}\n\nfunction interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight) {\n  var result = input;\n\n  if (result < inputMin) {\n    if (extrapolateLeft === 'identity') {\n      return result;\n    } else if (extrapolateLeft === 'clamp') {\n      result = inputMin;\n    } else if (extrapolateLeft === 'extend') {}\n  }\n\n  if (result > inputMax) {\n    if (extrapolateRight === 'identity') {\n      return result;\n    } else if (extrapolateRight === 'clamp') {\n      result = inputMax;\n    } else if (extrapolateRight === 'extend') {}\n  }\n\n  if (outputMin === outputMax) {\n    return outputMin;\n  }\n\n  if (inputMin === inputMax) {\n    if (input <= inputMin) {\n      return outputMin;\n    }\n\n    return outputMax;\n  }\n\n  if (inputMin === -Infinity) {\n    result = -result;\n  } else if (inputMax === Infinity) {\n    result = result - inputMin;\n  } else {\n    result = (result - inputMin) / (inputMax - inputMin);\n  }\n\n  result = easing(result);\n\n  if (outputMin === -Infinity) {\n    result = -result;\n  } else if (outputMax === Infinity) {\n    result = result + outputMin;\n  } else {\n    result = result * (outputMax - outputMin) + outputMin;\n  }\n\n  return result;\n}\n\nfunction colorToRgba(input) {\n  var normalizedColor = normalizeColor(input);\n\n  if (normalizedColor === null || typeof normalizedColor !== 'number') {\n    return input;\n  }\n\n  normalizedColor = normalizedColor || 0;\n  var r = (normalizedColor & 0xff000000) >>> 24;\n  var g = (normalizedColor & 0x00ff0000) >>> 16;\n  var b = (normalizedColor & 0x0000ff00) >>> 8;\n  var a = (normalizedColor & 0x000000ff) / 255;\n  return \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + a + \")\";\n}\n\nvar stringShapeRegex = /[+-]?(?:\\d+\\.?\\d*|\\.\\d+)(?:[eE][+-]?\\d+)?/g;\n\nfunction createInterpolationFromStringOutputRange(config) {\n  var outputRange = config.outputRange;\n  invariant(outputRange.length >= 2, 'Bad output range');\n  outputRange = outputRange.map(colorToRgba);\n  checkPattern(outputRange);\n  var outputRanges = outputRange[0].match(stringShapeRegex).map(function () {\n    return [];\n  });\n  outputRange.forEach(function (value) {\n    value.match(stringShapeRegex).forEach(function (number, i) {\n      outputRanges[i].push(+number);\n    });\n  });\n  var interpolations = outputRange[0].match(stringShapeRegex).map(function (value, i) {\n    return createInterpolation(_objectSpread(_objectSpread({}, config), {}, {\n      outputRange: outputRanges[i]\n    }));\n  });\n  var shouldRound = isRgbOrRgba(outputRange[0]);\n  return function (input) {\n    var i = 0;\n    return outputRange[0].replace(stringShapeRegex, function () {\n      var val = +interpolations[i++](input);\n\n      if (shouldRound) {\n        val = i < 4 ? Math.round(val) : Math.round(val * 1000) / 1000;\n      }\n\n      return String(val);\n    });\n  };\n}\n\nfunction isRgbOrRgba(range) {\n  return typeof range === 'string' && range.startsWith('rgb');\n}\n\nfunction checkPattern(arr) {\n  var pattern = arr[0].replace(stringShapeRegex, '');\n\n  for (var i = 1; i < arr.length; ++i) {\n    invariant(pattern === arr[i].replace(stringShapeRegex, ''), 'invalid pattern ' + arr[0] + ' and ' + arr[i]);\n  }\n}\n\nfunction findRange(input, inputRange) {\n  var i;\n\n  for (i = 1; i < inputRange.length - 1; ++i) {\n    if (inputRange[i] >= input) {\n      break;\n    }\n  }\n\n  return i - 1;\n}\n\nfunction checkValidInputRange(arr) {\n  invariant(arr.length >= 2, 'inputRange must have at least 2 elements');\n  var message = 'inputRange must be monotonically non-decreasing ' + String(arr);\n\n  for (var i = 1; i < arr.length; ++i) {\n    invariant(arr[i] >= arr[i - 1], message);\n  }\n}\n\nfunction checkInfiniteRange(name, arr) {\n  invariant(arr.length >= 2, name + ' must have at least 2 elements');\n  invariant(arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity, name + 'cannot be ]-infinity;+infinity[ ' + arr);\n}\n\nvar AnimatedInterpolation = function (_AnimatedWithChildren) {\n  _inherits(AnimatedInterpolation, _AnimatedWithChildren);\n\n  var _super = _createSuper(AnimatedInterpolation);\n\n  function AnimatedInterpolation(parent, config) {\n    var _this;\n\n    _classCallCheck(this, AnimatedInterpolation);\n\n    _this = _super.call(this);\n    _this._parent = parent;\n    _this._config = config;\n    _this._interpolation = createInterpolation(config);\n    return _this;\n  }\n\n  _createClass(AnimatedInterpolation, [{\n    key: \"__makeNative\",\n    value: function __makeNative(platformConfig) {\n      this._parent.__makeNative(platformConfig);\n\n      _get(_getPrototypeOf(AnimatedInterpolation.prototype), \"__makeNative\", this).call(this, platformConfig);\n    }\n  }, {\n    key: \"__getValue\",\n    value: function __getValue() {\n      var parentValue = this._parent.__getValue();\n\n      invariant(typeof parentValue === 'number', 'Cannot interpolate an input which is not a number.');\n      return this._interpolation(parentValue);\n    }\n  }, {\n    key: \"interpolate\",\n    value: function interpolate(config) {\n      return new AnimatedInterpolation(this, config);\n    }\n  }, {\n    key: \"__attach\",\n    value: function __attach() {\n      this._parent.__addChild(this);\n    }\n  }, {\n    key: \"__detach\",\n    value: function __detach() {\n      this._parent.__removeChild(this);\n\n      _get(_getPrototypeOf(AnimatedInterpolation.prototype), \"__detach\", this).call(this);\n    }\n  }, {\n    key: \"__transformDataType\",\n    value: function __transformDataType(range) {\n      return range.map(NativeAnimatedHelper.transformDataType);\n    }\n  }, {\n    key: \"__getNativeConfig\",\n    value: function __getNativeConfig() {\n      if (__DEV__) {\n        NativeAnimatedHelper.validateInterpolation(this._config);\n      }\n\n      return {\n        inputRange: this._config.inputRange,\n        outputRange: this.__transformDataType(this._config.outputRange),\n        extrapolateLeft: this._config.extrapolateLeft || this._config.extrapolate || 'extend',\n        extrapolateRight: this._config.extrapolateRight || this._config.extrapolate || 'extend',\n        type: 'interpolation'\n      };\n    }\n  }]);\n\n  return AnimatedInterpolation;\n}(AnimatedWithChildren);\n\nAnimatedInterpolation.__createInterpolation = createInterpolation;\nexport { AnimatedInterpolation as default };","map":{"version":3,"names":["normalizeColor","NativeAnimatedHelper","AnimatedWithChildren","invariant","linear","t","createInterpolation","config","outputRange","createInterpolationFromStringOutputRange","inputRange","__DEV__","checkInfiniteRange","checkValidInputRange","length","easing","extrapolateLeft","undefined","extrapolate","extrapolateRight","input","range","findRange","interpolate","inputMin","inputMax","outputMin","outputMax","result","Infinity","colorToRgba","normalizedColor","r","g","b","a","stringShapeRegex","map","checkPattern","outputRanges","match","forEach","value","number","i","push","interpolations","shouldRound","isRgbOrRgba","replace","val","Math","round","String","startsWith","arr","pattern","message","name","AnimatedInterpolation","parent","_parent","_config","_interpolation","platformConfig","__makeNative","parentValue","__getValue","__addChild","__removeChild","transformDataType","validateInterpolation","__transformDataType","type","__createInterpolation"],"sources":["/Users/zagarellagabriele/Desktop/Progetti/React Native/React-Native-Exercises/node_modules/react-native/Libraries/Animated/nodes/AnimatedInterpolation.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n/* eslint no-bitwise: 0 */\n\n'use strict';\n\nimport type {PlatformConfig} from '../AnimatedPlatformConfig';\nimport type AnimatedNode from './AnimatedNode';\n\nimport normalizeColor from '../../StyleSheet/normalizeColor';\nimport NativeAnimatedHelper from '../NativeAnimatedHelper';\nimport AnimatedWithChildren from './AnimatedWithChildren';\nimport invariant from 'invariant';\n\ntype ExtrapolateType = 'extend' | 'identity' | 'clamp';\n\nexport type InterpolationConfigType<OutputT: number | string> = $ReadOnly<{\n  inputRange: $ReadOnlyArray<number>,\n  outputRange: $ReadOnlyArray<OutputT>,\n  easing?: (input: number) => number,\n  extrapolate?: ExtrapolateType,\n  extrapolateLeft?: ExtrapolateType,\n  extrapolateRight?: ExtrapolateType,\n}>;\n\nconst linear = (t: number) => t;\n\n/**\n * Very handy helper to map input ranges to output ranges with an easing\n * function and custom behavior outside of the ranges.\n */\nfunction createInterpolation<OutputT: number | string>(\n  config: InterpolationConfigType<OutputT>,\n): (input: number) => OutputT {\n  if (config.outputRange && typeof config.outputRange[0] === 'string') {\n    return (createInterpolationFromStringOutputRange((config: any)): any);\n  }\n\n  const outputRange: $ReadOnlyArray<number> = (config.outputRange: any);\n\n  const inputRange = config.inputRange;\n\n  if (__DEV__) {\n    checkInfiniteRange('outputRange', outputRange);\n    checkInfiniteRange('inputRange', inputRange);\n    checkValidInputRange(inputRange);\n\n    invariant(\n      inputRange.length === outputRange.length,\n      'inputRange (' +\n        inputRange.length +\n        ') and outputRange (' +\n        outputRange.length +\n        ') must have the same length',\n    );\n  }\n\n  const easing = config.easing || linear;\n\n  let extrapolateLeft: ExtrapolateType = 'extend';\n  if (config.extrapolateLeft !== undefined) {\n    extrapolateLeft = config.extrapolateLeft;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateLeft = config.extrapolate;\n  }\n\n  let extrapolateRight: ExtrapolateType = 'extend';\n  if (config.extrapolateRight !== undefined) {\n    extrapolateRight = config.extrapolateRight;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateRight = config.extrapolate;\n  }\n\n  return input => {\n    invariant(\n      typeof input === 'number',\n      'Cannot interpolation an input which is not a number',\n    );\n\n    const range = findRange(input, inputRange);\n    return (interpolate(\n      input,\n      inputRange[range],\n      inputRange[range + 1],\n      outputRange[range],\n      outputRange[range + 1],\n      easing,\n      extrapolateLeft,\n      extrapolateRight,\n    ): any);\n  };\n}\n\nfunction interpolate(\n  input: number,\n  inputMin: number,\n  inputMax: number,\n  outputMin: number,\n  outputMax: number,\n  easing: (input: number) => number,\n  extrapolateLeft: ExtrapolateType,\n  extrapolateRight: ExtrapolateType,\n) {\n  let result = input;\n\n  // Extrapolate\n  if (result < inputMin) {\n    if (extrapolateLeft === 'identity') {\n      return result;\n    } else if (extrapolateLeft === 'clamp') {\n      result = inputMin;\n    } else if (extrapolateLeft === 'extend') {\n      // noop\n    }\n  }\n\n  if (result > inputMax) {\n    if (extrapolateRight === 'identity') {\n      return result;\n    } else if (extrapolateRight === 'clamp') {\n      result = inputMax;\n    } else if (extrapolateRight === 'extend') {\n      // noop\n    }\n  }\n\n  if (outputMin === outputMax) {\n    return outputMin;\n  }\n\n  if (inputMin === inputMax) {\n    if (input <= inputMin) {\n      return outputMin;\n    }\n    return outputMax;\n  }\n\n  // Input Range\n  if (inputMin === -Infinity) {\n    result = -result;\n  } else if (inputMax === Infinity) {\n    result = result - inputMin;\n  } else {\n    result = (result - inputMin) / (inputMax - inputMin);\n  }\n\n  // Easing\n  result = easing(result);\n\n  // Output Range\n  if (outputMin === -Infinity) {\n    result = -result;\n  } else if (outputMax === Infinity) {\n    result = result + outputMin;\n  } else {\n    result = result * (outputMax - outputMin) + outputMin;\n  }\n\n  return result;\n}\n\nfunction colorToRgba(input: string): string {\n  let normalizedColor = normalizeColor(input);\n  if (normalizedColor === null || typeof normalizedColor !== 'number') {\n    return input;\n  }\n\n  normalizedColor = normalizedColor || 0;\n\n  const r = (normalizedColor & 0xff000000) >>> 24;\n  const g = (normalizedColor & 0x00ff0000) >>> 16;\n  const b = (normalizedColor & 0x0000ff00) >>> 8;\n  const a = (normalizedColor & 0x000000ff) / 255;\n\n  return `rgba(${r}, ${g}, ${b}, ${a})`;\n}\n\nconst stringShapeRegex = /[+-]?(?:\\d+\\.?\\d*|\\.\\d+)(?:[eE][+-]?\\d+)?/g;\n\n/**\n * Supports string shapes by extracting numbers so new values can be computed,\n * and recombines those values into new strings of the same shape.  Supports\n * things like:\n *\n *   rgba(123, 42, 99, 0.36) // colors\n *   -45deg                  // values with units\n */\nfunction createInterpolationFromStringOutputRange(\n  config: InterpolationConfigType<string>,\n): (input: number) => string {\n  let outputRange: Array<string> = (config.outputRange: any);\n  invariant(outputRange.length >= 2, 'Bad output range');\n  outputRange = outputRange.map(colorToRgba);\n  checkPattern(outputRange);\n\n  // ['rgba(0, 100, 200, 0)', 'rgba(50, 150, 250, 0.5)']\n  // ->\n  // [\n  //   [0, 50],\n  //   [100, 150],\n  //   [200, 250],\n  //   [0, 0.5],\n  // ]\n  /* $FlowFixMe[incompatible-use] (>=0.18.0): `outputRange[0].match()` can\n   * return `null`. Need to guard against this possibility. */\n  const outputRanges = outputRange[0].match(stringShapeRegex).map(() => []);\n  outputRange.forEach(value => {\n    /* $FlowFixMe[incompatible-use] (>=0.18.0): `value.match()` can return\n     * `null`. Need to guard against this possibility. */\n    value.match(stringShapeRegex).forEach((number, i) => {\n      outputRanges[i].push(+number);\n    });\n  });\n\n  const interpolations = outputRange[0]\n    .match(stringShapeRegex)\n    /* $FlowFixMe[incompatible-use] (>=0.18.0): `outputRange[0].match()` can\n     * return `null`. Need to guard against this possibility. */\n    /* $FlowFixMe[incompatible-call] (>=0.18.0): `outputRange[0].match()` can\n     * return `null`. Need to guard against this possibility. */\n    .map((value, i) => {\n      return createInterpolation({\n        ...config,\n        outputRange: outputRanges[i],\n      });\n    });\n\n  // rgba requires that the r,g,b are integers.... so we want to round them, but we *dont* want to\n  // round the opacity (4th column).\n  const shouldRound = isRgbOrRgba(outputRange[0]);\n\n  return input => {\n    let i = 0;\n    // 'rgba(0, 100, 200, 0)'\n    // ->\n    // 'rgba(${interpolations[0](input)}, ${interpolations[1](input)}, ...'\n    return outputRange[0].replace(stringShapeRegex, () => {\n      let val = +interpolations[i++](input);\n      if (shouldRound) {\n        val = i < 4 ? Math.round(val) : Math.round(val * 1000) / 1000;\n      }\n      return String(val);\n    });\n  };\n}\n\nfunction isRgbOrRgba(range: string) {\n  return typeof range === 'string' && range.startsWith('rgb');\n}\n\nfunction checkPattern(arr: $ReadOnlyArray<string>) {\n  const pattern = arr[0].replace(stringShapeRegex, '');\n  for (let i = 1; i < arr.length; ++i) {\n    invariant(\n      pattern === arr[i].replace(stringShapeRegex, ''),\n      'invalid pattern ' + arr[0] + ' and ' + arr[i],\n    );\n  }\n}\n\nfunction findRange(input: number, inputRange: $ReadOnlyArray<number>) {\n  let i;\n  for (i = 1; i < inputRange.length - 1; ++i) {\n    if (inputRange[i] >= input) {\n      break;\n    }\n  }\n  return i - 1;\n}\n\nfunction checkValidInputRange(arr: $ReadOnlyArray<number>) {\n  invariant(arr.length >= 2, 'inputRange must have at least 2 elements');\n  const message =\n    'inputRange must be monotonically non-decreasing ' + String(arr);\n  for (let i = 1; i < arr.length; ++i) {\n    invariant(arr[i] >= arr[i - 1], message);\n  }\n}\n\nfunction checkInfiniteRange(name: string, arr: $ReadOnlyArray<number>) {\n  invariant(arr.length >= 2, name + ' must have at least 2 elements');\n  invariant(\n    arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity,\n    /* $FlowFixMe[incompatible-type] (>=0.13.0) - In the addition expression\n     * below this comment, one or both of the operands may be something that\n     * doesn't cleanly convert to a string, like undefined, null, and object,\n     * etc. If you really mean this implicit string conversion, you can do\n     * something like String(myThing) */\n    name + 'cannot be ]-infinity;+infinity[ ' + arr,\n  );\n}\n\nexport default class AnimatedInterpolation<\n  OutputT: number | string,\n> extends AnimatedWithChildren {\n  // Export for testing.\n  static __createInterpolation: (\n    config: InterpolationConfigType<OutputT>,\n  ) => (input: number) => OutputT = createInterpolation;\n\n  _parent: AnimatedNode;\n  _config: InterpolationConfigType<OutputT>;\n  _interpolation: (input: number) => OutputT;\n\n  constructor(parent: AnimatedNode, config: InterpolationConfigType<OutputT>) {\n    super();\n    this._parent = parent;\n    this._config = config;\n    this._interpolation = createInterpolation(config);\n  }\n\n  __makeNative(platformConfig: ?PlatformConfig) {\n    this._parent.__makeNative(platformConfig);\n    super.__makeNative(platformConfig);\n  }\n\n  __getValue(): number | string {\n    const parentValue: number = this._parent.__getValue();\n    invariant(\n      typeof parentValue === 'number',\n      'Cannot interpolate an input which is not a number.',\n    );\n    return this._interpolation(parentValue);\n  }\n\n  interpolate<NewOutputT: number | string>(\n    config: InterpolationConfigType<NewOutputT>,\n  ): AnimatedInterpolation<NewOutputT> {\n    return new AnimatedInterpolation(this, config);\n  }\n\n  __attach(): void {\n    this._parent.__addChild(this);\n  }\n\n  __detach(): void {\n    this._parent.__removeChild(this);\n    super.__detach();\n  }\n\n  __transformDataType(range: $ReadOnlyArray<OutputT>): Array<any> {\n    return range.map(NativeAnimatedHelper.transformDataType);\n  }\n\n  __getNativeConfig(): any {\n    if (__DEV__) {\n      NativeAnimatedHelper.validateInterpolation(this._config);\n    }\n\n    return {\n      inputRange: this._config.inputRange,\n      // Only the `outputRange` can contain strings so we don't need to transform `inputRange` here\n      outputRange: this.__transformDataType(this._config.outputRange),\n      extrapolateLeft:\n        this._config.extrapolateLeft || this._config.extrapolate || 'extend',\n      extrapolateRight:\n        this._config.extrapolateRight || this._config.extrapolate || 'extend',\n      type: 'interpolation',\n    };\n  }\n}\n"],"mappings":"AAYA;;;;;;;;;;;;;;;;;;AAKA,OAAOA,cAAP;AACA,OAAOC,oBAAP;AACA,OAAOC,oBAAP;AACA,OAAOC,SAAP,MAAsB,WAAtB;;AAaA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,CAAD;EAAA,OAAeA,CAAf;AAAA,CAAf;;AAMA,SAASC,mBAAT,CACEC,MADF,EAE8B;EAC5B,IAAIA,MAAM,CAACC,WAAP,IAAsB,OAAOD,MAAM,CAACC,WAAP,CAAmB,CAAnB,CAAP,KAAiC,QAA3D,EAAqE;IACnE,OAAQC,wCAAwC,CAAEF,MAAF,CAAhD;EACD;;EAED,IAAMC,WAAmC,GAAID,MAAM,CAACC,WAApD;EAEA,IAAME,UAAU,GAAGH,MAAM,CAACG,UAA1B;;EAEA,IAAIC,OAAJ,EAAa;IACXC,kBAAkB,CAAC,aAAD,EAAgBJ,WAAhB,CAAlB;IACAI,kBAAkB,CAAC,YAAD,EAAeF,UAAf,CAAlB;IACAG,oBAAoB,CAACH,UAAD,CAApB;IAEAP,SAAS,CACPO,UAAU,CAACI,MAAX,KAAsBN,WAAW,CAACM,MAD3B,EAEP,iBACEJ,UAAU,CAACI,MADb,GAEE,qBAFF,GAGEN,WAAW,CAACM,MAHd,GAIE,6BANK,CAAT;EAQD;;EAED,IAAMC,MAAM,GAAGR,MAAM,CAACQ,MAAP,IAAiBX,MAAhC;EAEA,IAAIY,eAAgC,GAAG,QAAvC;;EACA,IAAIT,MAAM,CAACS,eAAP,KAA2BC,SAA/B,EAA0C;IACxCD,eAAe,GAAGT,MAAM,CAACS,eAAzB;EACD,CAFD,MAEO,IAAIT,MAAM,CAACW,WAAP,KAAuBD,SAA3B,EAAsC;IAC3CD,eAAe,GAAGT,MAAM,CAACW,WAAzB;EACD;;EAED,IAAIC,gBAAiC,GAAG,QAAxC;;EACA,IAAIZ,MAAM,CAACY,gBAAP,KAA4BF,SAAhC,EAA2C;IACzCE,gBAAgB,GAAGZ,MAAM,CAACY,gBAA1B;EACD,CAFD,MAEO,IAAIZ,MAAM,CAACW,WAAP,KAAuBD,SAA3B,EAAsC;IAC3CE,gBAAgB,GAAGZ,MAAM,CAACW,WAA1B;EACD;;EAED,OAAO,UAAAE,KAAK,EAAI;IACdjB,SAAS,CACP,OAAOiB,KAAP,KAAiB,QADV,EAEP,qDAFO,CAAT;IAKA,IAAMC,KAAK,GAAGC,SAAS,CAACF,KAAD,EAAQV,UAAR,CAAvB;IACA,OAAQa,WAAW,CACjBH,KADiB,EAEjBV,UAAU,CAACW,KAAD,CAFO,EAGjBX,UAAU,CAACW,KAAK,GAAG,CAAT,CAHO,EAIjBb,WAAW,CAACa,KAAD,CAJM,EAKjBb,WAAW,CAACa,KAAK,GAAG,CAAT,CALM,EAMjBN,MANiB,EAOjBC,eAPiB,EAQjBG,gBARiB,CAAnB;EAUD,CAjBD;AAkBD;;AAED,SAASI,WAAT,CACEH,KADF,EAEEI,QAFF,EAGEC,QAHF,EAIEC,SAJF,EAKEC,SALF,EAMEZ,MANF,EAOEC,eAPF,EAQEG,gBARF,EASE;EACA,IAAIS,MAAM,GAAGR,KAAb;;EAGA,IAAIQ,MAAM,GAAGJ,QAAb,EAAuB;IACrB,IAAIR,eAAe,KAAK,UAAxB,EAAoC;MAClC,OAAOY,MAAP;IACD,CAFD,MAEO,IAAIZ,eAAe,KAAK,OAAxB,EAAiC;MACtCY,MAAM,GAAGJ,QAAT;IACD,CAFM,MAEA,IAAIR,eAAe,KAAK,QAAxB,EAAkC,CAExC;EACF;;EAED,IAAIY,MAAM,GAAGH,QAAb,EAAuB;IACrB,IAAIN,gBAAgB,KAAK,UAAzB,EAAqC;MACnC,OAAOS,MAAP;IACD,CAFD,MAEO,IAAIT,gBAAgB,KAAK,OAAzB,EAAkC;MACvCS,MAAM,GAAGH,QAAT;IACD,CAFM,MAEA,IAAIN,gBAAgB,KAAK,QAAzB,EAAmC,CAEzC;EACF;;EAED,IAAIO,SAAS,KAAKC,SAAlB,EAA6B;IAC3B,OAAOD,SAAP;EACD;;EAED,IAAIF,QAAQ,KAAKC,QAAjB,EAA2B;IACzB,IAAIL,KAAK,IAAII,QAAb,EAAuB;MACrB,OAAOE,SAAP;IACD;;IACD,OAAOC,SAAP;EACD;;EAGD,IAAIH,QAAQ,KAAK,CAACK,QAAlB,EAA4B;IAC1BD,MAAM,GAAG,CAACA,MAAV;EACD,CAFD,MAEO,IAAIH,QAAQ,KAAKI,QAAjB,EAA2B;IAChCD,MAAM,GAAGA,MAAM,GAAGJ,QAAlB;EACD,CAFM,MAEA;IACLI,MAAM,GAAG,CAACA,MAAM,GAAGJ,QAAV,KAAuBC,QAAQ,GAAGD,QAAlC,CAAT;EACD;;EAGDI,MAAM,GAAGb,MAAM,CAACa,MAAD,CAAf;;EAGA,IAAIF,SAAS,KAAK,CAACG,QAAnB,EAA6B;IAC3BD,MAAM,GAAG,CAACA,MAAV;EACD,CAFD,MAEO,IAAID,SAAS,KAAKE,QAAlB,EAA4B;IACjCD,MAAM,GAAGA,MAAM,GAAGF,SAAlB;EACD,CAFM,MAEA;IACLE,MAAM,GAAGA,MAAM,IAAID,SAAS,GAAGD,SAAhB,CAAN,GAAmCA,SAA5C;EACD;;EAED,OAAOE,MAAP;AACD;;AAED,SAASE,WAAT,CAAqBV,KAArB,EAA4C;EAC1C,IAAIW,eAAe,GAAG/B,cAAc,CAACoB,KAAD,CAApC;;EACA,IAAIW,eAAe,KAAK,IAApB,IAA4B,OAAOA,eAAP,KAA2B,QAA3D,EAAqE;IACnE,OAAOX,KAAP;EACD;;EAEDW,eAAe,GAAGA,eAAe,IAAI,CAArC;EAEA,IAAMC,CAAC,GAAG,CAACD,eAAe,GAAG,UAAnB,MAAmC,EAA7C;EACA,IAAME,CAAC,GAAG,CAACF,eAAe,GAAG,UAAnB,MAAmC,EAA7C;EACA,IAAMG,CAAC,GAAG,CAACH,eAAe,GAAG,UAAnB,MAAmC,CAA7C;EACA,IAAMI,CAAC,GAAG,CAACJ,eAAe,GAAG,UAAnB,IAAiC,GAA3C;EAEA,iBAAeC,CAAf,UAAqBC,CAArB,UAA2BC,CAA3B,UAAiCC,CAAjC;AACD;;AAED,IAAMC,gBAAgB,GAAG,4CAAzB;;AAUA,SAAS3B,wCAAT,CACEF,MADF,EAE6B;EAC3B,IAAIC,WAA0B,GAAID,MAAM,CAACC,WAAzC;EACAL,SAAS,CAACK,WAAW,CAACM,MAAZ,IAAsB,CAAvB,EAA0B,kBAA1B,CAAT;EACAN,WAAW,GAAGA,WAAW,CAAC6B,GAAZ,CAAgBP,WAAhB,CAAd;EACAQ,YAAY,CAAC9B,WAAD,CAAZ;EAYA,IAAM+B,YAAY,GAAG/B,WAAW,CAAC,CAAD,CAAX,CAAegC,KAAf,CAAqBJ,gBAArB,EAAuCC,GAAvC,CAA2C;IAAA,OAAM,EAAN;EAAA,CAA3C,CAArB;EACA7B,WAAW,CAACiC,OAAZ,CAAoB,UAAAC,KAAK,EAAI;IAG3BA,KAAK,CAACF,KAAN,CAAYJ,gBAAZ,EAA8BK,OAA9B,CAAsC,UAACE,MAAD,EAASC,CAAT,EAAe;MACnDL,YAAY,CAACK,CAAD,CAAZ,CAAgBC,IAAhB,CAAqB,CAACF,MAAtB;IACD,CAFD;EAGD,CAND;EAQA,IAAMG,cAAc,GAAGtC,WAAW,CAAC,CAAD,CAAX,CACpBgC,KADoB,CACdJ,gBADc,EAMpBC,GANoB,CAMhB,UAACK,KAAD,EAAQE,CAAR,EAAc;IACjB,OAAOtC,mBAAmB,iCACrBC,MADqB;MAExBC,WAAW,EAAE+B,YAAY,CAACK,CAAD;IAFD,GAA1B;EAID,CAXoB,CAAvB;EAeA,IAAMG,WAAW,GAAGC,WAAW,CAACxC,WAAW,CAAC,CAAD,CAAZ,CAA/B;EAEA,OAAO,UAAAY,KAAK,EAAI;IACd,IAAIwB,CAAC,GAAG,CAAR;IAIA,OAAOpC,WAAW,CAAC,CAAD,CAAX,CAAeyC,OAAf,CAAuBb,gBAAvB,EAAyC,YAAM;MACpD,IAAIc,GAAG,GAAG,CAACJ,cAAc,CAACF,CAAC,EAAF,CAAd,CAAoBxB,KAApB,CAAX;;MACA,IAAI2B,WAAJ,EAAiB;QACfG,GAAG,GAAGN,CAAC,GAAG,CAAJ,GAAQO,IAAI,CAACC,KAAL,CAAWF,GAAX,CAAR,GAA0BC,IAAI,CAACC,KAAL,CAAWF,GAAG,GAAG,IAAjB,IAAyB,IAAzD;MACD;;MACD,OAAOG,MAAM,CAACH,GAAD,CAAb;IACD,CANM,CAAP;EAOD,CAZD;AAaD;;AAED,SAASF,WAAT,CAAqB3B,KAArB,EAAoC;EAClC,OAAO,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,CAACiC,UAAN,CAAiB,KAAjB,CAApC;AACD;;AAED,SAAShB,YAAT,CAAsBiB,GAAtB,EAAmD;EACjD,IAAMC,OAAO,GAAGD,GAAG,CAAC,CAAD,CAAH,CAAON,OAAP,CAAeb,gBAAf,EAAiC,EAAjC,CAAhB;;EACA,KAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGW,GAAG,CAACzC,MAAxB,EAAgC,EAAE8B,CAAlC,EAAqC;IACnCzC,SAAS,CACPqD,OAAO,KAAKD,GAAG,CAACX,CAAD,CAAH,CAAOK,OAAP,CAAeb,gBAAf,EAAiC,EAAjC,CADL,EAEP,qBAAqBmB,GAAG,CAAC,CAAD,CAAxB,GAA8B,OAA9B,GAAwCA,GAAG,CAACX,CAAD,CAFpC,CAAT;EAID;AACF;;AAED,SAAStB,SAAT,CAAmBF,KAAnB,EAAkCV,UAAlC,EAAsE;EACpE,IAAIkC,CAAJ;;EACA,KAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGlC,UAAU,CAACI,MAAX,GAAoB,CAApC,EAAuC,EAAE8B,CAAzC,EAA4C;IAC1C,IAAIlC,UAAU,CAACkC,CAAD,CAAV,IAAiBxB,KAArB,EAA4B;MAC1B;IACD;EACF;;EACD,OAAOwB,CAAC,GAAG,CAAX;AACD;;AAED,SAAS/B,oBAAT,CAA8B0C,GAA9B,EAA2D;EACzDpD,SAAS,CAACoD,GAAG,CAACzC,MAAJ,IAAc,CAAf,EAAkB,0CAAlB,CAAT;EACA,IAAM2C,OAAO,GACX,qDAAqDJ,MAAM,CAACE,GAAD,CAD7D;;EAEA,KAAK,IAAIX,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGW,GAAG,CAACzC,MAAxB,EAAgC,EAAE8B,CAAlC,EAAqC;IACnCzC,SAAS,CAACoD,GAAG,CAACX,CAAD,CAAH,IAAUW,GAAG,CAACX,CAAC,GAAG,CAAL,CAAd,EAAuBa,OAAvB,CAAT;EACD;AACF;;AAED,SAAS7C,kBAAT,CAA4B8C,IAA5B,EAA0CH,GAA1C,EAAuE;EACrEpD,SAAS,CAACoD,GAAG,CAACzC,MAAJ,IAAc,CAAf,EAAkB4C,IAAI,GAAG,gCAAzB,CAAT;EACAvD,SAAS,CACPoD,GAAG,CAACzC,MAAJ,KAAe,CAAf,IAAoByC,GAAG,CAAC,CAAD,CAAH,KAAW,CAAC1B,QAAhC,IAA4C0B,GAAG,CAAC,CAAD,CAAH,KAAW1B,QADhD,EAOP6B,IAAI,GAAG,kCAAP,GAA4CH,GAPrC,CAAT;AASD;;IAEoBI,qB;;;;;EAYnB,+BAAYC,MAAZ,EAAkCrD,MAAlC,EAA4E;IAAA;;IAAA;;IAC1E;IACA,MAAKsD,OAAL,GAAeD,MAAf;IACA,MAAKE,OAAL,GAAevD,MAAf;IACA,MAAKwD,cAAL,GAAsBzD,mBAAmB,CAACC,MAAD,CAAzC;IAJ0E;EAK3E;;;;WAED,sBAAayD,cAAb,EAA8C;MAC5C,KAAKH,OAAL,CAAaI,YAAb,CAA0BD,cAA1B;;MACA,wFAAmBA,cAAnB;IACD;;;WAED,sBAA8B;MAC5B,IAAME,WAAmB,GAAG,KAAKL,OAAL,CAAaM,UAAb,EAA5B;;MACAhE,SAAS,CACP,OAAO+D,WAAP,KAAuB,QADhB,EAEP,oDAFO,CAAT;MAIA,OAAO,KAAKH,cAAL,CAAoBG,WAApB,CAAP;IACD;;;WAED,qBACE3D,MADF,EAEqC;MACnC,OAAO,IAAIoD,qBAAJ,CAA0B,IAA1B,EAAgCpD,MAAhC,CAAP;IACD;;;WAED,oBAAiB;MACf,KAAKsD,OAAL,CAAaO,UAAb,CAAwB,IAAxB;IACD;;;WAED,oBAAiB;MACf,KAAKP,OAAL,CAAaQ,aAAb,CAA2B,IAA3B;;MACA;IACD;;;WAED,6BAAoBhD,KAApB,EAAgE;MAC9D,OAAOA,KAAK,CAACgB,GAAN,CAAUpC,oBAAoB,CAACqE,iBAA/B,CAAP;IACD;;;WAED,6BAAyB;MACvB,IAAI3D,OAAJ,EAAa;QACXV,oBAAoB,CAACsE,qBAArB,CAA2C,KAAKT,OAAhD;MACD;;MAED,OAAO;QACLpD,UAAU,EAAE,KAAKoD,OAAL,CAAapD,UADpB;QAGLF,WAAW,EAAE,KAAKgE,mBAAL,CAAyB,KAAKV,OAAL,CAAatD,WAAtC,CAHR;QAILQ,eAAe,EACb,KAAK8C,OAAL,CAAa9C,eAAb,IAAgC,KAAK8C,OAAL,CAAa5C,WAA7C,IAA4D,QALzD;QAMLC,gBAAgB,EACd,KAAK2C,OAAL,CAAa3C,gBAAb,IAAiC,KAAK2C,OAAL,CAAa5C,WAA9C,IAA6D,QAP1D;QAQLuD,IAAI,EAAE;MARD,CAAP;IAUD;;;;EAjEOvE,oB;;AAFWyD,qB,CAIZe,qB,GAE2BpE,mB;SANfqD,qB"},"metadata":{},"sourceType":"module"}