{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport Platform from \"../Utilities/Platform\";\nimport RCTAlertManager from \"./RCTAlertManager\";\n\nvar Alert = function () {\n  function Alert() {\n    _classCallCheck(this, Alert);\n  }\n\n  _createClass(Alert, null, [{\n    key: \"alert\",\n    value: function alert(title, message, buttons, options) {\n      if (Platform.OS === 'ios') {\n        Alert.prompt(title, message, buttons, 'default', undefined, undefined, options);\n      } else if (Platform.OS === 'android') {\n        var NativeDialogManagerAndroid = require(\"../NativeModules/specs/NativeDialogManagerAndroid\").default;\n\n        if (!NativeDialogManagerAndroid) {\n          return;\n        }\n\n        var constants = NativeDialogManagerAndroid.getConstants();\n        var config = {\n          title: title || '',\n          message: message || '',\n          cancelable: false\n        };\n\n        if (options && options.cancelable) {\n          config.cancelable = options.cancelable;\n        }\n\n        var defaultPositiveText = 'OK';\n        var validButtons = buttons ? buttons.slice(0, 3) : [{\n          text: defaultPositiveText\n        }];\n        var buttonPositive = validButtons.pop();\n        var buttonNegative = validButtons.pop();\n        var buttonNeutral = validButtons.pop();\n\n        if (buttonNeutral) {\n          config.buttonNeutral = buttonNeutral.text || '';\n        }\n\n        if (buttonNegative) {\n          config.buttonNegative = buttonNegative.text || '';\n        }\n\n        if (buttonPositive) {\n          config.buttonPositive = buttonPositive.text || defaultPositiveText;\n        }\n\n        var onAction = function onAction(action, buttonKey) {\n          if (action === constants.buttonClicked) {\n            if (buttonKey === constants.buttonNeutral) {\n              buttonNeutral.onPress && buttonNeutral.onPress();\n            } else if (buttonKey === constants.buttonNegative) {\n              buttonNegative.onPress && buttonNegative.onPress();\n            } else if (buttonKey === constants.buttonPositive) {\n              buttonPositive.onPress && buttonPositive.onPress();\n            }\n          } else if (action === constants.dismissed) {\n            options && options.onDismiss && options.onDismiss();\n          }\n        };\n\n        var onError = function onError(errorMessage) {\n          return console.warn(errorMessage);\n        };\n\n        NativeDialogManagerAndroid.showAlert(config, onError, onAction);\n      }\n    }\n  }, {\n    key: \"prompt\",\n    value: function prompt(title, message, callbackOrButtons) {\n      var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'plain-text';\n      var defaultValue = arguments.length > 4 ? arguments[4] : undefined;\n      var keyboardType = arguments.length > 5 ? arguments[5] : undefined;\n      var options = arguments.length > 6 ? arguments[6] : undefined;\n\n      if (Platform.OS === 'ios') {\n        var callbacks = [];\n        var buttons = [];\n        var cancelButtonKey;\n        var destructiveButtonKey;\n        var preferredButtonKey;\n\n        if (typeof callbackOrButtons === 'function') {\n          callbacks = [callbackOrButtons];\n        } else if (Array.isArray(callbackOrButtons)) {\n          callbackOrButtons.forEach(function (btn, index) {\n            callbacks[index] = btn.onPress;\n\n            if (btn.style === 'cancel') {\n              cancelButtonKey = String(index);\n            } else if (btn.style === 'destructive') {\n              destructiveButtonKey = String(index);\n            }\n\n            if (btn.isPreferred) {\n              preferredButtonKey = String(index);\n            }\n\n            if (btn.text || index < (callbackOrButtons || []).length - 1) {\n              var btnDef = {};\n              btnDef[index] = btn.text || '';\n              buttons.push(btnDef);\n            }\n          });\n        }\n\n        RCTAlertManager.alertWithArgs({\n          title: title || '',\n          message: message || undefined,\n          buttons: buttons,\n          type: type || undefined,\n          defaultValue: defaultValue,\n          cancelButtonKey: cancelButtonKey,\n          destructiveButtonKey: destructiveButtonKey,\n          preferredButtonKey: preferredButtonKey,\n          keyboardType: keyboardType,\n          userInterfaceStyle: (options == null ? void 0 : options.userInterfaceStyle) || undefined\n        }, function (id, value) {\n          var cb = callbacks[id];\n          cb && cb(value);\n        });\n      }\n    }\n  }]);\n\n  return Alert;\n}();\n\nmodule.exports = Alert;","map":{"version":3,"names":["Platform","RCTAlertManager","Alert","title","message","buttons","options","OS","prompt","undefined","NativeDialogManagerAndroid","require","default","constants","getConstants","config","cancelable","defaultPositiveText","validButtons","slice","text","buttonPositive","pop","buttonNegative","buttonNeutral","onAction","action","buttonKey","buttonClicked","onPress","dismissed","onDismiss","onError","errorMessage","console","warn","showAlert","callbackOrButtons","type","defaultValue","keyboardType","callbacks","cancelButtonKey","destructiveButtonKey","preferredButtonKey","Array","isArray","forEach","btn","index","style","String","isPreferred","length","btnDef","push","alertWithArgs","userInterfaceStyle","id","value","cb","module","exports"],"sources":["/Users/zagarellagabriele/Desktop/Progetti/React Native/React-Native-Exercises/node_modules/react-native/Libraries/Alert/Alert.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\nimport type {DialogOptions} from '../NativeModules/specs/NativeDialogManagerAndroid';\n\nimport Platform from '../Utilities/Platform';\nimport RCTAlertManager from './RCTAlertManager';\n\nexport type AlertType =\n  | 'default'\n  | 'plain-text'\n  | 'secure-text'\n  | 'login-password';\nexport type AlertButtonStyle = 'default' | 'cancel' | 'destructive';\nexport type Buttons = Array<{\n  text?: string,\n  onPress?: ?Function,\n  isPreferred?: boolean,\n  style?: AlertButtonStyle,\n  ...\n}>;\n\ntype Options = {\n  cancelable?: ?boolean,\n  userInterfaceStyle?: 'unspecified' | 'light' | 'dark',\n  onDismiss?: ?() => void,\n  ...\n};\n\n/**\n * Launches an alert dialog with the specified title and message.\n *\n * See https://reactnative.dev/docs/alert\n */\nclass Alert {\n  static alert(\n    title: ?string,\n    message?: ?string,\n    buttons?: Buttons,\n    options?: Options,\n  ): void {\n    if (Platform.OS === 'ios') {\n      Alert.prompt(\n        title,\n        message,\n        buttons,\n        'default',\n        undefined,\n        undefined,\n        options,\n      );\n    } else if (Platform.OS === 'android') {\n      const NativeDialogManagerAndroid =\n        require('../NativeModules/specs/NativeDialogManagerAndroid').default;\n      if (!NativeDialogManagerAndroid) {\n        return;\n      }\n      const constants = NativeDialogManagerAndroid.getConstants();\n\n      const config: DialogOptions = {\n        title: title || '',\n        message: message || '',\n        cancelable: false,\n      };\n\n      if (options && options.cancelable) {\n        config.cancelable = options.cancelable;\n      }\n      // At most three buttons (neutral, negative, positive). Ignore rest.\n      // The text 'OK' should be probably localized. iOS Alert does that in native.\n      const defaultPositiveText = 'OK';\n      const validButtons: Buttons = buttons\n        ? buttons.slice(0, 3)\n        : [{text: defaultPositiveText}];\n      const buttonPositive = validButtons.pop();\n      const buttonNegative = validButtons.pop();\n      const buttonNeutral = validButtons.pop();\n\n      if (buttonNeutral) {\n        config.buttonNeutral = buttonNeutral.text || '';\n      }\n      if (buttonNegative) {\n        config.buttonNegative = buttonNegative.text || '';\n      }\n      if (buttonPositive) {\n        config.buttonPositive = buttonPositive.text || defaultPositiveText;\n      }\n\n      /* $FlowFixMe[missing-local-annot] The type annotation(s) required by\n       * Flow's LTI update could not be added via codemod */\n      const onAction = (action, buttonKey) => {\n        if (action === constants.buttonClicked) {\n          if (buttonKey === constants.buttonNeutral) {\n            buttonNeutral.onPress && buttonNeutral.onPress();\n          } else if (buttonKey === constants.buttonNegative) {\n            buttonNegative.onPress && buttonNegative.onPress();\n          } else if (buttonKey === constants.buttonPositive) {\n            buttonPositive.onPress && buttonPositive.onPress();\n          }\n        } else if (action === constants.dismissed) {\n          options && options.onDismiss && options.onDismiss();\n        }\n      };\n      const onError = (errorMessage: string) => console.warn(errorMessage);\n      NativeDialogManagerAndroid.showAlert(config, onError, onAction);\n    }\n  }\n\n  static prompt(\n    title: ?string,\n    message?: ?string,\n    callbackOrButtons?: ?(((text: string) => void) | Buttons),\n    type?: ?AlertType = 'plain-text',\n    defaultValue?: string,\n    keyboardType?: string,\n    options?: Options,\n  ): void {\n    if (Platform.OS === 'ios') {\n      let callbacks: Array<?any> = [];\n      const buttons = [];\n      let cancelButtonKey;\n      let destructiveButtonKey;\n      let preferredButtonKey;\n      if (typeof callbackOrButtons === 'function') {\n        callbacks = [callbackOrButtons];\n      } else if (Array.isArray(callbackOrButtons)) {\n        callbackOrButtons.forEach((btn, index) => {\n          callbacks[index] = btn.onPress;\n          if (btn.style === 'cancel') {\n            cancelButtonKey = String(index);\n          } else if (btn.style === 'destructive') {\n            destructiveButtonKey = String(index);\n          }\n          if (btn.isPreferred) {\n            preferredButtonKey = String(index);\n          }\n          if (btn.text || index < (callbackOrButtons || []).length - 1) {\n            const btnDef: {[number]: string} = {};\n            btnDef[index] = btn.text || '';\n            buttons.push(btnDef);\n          }\n        });\n      }\n\n      RCTAlertManager.alertWithArgs(\n        {\n          title: title || '',\n          message: message || undefined,\n          buttons,\n          type: type || undefined,\n          defaultValue,\n          cancelButtonKey,\n          destructiveButtonKey,\n          preferredButtonKey,\n          keyboardType,\n          userInterfaceStyle: options?.userInterfaceStyle || undefined,\n        },\n        (id, value) => {\n          const cb = callbacks[id];\n          cb && cb(value);\n        },\n      );\n    }\n  }\n}\n\nmodule.exports = Alert;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}