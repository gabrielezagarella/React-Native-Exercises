{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { EventTypes, MouseButtons, PointerType } from \"../interfaces\";\nimport EventManager from \"./EventManager\";\nimport { isPointerInBounds } from \"../utils\";\n\nvar PointerEventManager = function (_EventManager) {\n  _inherits(PointerEventManager, _EventManager);\n\n  var _super = _createSuper(PointerEventManager);\n\n  function PointerEventManager() {\n    _classCallCheck(this, PointerEventManager);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(PointerEventManager, [{\n    key: \"setListeners\",\n    value: function setListeners() {\n      var _this = this;\n\n      this.view.addEventListener('pointerdown', function (event) {\n        if (event.pointerType === PointerType.TOUCH) {\n          return;\n        }\n\n        if (!isPointerInBounds(_this.view, {\n          x: event.clientX,\n          y: event.clientY\n        })) {\n          return;\n        }\n\n        var adaptedEvent = _this.mapEvent(event, EventTypes.DOWN);\n\n        var target = event.target;\n        target.setPointerCapture(adaptedEvent.pointerId);\n\n        _this.markAsInBounds(adaptedEvent.pointerId);\n\n        if (++_this.activePointersCounter > 1) {\n          adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_DOWN;\n\n          _this.onPointerAdd(adaptedEvent);\n        } else {\n          _this.onPointerDown(adaptedEvent);\n        }\n      });\n      this.view.addEventListener('pointerup', function (event) {\n        if (event.pointerType === PointerType.TOUCH) {\n          return;\n        }\n\n        if (_this.activePointersCounter === 0) {\n          return;\n        }\n\n        var adaptedEvent = _this.mapEvent(event, EventTypes.UP);\n\n        var target = event.target;\n        target.releasePointerCapture(adaptedEvent.pointerId);\n\n        _this.markAsOutOfBounds(adaptedEvent.pointerId);\n\n        if (--_this.activePointersCounter > 0) {\n          adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_UP;\n\n          _this.onPointerRemove(adaptedEvent);\n        } else {\n          _this.onPointerUp(adaptedEvent);\n        }\n      });\n      this.view.addEventListener('pointermove', function (event) {\n        if (event.pointerType === PointerType.TOUCH) {\n          return;\n        }\n\n        if (event.pointerType === PointerType.MOUSE && event.buttons !== MouseButtons.LEFT) {\n          return;\n        }\n\n        var adaptedEvent = _this.mapEvent(event, EventTypes.MOVE);\n\n        var inBounds = isPointerInBounds(_this.view, {\n          x: adaptedEvent.x,\n          y: adaptedEvent.y\n        });\n\n        var pointerIndex = _this.pointersInBounds.indexOf(adaptedEvent.pointerId);\n\n        if (inBounds) {\n          if (pointerIndex < 0) {\n            adaptedEvent.eventType = EventTypes.ENTER;\n\n            _this.onPointerEnter(adaptedEvent);\n\n            _this.markAsInBounds(adaptedEvent.pointerId);\n          } else {\n            _this.onPointerMove(adaptedEvent);\n          }\n        } else {\n          if (pointerIndex >= 0) {\n            adaptedEvent.eventType = EventTypes.OUT;\n\n            _this.onPointerOut(adaptedEvent);\n\n            _this.markAsOutOfBounds(adaptedEvent.pointerId);\n          } else {\n            _this.onPointerOutOfBounds(adaptedEvent);\n          }\n        }\n      });\n      this.view.addEventListener('pointercancel', function (event) {\n        if (event.pointerType === PointerType.TOUCH) {\n          return;\n        }\n\n        var adaptedEvent = _this.mapEvent(event, EventTypes.CANCEL);\n\n        _this.onPointerCancel(adaptedEvent);\n\n        _this.markAsOutOfBounds(adaptedEvent.pointerId);\n\n        _this.activePointersCounter = 0;\n      });\n    }\n  }, {\n    key: \"mapEvent\",\n    value: function mapEvent(event, eventType) {\n      return {\n        x: event.clientX,\n        y: event.clientY,\n        offsetX: event.offsetX,\n        offsetY: event.offsetY,\n        pointerId: event.pointerId,\n        eventType: eventType,\n        pointerType: event.pointerType,\n        buttons: event.buttons,\n        time: event.timeStamp\n      };\n    }\n  }]);\n\n  return PointerEventManager;\n}(EventManager);\n\nexport { PointerEventManager as default };","map":{"version":3,"sources":["PointerEventManager.ts"],"names":["setListeners","event","PointerType","isPointerInBounds","x","y","clientY","adaptedEvent","EventTypes","target","MouseButtons","inBounds","pointerIndex","mapEvent","offsetX","offsetY","pointerId","eventType","pointerType","buttons","time","timeStamp"],"mappings":"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","sourcesContent":["import {\n  AdaptedEvent,\n  EventTypes,\n  MouseButtons,\n  PointerType,\n} from '../interfaces';\nimport EventManager from './EventManager';\nimport { isPointerInBounds } from '../utils';\n\nexport default class PointerEventManager extends EventManager {\n  public setListeners(): void {\n    this.view.addEventListener('pointerdown', (event: PointerEvent): void => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n      if (\n        !isPointerInBounds(this.view, { x: event.clientX, y: event.clientY })\n      ) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.DOWN);\n      const target = event.target as HTMLElement;\n\n      target.setPointerCapture(adaptedEvent.pointerId);\n      this.markAsInBounds(adaptedEvent.pointerId);\n\n      if (++this.activePointersCounter > 1) {\n        adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_DOWN;\n        this.onPointerAdd(adaptedEvent);\n      } else {\n        this.onPointerDown(adaptedEvent);\n      }\n    });\n\n    this.view.addEventListener('pointerup', (event: PointerEvent): void => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n\n      // When we call reset on gesture handlers, it also resets their event managers\n      // In some handlers (like RotationGestureHandler) reset is called before all pointers leave view\n      // This means, that activePointersCounter will be set to 0, while there are still remaining pointers on view\n      // Removing them will end in activePointersCounter going below 0, therefore handlers won't behave properly\n      if (this.activePointersCounter === 0) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.UP);\n      const target = event.target as HTMLElement;\n\n      target.releasePointerCapture(adaptedEvent.pointerId);\n      this.markAsOutOfBounds(adaptedEvent.pointerId);\n\n      if (--this.activePointersCounter > 0) {\n        adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_UP;\n        this.onPointerRemove(adaptedEvent);\n      } else {\n        this.onPointerUp(adaptedEvent);\n      }\n    });\n\n    this.view.addEventListener('pointermove', (event: PointerEvent): void => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n\n      if (\n        event.pointerType === PointerType.MOUSE &&\n        event.buttons !== MouseButtons.LEFT\n      ) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.MOVE);\n\n      const inBounds: boolean = isPointerInBounds(this.view, {\n        x: adaptedEvent.x,\n        y: adaptedEvent.y,\n      });\n\n      const pointerIndex: number = this.pointersInBounds.indexOf(\n        adaptedEvent.pointerId\n      );\n\n      if (inBounds) {\n        if (pointerIndex < 0) {\n          adaptedEvent.eventType = EventTypes.ENTER;\n          this.onPointerEnter(adaptedEvent);\n          this.markAsInBounds(adaptedEvent.pointerId);\n        } else {\n          this.onPointerMove(adaptedEvent);\n        }\n      } else {\n        if (pointerIndex >= 0) {\n          adaptedEvent.eventType = EventTypes.OUT;\n          this.onPointerOut(adaptedEvent);\n          this.markAsOutOfBounds(adaptedEvent.pointerId);\n        } else {\n          this.onPointerOutOfBounds(adaptedEvent);\n        }\n      }\n    });\n\n    this.view.addEventListener('pointercancel', (event: PointerEvent): void => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(\n        event,\n        EventTypes.CANCEL\n      );\n\n      this.onPointerCancel(adaptedEvent);\n      this.markAsOutOfBounds(adaptedEvent.pointerId);\n      this.activePointersCounter = 0;\n    });\n  }\n\n  protected mapEvent(event: PointerEvent, eventType: EventTypes): AdaptedEvent {\n    return {\n      x: event.clientX,\n      y: event.clientY,\n      offsetX: event.offsetX,\n      offsetY: event.offsetY,\n      pointerId: event.pointerId,\n      eventType: eventType,\n      pointerType: event.pointerType as PointerType,\n      buttons: event.buttons,\n      time: event.timeStamp,\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}