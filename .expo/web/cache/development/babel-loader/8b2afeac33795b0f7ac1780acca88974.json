{"ast":null,"code":"import { SyntheticError, handleException } from \"./ExceptionsManager\";\nvar ReactFiberErrorDialog = {\n  showErrorDialog: function showErrorDialog(_ref) {\n    var componentStack = _ref.componentStack,\n        errorValue = _ref.error;\n    var error;\n\n    if (errorValue instanceof Error) {\n      error = errorValue;\n    } else if (typeof errorValue === 'string') {\n      error = new SyntheticError(errorValue);\n    } else {\n      error = new SyntheticError('Unspecified error');\n    }\n\n    try {\n      error.componentStack = componentStack;\n      error.isComponentError = true;\n    } catch (_unused) {}\n\n    handleException(error, false);\n    return false;\n  }\n};\nexport default ReactFiberErrorDialog;","map":{"version":3,"names":["SyntheticError","handleException","ReactFiberErrorDialog","showErrorDialog","componentStack","errorValue","error","Error","isComponentError"],"sources":["/Users/zagarellagabriele/Desktop/Progetti/React Native/React-Native-Exercises/node_modules/react-native/Libraries/Core/ReactFiberErrorDialog.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport type {ExtendedError} from './ExtendedError';\n\nimport {SyntheticError, handleException} from './ExceptionsManager';\n\nexport type CapturedError = {\n  +componentStack: string,\n  +error: mixed,\n  +errorBoundary: ?{...},\n  ...\n};\n\nconst ReactFiberErrorDialog = {\n  /**\n   * Intercept lifecycle errors and ensure they are shown with the correct stack\n   * trace within the native redbox component.\n   */\n  showErrorDialog({componentStack, error: errorValue}: CapturedError): boolean {\n    let error: ?ExtendedError;\n\n    // Typically, `errorValue` should be an error. However, other values such as\n    // strings (or even null) are sometimes thrown.\n    if (errorValue instanceof Error) {\n      /* $FlowFixMe[class-object-subtyping] added when improving typing for\n       * this parameters */\n      error = (errorValue: ExtendedError);\n    } else if (typeof errorValue === 'string') {\n      /* $FlowFixMe[class-object-subtyping] added when improving typing for\n       * this parameters */\n      error = (new SyntheticError(errorValue): ExtendedError);\n    } else {\n      /* $FlowFixMe[class-object-subtyping] added when improving typing for\n       * this parameters */\n      error = (new SyntheticError('Unspecified error'): ExtendedError);\n    }\n    try {\n      error.componentStack = componentStack;\n      error.isComponentError = true;\n    } catch {\n      // Ignored.\n    }\n\n    handleException(error, false);\n\n    // Return false here to prevent ReactFiberErrorLogger default behavior of\n    // logging error details to console.error. Calls to console.error are\n    // automatically routed to the native redbox controller, which we've already\n    // done above by calling ExceptionsManager.\n    return false;\n  },\n};\n\nexport default ReactFiberErrorDialog;\n"],"mappings":"AAYA,SAAQA,cAAR,EAAwBC,eAAxB;AASA,IAAMC,qBAAqB,GAAG;EAK5BC,eAL4B,iCAKiD;IAAA,IAA5DC,cAA4D,QAA5DA,cAA4D;IAAA,IAArCC,UAAqC,QAA5CC,KAA4C;IAC3E,IAAIA,KAAJ;;IAIA,IAAID,UAAU,YAAYE,KAA1B,EAAiC;MAG/BD,KAAK,GAAID,UAAT;IACD,CAJD,MAIO,IAAI,OAAOA,UAAP,KAAsB,QAA1B,EAAoC;MAGzCC,KAAK,GAAI,IAAIN,cAAJ,CAAmBK,UAAnB,CAAT;IACD,CAJM,MAIA;MAGLC,KAAK,GAAI,IAAIN,cAAJ,CAAmB,mBAAnB,CAAT;IACD;;IACD,IAAI;MACFM,KAAK,CAACF,cAAN,GAAuBA,cAAvB;MACAE,KAAK,CAACE,gBAAN,GAAyB,IAAzB;IACD,CAHD,CAGE,gBAAM,CAEP;;IAEDP,eAAe,CAACK,KAAD,EAAQ,KAAR,CAAf;IAMA,OAAO,KAAP;EACD;AArC2B,CAA9B;AAwCA,eAAeJ,qBAAf"},"metadata":{},"sourceType":"module"}