{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _NativeStatusBarManag;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport processColor from \"../../StyleSheet/processColor\";\nimport Platform from \"../../Utilities/Platform\";\nimport NativeStatusBarManagerAndroid from \"./NativeStatusBarManagerAndroid\";\nimport NativeStatusBarManagerIOS from \"./NativeStatusBarManagerIOS\";\nimport invariant from 'invariant';\nimport * as React from 'react';\n\nfunction mergePropsStack(propsStack, defaultValues) {\n  return propsStack.reduce(function (prev, cur) {\n    for (var prop in cur) {\n      if (cur[prop] != null) {\n        prev[prop] = cur[prop];\n      }\n    }\n\n    return prev;\n  }, _objectSpread({}, defaultValues));\n}\n\nfunction createStackEntry(props) {\n  var _props$animated, _props$showHideTransi;\n\n  var animated = (_props$animated = props.animated) != null ? _props$animated : false;\n  var showHideTransition = (_props$showHideTransi = props.showHideTransition) != null ? _props$showHideTransi : 'fade';\n  return {\n    backgroundColor: props.backgroundColor != null ? {\n      value: props.backgroundColor,\n      animated: animated\n    } : null,\n    barStyle: props.barStyle != null ? {\n      value: props.barStyle,\n      animated: animated\n    } : null,\n    translucent: props.translucent,\n    hidden: props.hidden != null ? {\n      value: props.hidden,\n      animated: animated,\n      transition: showHideTransition\n    } : null,\n    networkActivityIndicatorVisible: props.networkActivityIndicatorVisible\n  };\n}\n\nvar StatusBar = function (_React$Component) {\n  _inherits(StatusBar, _React$Component);\n\n  var _super = _createSuper(StatusBar);\n\n  function StatusBar() {\n    var _this;\n\n    _classCallCheck(this, StatusBar);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this._stackEntry = null;\n    return _this;\n  }\n\n  _createClass(StatusBar, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._stackEntry = StatusBar.pushStackEntry(this.props);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      StatusBar.popStackEntry(this._stackEntry);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this._stackEntry = StatusBar.replaceStackEntry(this._stackEntry, this.props);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return null;\n    }\n  }], [{\n    key: \"setHidden\",\n    value: function setHidden(hidden, animation) {\n      animation = animation || 'none';\n      StatusBar._defaultProps.hidden.value = hidden;\n\n      if (Platform.OS === 'ios') {\n        NativeStatusBarManagerIOS.setHidden(hidden, animation);\n      } else if (Platform.OS === 'android') {\n        NativeStatusBarManagerAndroid.setHidden(hidden);\n      }\n    }\n  }, {\n    key: \"setBarStyle\",\n    value: function setBarStyle(style, animated) {\n      animated = animated || false;\n      StatusBar._defaultProps.barStyle.value = style;\n\n      if (Platform.OS === 'ios') {\n        NativeStatusBarManagerIOS.setStyle(style, animated);\n      } else if (Platform.OS === 'android') {\n        NativeStatusBarManagerAndroid.setStyle(style);\n      }\n    }\n  }, {\n    key: \"setNetworkActivityIndicatorVisible\",\n    value: function setNetworkActivityIndicatorVisible(visible) {\n      if (Platform.OS !== 'ios') {\n        console.warn('`setNetworkActivityIndicatorVisible` is only available on iOS');\n        return;\n      }\n\n      StatusBar._defaultProps.networkActivityIndicatorVisible = visible;\n      NativeStatusBarManagerIOS.setNetworkActivityIndicatorVisible(visible);\n    }\n  }, {\n    key: \"setBackgroundColor\",\n    value: function setBackgroundColor(color, animated) {\n      if (Platform.OS !== 'android') {\n        console.warn('`setBackgroundColor` is only available on Android');\n        return;\n      }\n\n      animated = animated || false;\n      StatusBar._defaultProps.backgroundColor.value = color;\n      var processedColor = processColor(color);\n\n      if (processedColor == null) {\n        console.warn(\"`StatusBar.setBackgroundColor`: Color \" + color + \" parsed to null or undefined\");\n        return;\n      }\n\n      invariant(typeof processedColor === 'number', 'Unexpected color given for StatusBar.setBackgroundColor');\n      NativeStatusBarManagerAndroid.setColor(processedColor, animated);\n    }\n  }, {\n    key: \"setTranslucent\",\n    value: function setTranslucent(translucent) {\n      if (Platform.OS !== 'android') {\n        console.warn('`setTranslucent` is only available on Android');\n        return;\n      }\n\n      StatusBar._defaultProps.translucent = translucent;\n      NativeStatusBarManagerAndroid.setTranslucent(translucent);\n    }\n  }, {\n    key: \"pushStackEntry\",\n    value: function pushStackEntry(props) {\n      var entry = createStackEntry(props);\n\n      StatusBar._propsStack.push(entry);\n\n      StatusBar._updatePropsStack();\n\n      return entry;\n    }\n  }, {\n    key: \"popStackEntry\",\n    value: function popStackEntry(entry) {\n      var index = StatusBar._propsStack.indexOf(entry);\n\n      if (index !== -1) {\n        StatusBar._propsStack.splice(index, 1);\n      }\n\n      StatusBar._updatePropsStack();\n    }\n  }, {\n    key: \"replaceStackEntry\",\n    value: function replaceStackEntry(entry, props) {\n      var newEntry = createStackEntry(props);\n\n      var index = StatusBar._propsStack.indexOf(entry);\n\n      if (index !== -1) {\n        StatusBar._propsStack[index] = newEntry;\n      }\n\n      StatusBar._updatePropsStack();\n\n      return newEntry;\n    }\n  }]);\n\n  return StatusBar;\n}(React.Component);\n\nStatusBar._propsStack = [];\nStatusBar._defaultProps = createStackEntry({\n  backgroundColor: Platform.OS === 'android' ? (_NativeStatusBarManag = NativeStatusBarManagerAndroid.getConstants().DEFAULT_BACKGROUND_COLOR) != null ? _NativeStatusBarManag : 'black' : 'black',\n  barStyle: 'default',\n  translucent: false,\n  hidden: false,\n  networkActivityIndicatorVisible: false\n});\nStatusBar._updateImmediate = null;\nStatusBar._currentValues = null;\nStatusBar.currentHeight = Platform.OS === 'android' ? NativeStatusBarManagerAndroid.getConstants().HEIGHT : null;\n\nStatusBar._updatePropsStack = function () {\n  clearImmediate(StatusBar._updateImmediate);\n  StatusBar._updateImmediate = setImmediate(function () {\n    var oldProps = StatusBar._currentValues;\n    var mergedProps = mergePropsStack(StatusBar._propsStack, StatusBar._defaultProps);\n\n    if (Platform.OS === 'ios') {\n      if (!oldProps || oldProps.barStyle.value !== mergedProps.barStyle.value) {\n        NativeStatusBarManagerIOS.setStyle(mergedProps.barStyle.value, mergedProps.barStyle.animated || false);\n      }\n\n      if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {\n        NativeStatusBarManagerIOS.setHidden(mergedProps.hidden.value, mergedProps.hidden.animated ? mergedProps.hidden.transition : 'none');\n      }\n\n      if (!oldProps || oldProps.networkActivityIndicatorVisible !== mergedProps.networkActivityIndicatorVisible) {\n        NativeStatusBarManagerIOS.setNetworkActivityIndicatorVisible(mergedProps.networkActivityIndicatorVisible);\n      }\n    } else if (Platform.OS === 'android') {\n      NativeStatusBarManagerAndroid.setStyle(mergedProps.barStyle.value);\n      var processedColor = processColor(mergedProps.backgroundColor.value);\n\n      if (processedColor == null) {\n        console.warn(\"`StatusBar._updatePropsStack`: Color \" + mergedProps.backgroundColor.value + \" parsed to null or undefined\");\n      } else {\n        invariant(typeof processedColor === 'number', 'Unexpected color given in StatusBar._updatePropsStack');\n        NativeStatusBarManagerAndroid.setColor(processedColor, mergedProps.backgroundColor.animated);\n      }\n\n      if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {\n        NativeStatusBarManagerAndroid.setHidden(mergedProps.hidden.value);\n      }\n\n      if (!oldProps || oldProps.translucent !== mergedProps.translucent || mergedProps.translucent) {\n        NativeStatusBarManagerAndroid.setTranslucent(mergedProps.translucent);\n      }\n    }\n\n    StatusBar._currentValues = mergedProps;\n  });\n};\n\nmodule.exports = StatusBar;","map":{"version":3,"names":["processColor","Platform","NativeStatusBarManagerAndroid","NativeStatusBarManagerIOS","invariant","React","mergePropsStack","propsStack","defaultValues","reduce","prev","cur","prop","createStackEntry","props","animated","showHideTransition","backgroundColor","value","barStyle","translucent","hidden","transition","networkActivityIndicatorVisible","StatusBar","_stackEntry","pushStackEntry","popStackEntry","replaceStackEntry","animation","_defaultProps","OS","setHidden","style","setStyle","visible","console","warn","setNetworkActivityIndicatorVisible","color","processedColor","setColor","setTranslucent","entry","_propsStack","push","_updatePropsStack","index","indexOf","splice","newEntry","Component","getConstants","DEFAULT_BACKGROUND_COLOR","_updateImmediate","_currentValues","currentHeight","HEIGHT","clearImmediate","setImmediate","oldProps","mergedProps","module","exports"],"sources":["/Users/zagarellagabriele/Desktop/Progetti/React Native/React-Native-Exercises/node_modules/react-native/Libraries/Components/StatusBar/StatusBar.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\nimport type {ColorValue} from '../../StyleSheet/StyleSheet';\n\nimport processColor from '../../StyleSheet/processColor';\nimport Platform from '../../Utilities/Platform';\nimport NativeStatusBarManagerAndroid from './NativeStatusBarManagerAndroid';\nimport NativeStatusBarManagerIOS from './NativeStatusBarManagerIOS';\nimport invariant from 'invariant';\nimport * as React from 'react';\n\n/**\n * Status bar style\n */\nexport type StatusBarStyle = $Keys<{\n  /**\n   * Default status bar style (dark for iOS, light for Android)\n   */\n  default: string,\n  /**\n   * Dark background, white texts and icons\n   */\n  'light-content': string,\n  /**\n   * Light background, dark texts and icons\n   */\n  'dark-content': string,\n  ...\n}>;\n\n/**\n * Status bar animation\n */\nexport type StatusBarAnimation = $Keys<{\n  /**\n   * No animation\n   */\n  none: string,\n  /**\n   * Fade animation\n   */\n  fade: string,\n  /**\n   * Slide animation\n   */\n  slide: string,\n  ...\n}>;\n\ntype AndroidProps = $ReadOnly<{|\n  /**\n   * The background color of the status bar.\n   * @platform android\n   */\n  backgroundColor?: ?ColorValue,\n  /**\n   * If the status bar is translucent.\n   * When translucent is set to true, the app will draw under the status bar.\n   * This is useful when using a semi transparent status bar color.\n   *\n   * @platform android\n   */\n  translucent?: ?boolean,\n|}>;\n\ntype IOSProps = $ReadOnly<{|\n  /**\n   * If the network activity indicator should be visible.\n   *\n   * @platform ios\n   */\n  networkActivityIndicatorVisible?: ?boolean,\n  /**\n   * The transition effect when showing and hiding the status bar using the `hidden`\n   * prop. Defaults to 'fade'.\n   *\n   * @platform ios\n   */\n  showHideTransition?: ?('fade' | 'slide' | 'none'),\n|}>;\n\ntype Props = $ReadOnly<{|\n  ...AndroidProps,\n  ...IOSProps,\n  /**\n   * If the status bar is hidden.\n   */\n  hidden?: ?boolean,\n  /**\n   * If the transition between status bar property changes should be animated.\n   * Supported for backgroundColor, barStyle and hidden.\n   */\n  animated?: ?boolean,\n  /**\n   * Sets the color of the status bar text.\n   */\n  barStyle?: ?('default' | 'light-content' | 'dark-content'),\n|}>;\n\n/**\n * Merges the prop stack with the default values.\n */\nfunction mergePropsStack(\n  propsStack: Array<Object>,\n  defaultValues: Object,\n): Object {\n  return propsStack.reduce(\n    (prev, cur) => {\n      for (const prop in cur) {\n        if (cur[prop] != null) {\n          prev[prop] = cur[prop];\n        }\n      }\n      return prev;\n    },\n    {...defaultValues},\n  );\n}\n\n/**\n * Returns an object to insert in the props stack from the props\n * and the transition/animation info.\n */\nfunction createStackEntry(props: any): any {\n  const animated = props.animated ?? false;\n  const showHideTransition = props.showHideTransition ?? 'fade';\n  return {\n    backgroundColor:\n      props.backgroundColor != null\n        ? {\n            value: props.backgroundColor,\n            animated,\n          }\n        : null,\n    barStyle:\n      props.barStyle != null\n        ? {\n            value: props.barStyle,\n            animated,\n          }\n        : null,\n    translucent: props.translucent,\n    hidden:\n      props.hidden != null\n        ? {\n            value: props.hidden,\n            animated,\n            transition: showHideTransition,\n          }\n        : null,\n    networkActivityIndicatorVisible: props.networkActivityIndicatorVisible,\n  };\n}\n\n/**\n * Component to control the app status bar.\n *\n * ### Usage with Navigator\n *\n * It is possible to have multiple `StatusBar` components mounted at the same\n * time. The props will be merged in the order the `StatusBar` components were\n * mounted. One use case is to specify status bar styles per route using `Navigator`.\n *\n * ```\n *  <View>\n *    <StatusBar\n *      backgroundColor=\"blue\"\n *      barStyle=\"light-content\"\n *    />\n *    <Navigator\n *      initialRoute={{statusBarHidden: true}}\n *      renderScene={(route, navigator) =>\n *        <View>\n *          <StatusBar hidden={route.statusBarHidden} />\n *          ...\n *        </View>\n *      }\n *    />\n *  </View>\n * ```\n *\n * ### Imperative API\n *\n * For cases where using a component is not ideal, there are static methods\n * to manipulate the `StatusBar` display stack. These methods have the same\n * behavior as mounting and unmounting a `StatusBar` component.\n *\n * For example, you can call `StatusBar.pushStackEntry` to update the status bar\n * before launching a third-party native UI component, and then call\n * `StatusBar.popStackEntry` when completed.\n *\n * ```\n * const openThirdPartyBugReporter = async () => {\n *   // The bug reporter has a dark background, so we push a new status bar style.\n *   const stackEntry = StatusBar.pushStackEntry({barStyle: 'light-content'});\n *\n *   // `open` returns a promise that resolves when the UI is dismissed.\n *   await BugReporter.open();\n *\n *   // Don't forget to call `popStackEntry` when you're done.\n *   StatusBar.popStackEntry(stackEntry);\n * };\n * ```\n *\n * There is a legacy imperative API that enables you to manually update the\n * status bar styles. However, the legacy API does not update the internal\n * `StatusBar` display stack, which means that any changes will be overridden\n * whenever a `StatusBar` component is mounted or unmounted.\n *\n * It is strongly advised that you use `pushStackEntry`, `popStackEntry`, or\n * `replaceStackEntry` instead of the static methods beginning with `set`.\n *\n * ### Constants\n *\n * `currentHeight` (Android only) The height of the status bar.\n */\nclass StatusBar extends React.Component<Props> {\n  static _propsStack: Array<any> = [];\n\n  static _defaultProps: any = createStackEntry({\n    backgroundColor:\n      Platform.OS === 'android'\n        ? NativeStatusBarManagerAndroid.getConstants()\n            .DEFAULT_BACKGROUND_COLOR ?? 'black'\n        : 'black',\n    barStyle: 'default',\n    translucent: false,\n    hidden: false,\n    networkActivityIndicatorVisible: false,\n  });\n\n  // Timer for updating the native module values at the end of the frame.\n  static _updateImmediate = null;\n\n  // The current merged values from the props stack.\n  static _currentValues = null;\n\n  // TODO(janic): Provide a real API to deal with status bar height. See the\n  // discussion in #6195.\n  /**\n   * The current height of the status bar on the device.\n   *\n   * @platform android\n   */\n  static currentHeight: ?number =\n    Platform.OS === 'android'\n      ? NativeStatusBarManagerAndroid.getConstants().HEIGHT\n      : null;\n\n  // Provide an imperative API as static functions of the component.\n  // See the corresponding prop for more detail.\n\n  /**\n   * Show or hide the status bar\n   * @param hidden Hide the status bar.\n   * @param animation Optional animation when\n   *    changing the status bar hidden property.\n   */\n  static setHidden(hidden: boolean, animation?: StatusBarAnimation) {\n    animation = animation || 'none';\n    StatusBar._defaultProps.hidden.value = hidden;\n    if (Platform.OS === 'ios') {\n      NativeStatusBarManagerIOS.setHidden(hidden, animation);\n    } else if (Platform.OS === 'android') {\n      NativeStatusBarManagerAndroid.setHidden(hidden);\n    }\n  }\n\n  /**\n   * Set the status bar style\n   * @param style Status bar style to set\n   * @param animated Animate the style change.\n   */\n  static setBarStyle(style: StatusBarStyle, animated?: boolean) {\n    animated = animated || false;\n    StatusBar._defaultProps.barStyle.value = style;\n    if (Platform.OS === 'ios') {\n      NativeStatusBarManagerIOS.setStyle(style, animated);\n    } else if (Platform.OS === 'android') {\n      NativeStatusBarManagerAndroid.setStyle(style);\n    }\n  }\n\n  /**\n   * Control the visibility of the network activity indicator\n   * @param visible Show the indicator.\n   */\n  static setNetworkActivityIndicatorVisible(visible: boolean) {\n    if (Platform.OS !== 'ios') {\n      console.warn(\n        '`setNetworkActivityIndicatorVisible` is only available on iOS',\n      );\n      return;\n    }\n    StatusBar._defaultProps.networkActivityIndicatorVisible = visible;\n    NativeStatusBarManagerIOS.setNetworkActivityIndicatorVisible(visible);\n  }\n\n  /**\n   * Set the background color for the status bar\n   * @param color Background color.\n   * @param animated Animate the style change.\n   */\n  static setBackgroundColor(color: string, animated?: boolean): void {\n    if (Platform.OS !== 'android') {\n      console.warn('`setBackgroundColor` is only available on Android');\n      return;\n    }\n    animated = animated || false;\n    StatusBar._defaultProps.backgroundColor.value = color;\n\n    const processedColor = processColor(color);\n    if (processedColor == null) {\n      console.warn(\n        `\\`StatusBar.setBackgroundColor\\`: Color ${color} parsed to null or undefined`,\n      );\n      return;\n    }\n    invariant(\n      typeof processedColor === 'number',\n      'Unexpected color given for StatusBar.setBackgroundColor',\n    );\n\n    NativeStatusBarManagerAndroid.setColor(processedColor, animated);\n  }\n\n  /**\n   * Control the translucency of the status bar\n   * @param translucent Set as translucent.\n   */\n  static setTranslucent(translucent: boolean) {\n    if (Platform.OS !== 'android') {\n      console.warn('`setTranslucent` is only available on Android');\n      return;\n    }\n    StatusBar._defaultProps.translucent = translucent;\n    NativeStatusBarManagerAndroid.setTranslucent(translucent);\n  }\n\n  /**\n   * Push a StatusBar entry onto the stack.\n   * The return value should be passed to `popStackEntry` when complete.\n   *\n   * @param props Object containing the StatusBar props to use in the stack entry.\n   */\n  static pushStackEntry(props: any): any {\n    const entry = createStackEntry(props);\n    StatusBar._propsStack.push(entry);\n    StatusBar._updatePropsStack();\n    return entry;\n  }\n\n  /**\n   * Pop a StatusBar entry from the stack.\n   *\n   * @param entry Entry returned from `pushStackEntry`.\n   */\n  static popStackEntry(entry: any) {\n    const index = StatusBar._propsStack.indexOf(entry);\n    if (index !== -1) {\n      StatusBar._propsStack.splice(index, 1);\n    }\n    StatusBar._updatePropsStack();\n  }\n\n  /**\n   * Replace an existing StatusBar stack entry with new props.\n   *\n   * @param entry Entry returned from `pushStackEntry` to replace.\n   * @param props Object containing the StatusBar props to use in the replacement stack entry.\n   */\n  static replaceStackEntry(entry: any, props: any): any {\n    const newEntry = createStackEntry(props);\n    const index = StatusBar._propsStack.indexOf(entry);\n    if (index !== -1) {\n      StatusBar._propsStack[index] = newEntry;\n    }\n    StatusBar._updatePropsStack();\n    return newEntry;\n  }\n\n  _stackEntry = null;\n\n  componentDidMount() {\n    // Every time a StatusBar component is mounted, we push it's prop to a stack\n    // and always update the native status bar with the props from the top of then\n    // stack. This allows having multiple StatusBar components and the one that is\n    // added last or is deeper in the view hierarchy will have priority.\n    this._stackEntry = StatusBar.pushStackEntry(this.props);\n  }\n\n  componentWillUnmount() {\n    // When a StatusBar is unmounted, remove itself from the stack and update\n    // the native bar with the next props.\n    StatusBar.popStackEntry(this._stackEntry);\n  }\n\n  componentDidUpdate() {\n    this._stackEntry = StatusBar.replaceStackEntry(\n      this._stackEntry,\n      this.props,\n    );\n  }\n\n  /**\n   * Updates the native status bar with the props from the stack.\n   */\n  static _updatePropsStack = () => {\n    // Send the update to the native module only once at the end of the frame.\n    clearImmediate(StatusBar._updateImmediate);\n    StatusBar._updateImmediate = setImmediate(() => {\n      const oldProps = StatusBar._currentValues;\n      const mergedProps = mergePropsStack(\n        StatusBar._propsStack,\n        StatusBar._defaultProps,\n      );\n\n      // Update the props that have changed using the merged values from the props stack.\n      if (Platform.OS === 'ios') {\n        if (\n          !oldProps ||\n          oldProps.barStyle.value !== mergedProps.barStyle.value\n        ) {\n          NativeStatusBarManagerIOS.setStyle(\n            mergedProps.barStyle.value,\n            mergedProps.barStyle.animated || false,\n          );\n        }\n        if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {\n          NativeStatusBarManagerIOS.setHidden(\n            mergedProps.hidden.value,\n            mergedProps.hidden.animated\n              ? mergedProps.hidden.transition\n              : 'none',\n          );\n        }\n\n        if (\n          !oldProps ||\n          oldProps.networkActivityIndicatorVisible !==\n            mergedProps.networkActivityIndicatorVisible\n        ) {\n          NativeStatusBarManagerIOS.setNetworkActivityIndicatorVisible(\n            mergedProps.networkActivityIndicatorVisible,\n          );\n        }\n      } else if (Platform.OS === 'android') {\n        //todo(T60684787): Add back optimization to only update bar style and\n        //background color if the new value is different from the old value.\n        NativeStatusBarManagerAndroid.setStyle(mergedProps.barStyle.value);\n        const processedColor = processColor(mergedProps.backgroundColor.value);\n        if (processedColor == null) {\n          console.warn(\n            `\\`StatusBar._updatePropsStack\\`: Color ${mergedProps.backgroundColor.value} parsed to null or undefined`,\n          );\n        } else {\n          invariant(\n            typeof processedColor === 'number',\n            'Unexpected color given in StatusBar._updatePropsStack',\n          );\n          NativeStatusBarManagerAndroid.setColor(\n            processedColor,\n            mergedProps.backgroundColor.animated,\n          );\n        }\n        if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {\n          NativeStatusBarManagerAndroid.setHidden(mergedProps.hidden.value);\n        }\n        // Activities are not translucent by default, so always set if true.\n        if (\n          !oldProps ||\n          oldProps.translucent !== mergedProps.translucent ||\n          mergedProps.translucent\n        ) {\n          NativeStatusBarManagerAndroid.setTranslucent(mergedProps.translucent);\n        }\n      }\n      // Update the current prop values.\n      StatusBar._currentValues = mergedProps;\n    });\n  };\n\n  render(): React.Node {\n    return null;\n  }\n}\n\nmodule.exports = StatusBar;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}