{"ast":null,"code":"'use strict';\n\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nexport function elementsThatOverlapOffsets(offsets, props, getFrameMetrics) {\n  var zoomScale = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  var itemCount = props.getItemCount(props.data);\n  var result = [];\n\n  for (var offsetIndex = 0; offsetIndex < offsets.length; offsetIndex++) {\n    var currentOffset = offsets[offsetIndex];\n    var left = 0;\n    var right = itemCount - 1;\n\n    while (left <= right) {\n      var mid = left + (right - left >>> 1);\n      var frame = getFrameMetrics(mid, props);\n      var scaledOffsetStart = frame.offset * zoomScale;\n      var scaledOffsetEnd = (frame.offset + frame.length) * zoomScale;\n\n      if (mid === 0 && currentOffset < scaledOffsetStart || mid !== 0 && currentOffset <= scaledOffsetStart) {\n        right = mid - 1;\n      } else if (currentOffset > scaledOffsetEnd) {\n        left = mid + 1;\n      } else {\n        result[offsetIndex] = mid;\n        break;\n      }\n    }\n  }\n\n  return result;\n}\nexport function newRangeCount(prev, next) {\n  return next.last - next.first + 1 - Math.max(0, 1 + Math.min(next.last, prev.last) - Math.max(next.first, prev.first));\n}\nexport function computeWindowedRenderLimits(props, maxToRenderPerBatch, windowSize, prev, getFrameMetricsApprox, scrollMetrics) {\n  var itemCount = props.getItemCount(props.data);\n\n  if (itemCount === 0) {\n    return {\n      first: 0,\n      last: -1\n    };\n  }\n\n  var offset = scrollMetrics.offset,\n      velocity = scrollMetrics.velocity,\n      visibleLength = scrollMetrics.visibleLength,\n      _scrollMetrics$zoomSc = scrollMetrics.zoomScale,\n      zoomScale = _scrollMetrics$zoomSc === void 0 ? 1 : _scrollMetrics$zoomSc;\n  var visibleBegin = Math.max(0, offset);\n  var visibleEnd = visibleBegin + visibleLength;\n  var overscanLength = (windowSize - 1) * visibleLength;\n  var leadFactor = 0.5;\n  var fillPreference = velocity > 1 ? 'after' : velocity < -1 ? 'before' : 'none';\n  var overscanBegin = Math.max(0, visibleBegin - (1 - leadFactor) * overscanLength);\n  var overscanEnd = Math.max(0, visibleEnd + leadFactor * overscanLength);\n  var lastItemOffset = getFrameMetricsApprox(itemCount - 1, props).offset * zoomScale;\n\n  if (lastItemOffset < overscanBegin) {\n    return {\n      first: Math.max(0, itemCount - 1 - maxToRenderPerBatch),\n      last: itemCount - 1\n    };\n  }\n\n  var _elementsThatOverlapO = elementsThatOverlapOffsets([overscanBegin, visibleBegin, visibleEnd, overscanEnd], props, getFrameMetricsApprox, zoomScale),\n      _elementsThatOverlapO2 = _slicedToArray(_elementsThatOverlapO, 4),\n      overscanFirst = _elementsThatOverlapO2[0],\n      first = _elementsThatOverlapO2[1],\n      last = _elementsThatOverlapO2[2],\n      overscanLast = _elementsThatOverlapO2[3];\n\n  overscanFirst = overscanFirst == null ? 0 : overscanFirst;\n  first = first == null ? Math.max(0, overscanFirst) : first;\n  overscanLast = overscanLast == null ? itemCount - 1 : overscanLast;\n  last = last == null ? Math.min(overscanLast, first + maxToRenderPerBatch - 1) : last;\n  var visible = {\n    first: first,\n    last: last\n  };\n  var newCellCount = newRangeCount(prev, visible);\n\n  while (true) {\n    if (first <= overscanFirst && last >= overscanLast) {\n      break;\n    }\n\n    var maxNewCells = newCellCount >= maxToRenderPerBatch;\n    var firstWillAddMore = first <= prev.first || first > prev.last;\n    var firstShouldIncrement = first > overscanFirst && (!maxNewCells || !firstWillAddMore);\n    var lastWillAddMore = last >= prev.last || last < prev.first;\n    var lastShouldIncrement = last < overscanLast && (!maxNewCells || !lastWillAddMore);\n\n    if (maxNewCells && !firstShouldIncrement && !lastShouldIncrement) {\n      break;\n    }\n\n    if (firstShouldIncrement && !(fillPreference === 'after' && lastShouldIncrement && lastWillAddMore)) {\n      if (firstWillAddMore) {\n        newCellCount++;\n      }\n\n      first--;\n    }\n\n    if (lastShouldIncrement && !(fillPreference === 'before' && firstShouldIncrement && firstWillAddMore)) {\n      if (lastWillAddMore) {\n        newCellCount++;\n      }\n\n      last++;\n    }\n  }\n\n  if (!(last >= first && first >= 0 && last < itemCount && first >= overscanFirst && last <= overscanLast && first <= visible.first && last >= visible.last)) {\n    throw new Error('Bad window calculation ' + JSON.stringify({\n      first: first,\n      last: last,\n      itemCount: itemCount,\n      overscanFirst: overscanFirst,\n      overscanLast: overscanLast,\n      visible: visible\n    }));\n  }\n\n  return {\n    first: first,\n    last: last\n  };\n}\nexport function keyExtractor(item, index) {\n  if (typeof item === 'object' && (item == null ? void 0 : item.key) != null) {\n    return item.key;\n  }\n\n  if (typeof item === 'object' && (item == null ? void 0 : item.id) != null) {\n    return item.id;\n  }\n\n  return String(index);\n}","map":{"version":3,"names":["elementsThatOverlapOffsets","offsets","props","getFrameMetrics","zoomScale","itemCount","getItemCount","data","result","offsetIndex","length","currentOffset","left","right","mid","frame","scaledOffsetStart","offset","scaledOffsetEnd","newRangeCount","prev","next","last","first","Math","max","min","computeWindowedRenderLimits","maxToRenderPerBatch","windowSize","getFrameMetricsApprox","scrollMetrics","velocity","visibleLength","visibleBegin","visibleEnd","overscanLength","leadFactor","fillPreference","overscanBegin","overscanEnd","lastItemOffset","overscanFirst","overscanLast","visible","newCellCount","maxNewCells","firstWillAddMore","firstShouldIncrement","lastWillAddMore","lastShouldIncrement","Error","JSON","stringify","keyExtractor","item","index","key","id","String"],"sources":["/Users/zagarellagabriele/Desktop/Progetti/React Native/React-Native-Exercises/node_modules/react-native/Libraries/Lists/VirtualizeUtils.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nimport type {FrameMetricProps} from './VirtualizedListProps';\n\n/**\n * Used to find the indices of the frames that overlap the given offsets. Useful for finding the\n * items that bound different windows of content, such as the visible area or the buffered overscan\n * area.\n */\nexport function elementsThatOverlapOffsets(\n  offsets: Array<number>,\n  props: FrameMetricProps,\n  getFrameMetrics: (\n    index: number,\n    props: FrameMetricProps,\n  ) => {\n    length: number,\n    offset: number,\n    ...\n  },\n  zoomScale: number = 1,\n): Array<number> {\n  const itemCount = props.getItemCount(props.data);\n  const result = [];\n  for (let offsetIndex = 0; offsetIndex < offsets.length; offsetIndex++) {\n    const currentOffset = offsets[offsetIndex];\n    let left = 0;\n    let right = itemCount - 1;\n\n    while (left <= right) {\n      // eslint-disable-next-line no-bitwise\n      const mid = left + ((right - left) >>> 1);\n      const frame = getFrameMetrics(mid, props);\n      const scaledOffsetStart = frame.offset * zoomScale;\n      const scaledOffsetEnd = (frame.offset + frame.length) * zoomScale;\n\n      // We want the first frame that contains the offset, with inclusive bounds. Thus, for the\n      // first frame the scaledOffsetStart is inclusive, while for other frames it is exclusive.\n      if (\n        (mid === 0 && currentOffset < scaledOffsetStart) ||\n        (mid !== 0 && currentOffset <= scaledOffsetStart)\n      ) {\n        right = mid - 1;\n      } else if (currentOffset > scaledOffsetEnd) {\n        left = mid + 1;\n      } else {\n        result[offsetIndex] = mid;\n        break;\n      }\n    }\n  }\n\n  return result;\n}\n\n/**\n * Computes the number of elements in the `next` range that are new compared to the `prev` range.\n * Handy for calculating how many new items will be rendered when the render window changes so we\n * can restrict the number of new items render at once so that content can appear on the screen\n * faster.\n */\nexport function newRangeCount(\n  prev: {\n    first: number,\n    last: number,\n    ...\n  },\n  next: {\n    first: number,\n    last: number,\n    ...\n  },\n): number {\n  return (\n    next.last -\n    next.first +\n    1 -\n    Math.max(\n      0,\n      1 + Math.min(next.last, prev.last) - Math.max(next.first, prev.first),\n    )\n  );\n}\n\n/**\n * Custom logic for determining which items should be rendered given the current frame and scroll\n * metrics, as well as the previous render state. The algorithm may evolve over time, but generally\n * prioritizes the visible area first, then expands that with overscan regions ahead and behind,\n * biased in the direction of scroll.\n */\nexport function computeWindowedRenderLimits(\n  props: FrameMetricProps,\n  maxToRenderPerBatch: number,\n  windowSize: number,\n  prev: {\n    first: number,\n    last: number,\n  },\n  getFrameMetricsApprox: (\n    index: number,\n    props: FrameMetricProps,\n  ) => {\n    length: number,\n    offset: number,\n    ...\n  },\n  scrollMetrics: {\n    dt: number,\n    offset: number,\n    velocity: number,\n    visibleLength: number,\n    zoomScale: number,\n    ...\n  },\n): {\n  first: number,\n  last: number,\n} {\n  const itemCount = props.getItemCount(props.data);\n  if (itemCount === 0) {\n    return {first: 0, last: -1};\n  }\n  const {offset, velocity, visibleLength, zoomScale = 1} = scrollMetrics;\n\n  // Start with visible area, then compute maximum overscan region by expanding from there, biased\n  // in the direction of scroll. Total overscan area is capped, which should cap memory consumption\n  // too.\n  const visibleBegin = Math.max(0, offset);\n  const visibleEnd = visibleBegin + visibleLength;\n  const overscanLength = (windowSize - 1) * visibleLength;\n\n  // Considering velocity seems to introduce more churn than it's worth.\n  const leadFactor = 0.5; // Math.max(0, Math.min(1, velocity / 25 + 0.5));\n\n  const fillPreference =\n    velocity > 1 ? 'after' : velocity < -1 ? 'before' : 'none';\n\n  const overscanBegin = Math.max(\n    0,\n    visibleBegin - (1 - leadFactor) * overscanLength,\n  );\n  const overscanEnd = Math.max(0, visibleEnd + leadFactor * overscanLength);\n\n  const lastItemOffset =\n    getFrameMetricsApprox(itemCount - 1, props).offset * zoomScale;\n  if (lastItemOffset < overscanBegin) {\n    // Entire list is before our overscan window\n    return {\n      first: Math.max(0, itemCount - 1 - maxToRenderPerBatch),\n      last: itemCount - 1,\n    };\n  }\n\n  // Find the indices that correspond to the items at the render boundaries we're targeting.\n  let [overscanFirst, first, last, overscanLast] = elementsThatOverlapOffsets(\n    [overscanBegin, visibleBegin, visibleEnd, overscanEnd],\n    props,\n    getFrameMetricsApprox,\n    zoomScale,\n  );\n  overscanFirst = overscanFirst == null ? 0 : overscanFirst;\n  first = first == null ? Math.max(0, overscanFirst) : first;\n  overscanLast = overscanLast == null ? itemCount - 1 : overscanLast;\n  last =\n    last == null\n      ? Math.min(overscanLast, first + maxToRenderPerBatch - 1)\n      : last;\n  const visible = {first, last};\n\n  // We want to limit the number of new cells we're rendering per batch so that we can fill the\n  // content on the screen quickly. If we rendered the entire overscan window at once, the user\n  // could be staring at white space for a long time waiting for a bunch of offscreen content to\n  // render.\n  let newCellCount = newRangeCount(prev, visible);\n\n  while (true) {\n    if (first <= overscanFirst && last >= overscanLast) {\n      // If we fill the entire overscan range, we're done.\n      break;\n    }\n    const maxNewCells = newCellCount >= maxToRenderPerBatch;\n    const firstWillAddMore = first <= prev.first || first > prev.last;\n    const firstShouldIncrement =\n      first > overscanFirst && (!maxNewCells || !firstWillAddMore);\n    const lastWillAddMore = last >= prev.last || last < prev.first;\n    const lastShouldIncrement =\n      last < overscanLast && (!maxNewCells || !lastWillAddMore);\n    if (maxNewCells && !firstShouldIncrement && !lastShouldIncrement) {\n      // We only want to stop if we've hit maxNewCells AND we cannot increment first or last\n      // without rendering new items. This let's us preserve as many already rendered items as\n      // possible, reducing render churn and keeping the rendered overscan range as large as\n      // possible.\n      break;\n    }\n    if (\n      firstShouldIncrement &&\n      !(fillPreference === 'after' && lastShouldIncrement && lastWillAddMore)\n    ) {\n      if (firstWillAddMore) {\n        newCellCount++;\n      }\n      first--;\n    }\n    if (\n      lastShouldIncrement &&\n      !(fillPreference === 'before' && firstShouldIncrement && firstWillAddMore)\n    ) {\n      if (lastWillAddMore) {\n        newCellCount++;\n      }\n      last++;\n    }\n  }\n  if (\n    !(\n      last >= first &&\n      first >= 0 &&\n      last < itemCount &&\n      first >= overscanFirst &&\n      last <= overscanLast &&\n      first <= visible.first &&\n      last >= visible.last\n    )\n  ) {\n    throw new Error(\n      'Bad window calculation ' +\n        JSON.stringify({\n          first,\n          last,\n          itemCount,\n          overscanFirst,\n          overscanLast,\n          visible,\n        }),\n    );\n  }\n  return {first, last};\n}\n\nexport function keyExtractor(item: any, index: number): string {\n  if (typeof item === 'object' && item?.key != null) {\n    return item.key;\n  }\n  if (typeof item === 'object' && item?.id != null) {\n    return item.id;\n  }\n  return String(index);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}