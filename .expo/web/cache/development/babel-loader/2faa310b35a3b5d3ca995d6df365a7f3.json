{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _excluded = [\"navigation\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nimport { getHeaderTitle, Header, SafeAreaProviderCompat, Screen } from '@react-navigation/elements';\nimport { DrawerActions, useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport * as Reanimated from 'react-native-reanimated';\nimport { useSafeAreaFrame } from 'react-native-safe-area-context';\nimport DrawerPositionContext from \"../utils/DrawerPositionContext\";\nimport DrawerStatusContext from \"../utils/DrawerStatusContext\";\nimport getDrawerStatusFromState from \"../utils/getDrawerStatusFromState\";\nimport DrawerContent from \"./DrawerContent\";\nimport DrawerToggleButton from \"./DrawerToggleButton\";\nimport { GestureHandlerRootView } from \"./GestureHandler\";\nimport { MaybeScreen, MaybeScreenContainer } from \"./ScreenFallback\";\n\nvar getDefaultDrawerWidth = function getDefaultDrawerWidth(_ref) {\n  var height = _ref.height,\n      width = _ref.width;\n  var smallerAxisSize = Math.min(height, width);\n  var isLandscape = width > height;\n  var isTablet = smallerAxisSize >= 600;\n  var appBarHeight = Platform.OS === 'ios' ? isLandscape ? 32 : 44 : 56;\n  var maxWidth = isTablet ? 320 : 280;\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\n\nvar GestureHandlerWrapper = GestureHandlerRootView != null ? GestureHandlerRootView : View;\n\nfunction DrawerViewBase(_ref2) {\n  var _Reanimated$isConfigu;\n\n  var state = _ref2.state,\n      navigation = _ref2.navigation,\n      descriptors = _ref2.descriptors,\n      defaultStatus = _ref2.defaultStatus,\n      _ref2$drawerContent = _ref2.drawerContent,\n      drawerContent = _ref2$drawerContent === void 0 ? function (props) {\n    return React.createElement(DrawerContent, props);\n  } : _ref2$drawerContent,\n      _ref2$detachInactiveS = _ref2.detachInactiveScreens,\n      detachInactiveScreens = _ref2$detachInactiveS === void 0 ? Platform.OS === 'web' || Platform.OS === 'android' || Platform.OS === 'ios' : _ref2$detachInactiveS,\n      _ref2$useLegacyImplem = _ref2.useLegacyImplementation,\n      useLegacyImplementation = _ref2$useLegacyImplem === void 0 ? !((_Reanimated$isConfigu = Reanimated.isConfigured) !== null && _Reanimated$isConfigu !== void 0 && _Reanimated$isConfigu.call(Reanimated)) : _ref2$useLegacyImplem;\n  var legacyImplemenationNotAvailable = require('react-native-reanimated').abs === undefined;\n\n  if (useLegacyImplementation && legacyImplemenationNotAvailable) {\n    throw new Error('The `useLegacyImplementation` prop is not available with Reanimated 3 as it no longer includes support for Reanimated 1 legacy API. Remove the `useLegacyImplementation` prop from `Drawer.Navigator` to be able to use it.');\n  }\n\n  var Drawer = useLegacyImplementation ? require(\"./legacy/Drawer\").default : require(\"./modern/Drawer\").default;\n  var focusedRouteKey = state.routes[state.index].key;\n  var _descriptors$focusedR = descriptors[focusedRouteKey].options,\n      _descriptors$focusedR2 = _descriptors$focusedR.drawerHideStatusBarOnOpen,\n      drawerHideStatusBarOnOpen = _descriptors$focusedR2 === void 0 ? false : _descriptors$focusedR2,\n      _descriptors$focusedR3 = _descriptors$focusedR.drawerPosition,\n      drawerPosition = _descriptors$focusedR3 === void 0 ? I18nManager.getConstants().isRTL ? 'right' : 'left' : _descriptors$focusedR3,\n      _descriptors$focusedR4 = _descriptors$focusedR.drawerStatusBarAnimation,\n      drawerStatusBarAnimation = _descriptors$focusedR4 === void 0 ? 'slide' : _descriptors$focusedR4,\n      drawerStyle = _descriptors$focusedR.drawerStyle,\n      _descriptors$focusedR5 = _descriptors$focusedR.drawerType,\n      drawerType = _descriptors$focusedR5 === void 0 ? Platform.select({\n    ios: 'slide',\n    default: 'front'\n  }) : _descriptors$focusedR5,\n      gestureHandlerProps = _descriptors$focusedR.gestureHandlerProps,\n      _descriptors$focusedR6 = _descriptors$focusedR.keyboardDismissMode,\n      keyboardDismissMode = _descriptors$focusedR6 === void 0 ? 'on-drag' : _descriptors$focusedR6,\n      _descriptors$focusedR7 = _descriptors$focusedR.overlayColor,\n      overlayColor = _descriptors$focusedR7 === void 0 ? 'rgba(0, 0, 0, 0.5)' : _descriptors$focusedR7,\n      _descriptors$focusedR8 = _descriptors$focusedR.swipeEdgeWidth,\n      swipeEdgeWidth = _descriptors$focusedR8 === void 0 ? 32 : _descriptors$focusedR8,\n      _descriptors$focusedR9 = _descriptors$focusedR.swipeEnabled,\n      swipeEnabled = _descriptors$focusedR9 === void 0 ? Platform.OS !== 'web' && Platform.OS !== 'windows' && Platform.OS !== 'macos' : _descriptors$focusedR9,\n      _descriptors$focusedR10 = _descriptors$focusedR.swipeMinDistance,\n      swipeMinDistance = _descriptors$focusedR10 === void 0 ? 60 : _descriptors$focusedR10,\n      overlayAccessibilityLabel = _descriptors$focusedR.overlayAccessibilityLabel;\n\n  var _React$useState = React.useState([focusedRouteKey]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      loaded = _React$useState2[0],\n      setLoaded = _React$useState2[1];\n\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([].concat(_toConsumableArray(loaded), [focusedRouteKey]));\n  }\n\n  var dimensions = useSafeAreaFrame();\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var drawerStatus = getDrawerStatusFromState(state);\n  var handleDrawerOpen = React.useCallback(function () {\n    navigation.dispatch(_objectSpread(_objectSpread({}, DrawerActions.openDrawer()), {}, {\n      target: state.key\n    }));\n  }, [navigation, state.key]);\n  var handleDrawerClose = React.useCallback(function () {\n    navigation.dispatch(_objectSpread(_objectSpread({}, DrawerActions.closeDrawer()), {}, {\n      target: state.key\n    }));\n  }, [navigation, state.key]);\n  React.useEffect(function () {\n    if (drawerStatus === defaultStatus || drawerType === 'permanent') {\n      return;\n    }\n\n    var handleHardwareBack = function handleHardwareBack() {\n      if (!navigation.isFocused()) {\n        return false;\n      }\n\n      if (defaultStatus === 'open') {\n        handleDrawerOpen();\n      } else {\n        handleDrawerClose();\n      }\n\n      return true;\n    };\n\n    var handleEscape = function handleEscape(e) {\n      if (e.key === 'Escape') {\n        handleHardwareBack();\n      }\n    };\n\n    var subscription = BackHandler.addEventListener('hardwareBackPress', handleHardwareBack);\n\n    if (Platform.OS === 'web') {\n      var _document, _document$body, _document$body$addEve;\n\n      (_document = document) === null || _document === void 0 ? void 0 : (_document$body = _document.body) === null || _document$body === void 0 ? void 0 : (_document$body$addEve = _document$body.addEventListener) === null || _document$body$addEve === void 0 ? void 0 : _document$body$addEve.call(_document$body, 'keyup', handleEscape);\n    }\n\n    return function () {\n      subscription.remove();\n\n      if (Platform.OS === 'web') {\n        var _document2, _document2$body, _document2$body$remov;\n\n        (_document2 = document) === null || _document2 === void 0 ? void 0 : (_document2$body = _document2.body) === null || _document2$body === void 0 ? void 0 : (_document2$body$remov = _document2$body.removeEventListener) === null || _document2$body$remov === void 0 ? void 0 : _document2$body$remov.call(_document2$body, 'keyup', handleEscape);\n      }\n    };\n  }, [defaultStatus, drawerStatus, drawerType, handleDrawerClose, handleDrawerOpen, navigation]);\n\n  var renderDrawerContent = function renderDrawerContent() {\n    return React.createElement(DrawerPositionContext.Provider, {\n      value: drawerPosition\n    }, drawerContent({\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors\n    }));\n  };\n\n  var renderSceneContent = function renderSceneContent() {\n    return React.createElement(MaybeScreenContainer, {\n      enabled: detachInactiveScreens,\n      hasTwoStates: true,\n      style: styles.content\n    }, state.routes.map(function (route, index) {\n      var descriptor = descriptors[route.key];\n      var _descriptor$options = descriptor.options,\n          _descriptor$options$l = _descriptor$options.lazy,\n          lazy = _descriptor$options$l === void 0 ? true : _descriptor$options$l,\n          unmountOnBlur = _descriptor$options.unmountOnBlur;\n      var isFocused = state.index === index;\n\n      if (unmountOnBlur && !isFocused) {\n        return null;\n      }\n\n      if (lazy && !loaded.includes(route.key) && !isFocused) {\n        return null;\n      }\n\n      var _descriptor$options2 = descriptor.options,\n          freezeOnBlur = _descriptor$options2.freezeOnBlur,\n          _descriptor$options2$ = _descriptor$options2.header,\n          header = _descriptor$options2$ === void 0 ? function (_ref3) {\n        var _options$headerLeft;\n\n        var layout = _ref3.layout,\n            options = _ref3.options;\n        return React.createElement(Header, _extends({}, options, {\n          layout: layout,\n          title: getHeaderTitle(options, route.name),\n          headerLeft: (_options$headerLeft = options.headerLeft) != null ? _options$headerLeft : function (props) {\n            return React.createElement(DrawerToggleButton, props);\n          }\n        }));\n      } : _descriptor$options2$,\n          headerShown = _descriptor$options2.headerShown,\n          headerStatusBarHeight = _descriptor$options2.headerStatusBarHeight,\n          headerTransparent = _descriptor$options2.headerTransparent,\n          sceneContainerStyle = _descriptor$options2.sceneContainerStyle;\n      return React.createElement(MaybeScreen, {\n        key: route.key,\n        style: [StyleSheet.absoluteFill, {\n          zIndex: isFocused ? 0 : -1\n        }],\n        visible: isFocused,\n        enabled: detachInactiveScreens,\n        freezeOnBlur: freezeOnBlur\n      }, React.createElement(Screen, {\n        focused: isFocused,\n        route: descriptor.route,\n        navigation: descriptor.navigation,\n        headerShown: headerShown,\n        headerStatusBarHeight: headerStatusBarHeight,\n        headerTransparent: headerTransparent,\n        header: header({\n          layout: dimensions,\n          route: descriptor.route,\n          navigation: descriptor.navigation,\n          options: descriptor.options\n        }),\n        style: sceneContainerStyle\n      }, descriptor.render()));\n    }));\n  };\n\n  return React.createElement(DrawerStatusContext.Provider, {\n    value: drawerStatus\n  }, React.createElement(Drawer, {\n    open: drawerStatus !== 'closed',\n    onOpen: handleDrawerOpen,\n    onClose: handleDrawerClose,\n    gestureHandlerProps: gestureHandlerProps,\n    swipeEnabled: swipeEnabled,\n    swipeEdgeWidth: swipeEdgeWidth,\n    swipeVelocityThreshold: 500,\n    swipeDistanceThreshold: swipeMinDistance,\n    hideStatusBarOnOpen: drawerHideStatusBarOnOpen,\n    statusBarAnimation: drawerStatusBarAnimation,\n    keyboardDismissMode: keyboardDismissMode,\n    drawerType: drawerType,\n    overlayAccessibilityLabel: overlayAccessibilityLabel,\n    drawerPosition: drawerPosition,\n    drawerStyle: [{\n      width: getDefaultDrawerWidth(dimensions),\n      backgroundColor: colors.card\n    }, drawerType === 'permanent' && (drawerPosition === 'left' ? {\n      borderRightColor: colors.border,\n      borderRightWidth: StyleSheet.hairlineWidth\n    } : {\n      borderLeftColor: colors.border,\n      borderLeftWidth: StyleSheet.hairlineWidth\n    }), drawerStyle],\n    overlayStyle: {\n      backgroundColor: overlayColor\n    },\n    renderDrawerContent: renderDrawerContent,\n    renderSceneContent: renderSceneContent,\n    dimensions: dimensions\n  }));\n}\n\nexport default function DrawerView(_ref4) {\n  var navigation = _ref4.navigation,\n      rest = _objectWithoutProperties(_ref4, _excluded);\n\n  return React.createElement(SafeAreaProviderCompat, null, React.createElement(GestureHandlerWrapper, {\n    style: styles.content\n  }, React.createElement(DrawerViewBase, _extends({\n    navigation: navigation\n  }, rest))));\n}\nvar styles = StyleSheet.create({\n  content: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["views/DrawerView.tsx"],"names":["getHeaderTitle","Header","SafeAreaProviderCompat","Screen","DrawerActions","useTheme","React","Reanimated","useSafeAreaFrame","DrawerPositionContext","DrawerStatusContext","getDrawerStatusFromState","DrawerContent","DrawerToggleButton","GestureHandlerRootView","MaybeScreen","MaybeScreenContainer","getDefaultDrawerWidth","height","width","smallerAxisSize","Math","min","isLandscape","isTablet","appBarHeight","Platform","OS","maxWidth","GestureHandlerWrapper","View","DrawerViewBase","state","navigation","descriptors","defaultStatus","drawerContent","props","detachInactiveScreens","useLegacyImplementation","isConfigured","legacyImplemenationNotAvailable","require","abs","undefined","Error","Drawer","default","focusedRouteKey","routes","index","key","drawerHideStatusBarOnOpen","drawerPosition","I18nManager","getConstants","isRTL","drawerStatusBarAnimation","drawerStyle","drawerType","select","ios","gestureHandlerProps","keyboardDismissMode","overlayColor","swipeEdgeWidth","swipeEnabled","swipeMinDistance","overlayAccessibilityLabel","options","loaded","setLoaded","useState","includes","dimensions","colors","drawerStatus","handleDrawerOpen","useCallback","dispatch","openDrawer","target","handleDrawerClose","closeDrawer","useEffect","handleHardwareBack","isFocused","handleEscape","e","subscription","BackHandler","addEventListener","body","remove","removeEventListener","renderDrawerContent","renderSceneContent","styles","content","map","route","descriptor","lazy","unmountOnBlur","freezeOnBlur","header","layout","name","headerLeft","headerShown","headerStatusBarHeight","headerTransparent","sceneContainerStyle","StyleSheet","absoluteFill","zIndex","render","backgroundColor","card","borderRightColor","border","borderRightWidth","hairlineWidth","borderLeftColor","borderLeftWidth","DrawerView","rest","create","flex"],"mappings":"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","sourceRoot":"../../../src","sourcesContent":["function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport { getHeaderTitle, Header, SafeAreaProviderCompat, Screen } from '@react-navigation/elements';\nimport { DrawerActions, useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport { BackHandler, I18nManager, Platform, StyleSheet, View } from 'react-native';\nimport * as Reanimated from 'react-native-reanimated';\nimport { useSafeAreaFrame } from 'react-native-safe-area-context';\nimport DrawerPositionContext from '../utils/DrawerPositionContext';\nimport DrawerStatusContext from '../utils/DrawerStatusContext';\nimport getDrawerStatusFromState from '../utils/getDrawerStatusFromState';\nimport DrawerContent from './DrawerContent';\nimport DrawerToggleButton from './DrawerToggleButton';\nimport { GestureHandlerRootView } from './GestureHandler';\nimport { MaybeScreen, MaybeScreenContainer } from './ScreenFallback';\nconst getDefaultDrawerWidth = _ref => {\n  let {\n    height,\n    width\n  } = _ref;\n  /*\n   * Default drawer width is screen width - header height\n   * with a max width of 280 on mobile and 320 on tablet\n   * https://material.io/components/navigation-drawer\n   */\n  const smallerAxisSize = Math.min(height, width);\n  const isLandscape = width > height;\n  const isTablet = smallerAxisSize >= 600;\n  const appBarHeight = Platform.OS === 'ios' ? isLandscape ? 32 : 44 : 56;\n  const maxWidth = isTablet ? 320 : 280;\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\nfunction DrawerViewBase(_ref2) {\n  var _Reanimated$isConfigu;\n  let {\n    state,\n    navigation,\n    descriptors,\n    defaultStatus,\n    drawerContent = props => /*#__PURE__*/React.createElement(DrawerContent, props),\n    detachInactiveScreens = Platform.OS === 'web' || Platform.OS === 'android' || Platform.OS === 'ios',\n    // Reanimated 2 is not configured\n    // @ts-expect-error: the type definitions are incomplete\n    useLegacyImplementation = !((_Reanimated$isConfigu = Reanimated.isConfigured) !== null && _Reanimated$isConfigu !== void 0 && _Reanimated$isConfigu.call(Reanimated))\n  } = _ref2;\n  // Reanimated v3 dropped legacy v1 syntax\n  const legacyImplemenationNotAvailable = require('react-native-reanimated').abs === undefined;\n  if (useLegacyImplementation && legacyImplemenationNotAvailable) {\n    throw new Error('The `useLegacyImplementation` prop is not available with Reanimated 3 as it no longer includes support for Reanimated 1 legacy API. Remove the `useLegacyImplementation` prop from `Drawer.Navigator` to be able to use it.');\n  }\n  const Drawer = useLegacyImplementation ? require('./legacy/Drawer').default : require('./modern/Drawer').default;\n  const focusedRouteKey = state.routes[state.index].key;\n  const {\n    drawerHideStatusBarOnOpen = false,\n    drawerPosition = I18nManager.getConstants().isRTL ? 'right' : 'left',\n    drawerStatusBarAnimation = 'slide',\n    drawerStyle,\n    drawerType = Platform.select({\n      ios: 'slide',\n      default: 'front'\n    }),\n    gestureHandlerProps,\n    keyboardDismissMode = 'on-drag',\n    overlayColor = 'rgba(0, 0, 0, 0.5)',\n    swipeEdgeWidth = 32,\n    swipeEnabled = Platform.OS !== 'web' && Platform.OS !== 'windows' && Platform.OS !== 'macos',\n    swipeMinDistance = 60,\n    overlayAccessibilityLabel\n  } = descriptors[focusedRouteKey].options;\n  const [loaded, setLoaded] = React.useState([focusedRouteKey]);\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([...loaded, focusedRouteKey]);\n  }\n  const dimensions = useSafeAreaFrame();\n  const {\n    colors\n  } = useTheme();\n  const drawerStatus = getDrawerStatusFromState(state);\n  const handleDrawerOpen = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.openDrawer(),\n      target: state.key\n    });\n  }, [navigation, state.key]);\n  const handleDrawerClose = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.closeDrawer(),\n      target: state.key\n    });\n  }, [navigation, state.key]);\n  React.useEffect(() => {\n    if (drawerStatus === defaultStatus || drawerType === 'permanent') {\n      return;\n    }\n    const handleHardwareBack = () => {\n      // We shouldn't handle the back button if the parent screen isn't focused\n      // This will avoid the drawer overriding event listeners from a focused screen\n      if (!navigation.isFocused()) {\n        return false;\n      }\n      if (defaultStatus === 'open') {\n        handleDrawerOpen();\n      } else {\n        handleDrawerClose();\n      }\n      return true;\n    };\n    const handleEscape = e => {\n      if (e.key === 'Escape') {\n        handleHardwareBack();\n      }\n    };\n\n    // We only add the listeners when drawer opens\n    // This way we can make sure that the listener is added as late as possible\n    // This will make sure that our handler will run first when back button is pressed\n    const subscription = BackHandler.addEventListener('hardwareBackPress', handleHardwareBack);\n    if (Platform.OS === 'web') {\n      var _document, _document$body, _document$body$addEve;\n      (_document = document) === null || _document === void 0 ? void 0 : (_document$body = _document.body) === null || _document$body === void 0 ? void 0 : (_document$body$addEve = _document$body.addEventListener) === null || _document$body$addEve === void 0 ? void 0 : _document$body$addEve.call(_document$body, 'keyup', handleEscape);\n    }\n    return () => {\n      subscription.remove();\n      if (Platform.OS === 'web') {\n        var _document2, _document2$body, _document2$body$remov;\n        (_document2 = document) === null || _document2 === void 0 ? void 0 : (_document2$body = _document2.body) === null || _document2$body === void 0 ? void 0 : (_document2$body$remov = _document2$body.removeEventListener) === null || _document2$body$remov === void 0 ? void 0 : _document2$body$remov.call(_document2$body, 'keyup', handleEscape);\n      }\n    };\n  }, [defaultStatus, drawerStatus, drawerType, handleDrawerClose, handleDrawerOpen, navigation]);\n  const renderDrawerContent = () => {\n    return /*#__PURE__*/React.createElement(DrawerPositionContext.Provider, {\n      value: drawerPosition\n    }, drawerContent({\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors\n    }));\n  };\n  const renderSceneContent = () => {\n    return /*#__PURE__*/React.createElement(MaybeScreenContainer, {\n      enabled: detachInactiveScreens,\n      hasTwoStates: true,\n      style: styles.content\n    }, state.routes.map((route, index) => {\n      const descriptor = descriptors[route.key];\n      const {\n        lazy = true,\n        unmountOnBlur\n      } = descriptor.options;\n      const isFocused = state.index === index;\n      if (unmountOnBlur && !isFocused) {\n        return null;\n      }\n      if (lazy && !loaded.includes(route.key) && !isFocused) {\n        // Don't render a lazy screen if we've never navigated to it\n        return null;\n      }\n      const {\n        freezeOnBlur,\n        header = _ref3 => {\n          let {\n            layout,\n            options\n          } = _ref3;\n          return /*#__PURE__*/React.createElement(Header, _extends({}, options, {\n            layout: layout,\n            title: getHeaderTitle(options, route.name),\n            headerLeft: options.headerLeft ?? (props => /*#__PURE__*/React.createElement(DrawerToggleButton, props))\n          }));\n        },\n        headerShown,\n        headerStatusBarHeight,\n        headerTransparent,\n        sceneContainerStyle\n      } = descriptor.options;\n      return /*#__PURE__*/React.createElement(MaybeScreen, {\n        key: route.key,\n        style: [StyleSheet.absoluteFill, {\n          zIndex: isFocused ? 0 : -1\n        }],\n        visible: isFocused,\n        enabled: detachInactiveScreens,\n        freezeOnBlur: freezeOnBlur\n      }, /*#__PURE__*/React.createElement(Screen, {\n        focused: isFocused,\n        route: descriptor.route,\n        navigation: descriptor.navigation,\n        headerShown: headerShown,\n        headerStatusBarHeight: headerStatusBarHeight,\n        headerTransparent: headerTransparent,\n        header: header({\n          layout: dimensions,\n          route: descriptor.route,\n          navigation: descriptor.navigation,\n          options: descriptor.options\n        }),\n        style: sceneContainerStyle\n      }, descriptor.render()));\n    }));\n  };\n  return /*#__PURE__*/React.createElement(DrawerStatusContext.Provider, {\n    value: drawerStatus\n  }, /*#__PURE__*/React.createElement(Drawer, {\n    open: drawerStatus !== 'closed',\n    onOpen: handleDrawerOpen,\n    onClose: handleDrawerClose,\n    gestureHandlerProps: gestureHandlerProps,\n    swipeEnabled: swipeEnabled,\n    swipeEdgeWidth: swipeEdgeWidth,\n    swipeVelocityThreshold: 500,\n    swipeDistanceThreshold: swipeMinDistance,\n    hideStatusBarOnOpen: drawerHideStatusBarOnOpen,\n    statusBarAnimation: drawerStatusBarAnimation,\n    keyboardDismissMode: keyboardDismissMode,\n    drawerType: drawerType,\n    overlayAccessibilityLabel: overlayAccessibilityLabel,\n    drawerPosition: drawerPosition,\n    drawerStyle: [{\n      width: getDefaultDrawerWidth(dimensions),\n      backgroundColor: colors.card\n    }, drawerType === 'permanent' && (drawerPosition === 'left' ? {\n      borderRightColor: colors.border,\n      borderRightWidth: StyleSheet.hairlineWidth\n    } : {\n      borderLeftColor: colors.border,\n      borderLeftWidth: StyleSheet.hairlineWidth\n    }), drawerStyle],\n    overlayStyle: {\n      backgroundColor: overlayColor\n    },\n    renderDrawerContent: renderDrawerContent,\n    renderSceneContent: renderSceneContent,\n    dimensions: dimensions\n  }));\n}\nexport default function DrawerView(_ref4) {\n  let {\n    navigation,\n    ...rest\n  } = _ref4;\n  return /*#__PURE__*/React.createElement(SafeAreaProviderCompat, null, /*#__PURE__*/React.createElement(GestureHandlerWrapper, {\n    style: styles.content\n  }, /*#__PURE__*/React.createElement(DrawerViewBase, _extends({\n    navigation: navigation\n  }, rest))));\n}\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1\n  }\n});\n//# sourceMappingURL=DrawerView.js.map"]},"metadata":{},"sourceType":"module"}