{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _require = require(\"../Utilities/FeatureDetection\"),\n    hasNativeConstructor = _require.hasNativeConstructor;\n\nvar _require2 = require(\"../Utilities/PolyfillFunctions\"),\n    polyfillGlobal = _require2.polyfillGlobal;\n\nvar hasNativeGenerator;\n\ntry {\n  hasNativeGenerator = hasNativeConstructor(_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }), 'GeneratorFunction');\n} catch (_unused) {\n  hasNativeGenerator = false;\n}\n\nif (!hasNativeGenerator) {\n  polyfillGlobal('regeneratorRuntime', function () {\n    delete global.regeneratorRuntime;\n    return require('regenerator-runtime/runtime');\n  });\n}","map":{"version":3,"names":["require","hasNativeConstructor","polyfillGlobal","hasNativeGenerator","global","regeneratorRuntime"],"sources":["/Users/zagarellagabriele/Desktop/Progetti/React Native/React-Native-Exercises/node_modules/react-native/Libraries/Core/setUpRegeneratorRuntime.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nconst {hasNativeConstructor} = require('../Utilities/FeatureDetection');\nconst {polyfillGlobal} = require('../Utilities/PolyfillFunctions');\n\n/**\n * Set up regenerator.\n * You can use this module directly, or just require InitializeCore.\n */\n\nlet hasNativeGenerator;\ntry {\n  // If this function was lowered by regenerator-transform, it will try to\n  // access `global.regeneratorRuntime` which doesn't exist yet and will throw.\n  hasNativeGenerator = hasNativeConstructor(function* () {},\n  'GeneratorFunction');\n} catch {\n  // In this case, we know generators are not provided natively.\n  hasNativeGenerator = false;\n}\n\n// If generators are provided natively, which suggests that there was no\n// regenerator-transform, then there is no need to set up the runtime.\nif (!hasNativeGenerator) {\n  polyfillGlobal('regeneratorRuntime', () => {\n    // The require just sets up the global, so make sure when we first\n    // invoke it the global does not exist\n    delete global.regeneratorRuntime;\n\n    // regenerator-runtime/runtime exports the regeneratorRuntime object, so we\n    // can return it safely.\n    return require('regenerator-runtime/runtime'); // flowlint-line untyped-import:off\n  });\n}\n"],"mappings":"AAUA;;;;AAEA,eAA+BA,OAAO,iCAAtC;AAAA,IAAOC,oBAAP,YAAOA,oBAAP;;AACA,gBAAyBD,OAAO,kCAAhC;AAAA,IAAOE,cAAP,aAAOA,cAAP;;AAOA,IAAIC,kBAAJ;;AACA,IAAI;EAGFA,kBAAkB,GAAGF,oBAAoB,0BAAC;IAAA;MAAA;QAAA;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAD,GACzC,mBADyC,CAAzC;AAED,CALD,CAKE,gBAAM;EAENE,kBAAkB,GAAG,KAArB;AACD;;AAID,IAAI,CAACA,kBAAL,EAAyB;EACvBD,cAAc,CAAC,oBAAD,EAAuB,YAAM;IAGzC,OAAOE,MAAM,CAACC,kBAAd;IAIA,OAAOL,OAAO,CAAC,6BAAD,CAAd;EACD,CARa,CAAd;AASD"},"metadata":{},"sourceType":"script"}