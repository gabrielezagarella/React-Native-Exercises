{"ast":null,"code":"import DeviceEventEmitter from \"react-native-web/dist/exports/DeviceEventEmitter\";\nimport { State } from \"../../State\";\nimport { TouchEventType } from \"../../TouchEventType\";\nimport { findHandler, findOldGestureHandler } from \"../handlersRegistry\";\nimport { GestureStateManager } from \"./gestureStateManager\";\nvar gestureHandlerEventSubscription = null;\nvar gestureHandlerStateChangeEventSubscription = null;\nvar gestureStateManagers = new Map();\nvar lastUpdateEvent = [];\n\nfunction isStateChangeEvent(event) {\n  return event.oldState != null;\n}\n\nfunction isTouchEvent(event) {\n  return event.eventType != null;\n}\n\nexport function onGestureHandlerEvent(event) {\n  var _handler$handlers7, _handler$handlers7$on, _handler$handlers8, _handler$handlers8$on, _handler$handlers9, _handler$handlers9$on, _handler$handlers10, _handler$handlers10$o;\n\n  var handler = findHandler(event.handlerTag);\n\n  if (handler) {\n    if (isStateChangeEvent(event)) {\n      if (event.oldState === State.UNDETERMINED && event.state === State.BEGAN) {\n        var _handler$handlers$onB, _handler$handlers;\n\n        (_handler$handlers$onB = (_handler$handlers = handler.handlers).onBegin) === null || _handler$handlers$onB === void 0 ? void 0 : _handler$handlers$onB.call(_handler$handlers, event);\n      } else if ((event.oldState === State.BEGAN || event.oldState === State.UNDETERMINED) && event.state === State.ACTIVE) {\n        var _handler$handlers$onS, _handler$handlers2;\n\n        (_handler$handlers$onS = (_handler$handlers2 = handler.handlers).onStart) === null || _handler$handlers$onS === void 0 ? void 0 : _handler$handlers$onS.call(_handler$handlers2, event);\n        lastUpdateEvent[handler.handlers.handlerTag] = event;\n      } else if (event.oldState !== event.state && event.state === State.END) {\n        var _handler$handlers$onF, _handler$handlers4;\n\n        if (event.oldState === State.ACTIVE) {\n          var _handler$handlers$onE, _handler$handlers3;\n\n          (_handler$handlers$onE = (_handler$handlers3 = handler.handlers).onEnd) === null || _handler$handlers$onE === void 0 ? void 0 : _handler$handlers$onE.call(_handler$handlers3, event, true);\n        }\n\n        (_handler$handlers$onF = (_handler$handlers4 = handler.handlers).onFinalize) === null || _handler$handlers$onF === void 0 ? void 0 : _handler$handlers$onF.call(_handler$handlers4, event, true);\n        lastUpdateEvent[handler.handlers.handlerTag] = undefined;\n      } else if ((event.state === State.FAILED || event.state === State.CANCELLED) && event.oldState !== event.state) {\n        var _handler$handlers$onF2, _handler$handlers6;\n\n        if (event.oldState === State.ACTIVE) {\n          var _handler$handlers$onE2, _handler$handlers5;\n\n          (_handler$handlers$onE2 = (_handler$handlers5 = handler.handlers).onEnd) === null || _handler$handlers$onE2 === void 0 ? void 0 : _handler$handlers$onE2.call(_handler$handlers5, event, false);\n        }\n\n        (_handler$handlers$onF2 = (_handler$handlers6 = handler.handlers).onFinalize) === null || _handler$handlers$onF2 === void 0 ? void 0 : _handler$handlers$onF2.call(_handler$handlers6, event, false);\n        gestureStateManagers.delete(event.handlerTag);\n        lastUpdateEvent[handler.handlers.handlerTag] = undefined;\n      }\n    } else if (isTouchEvent(event)) {\n      if (!gestureStateManagers.has(event.handlerTag)) {\n        gestureStateManagers.set(event.handlerTag, GestureStateManager.create(event.handlerTag));\n      }\n\n      var manager = gestureStateManagers.get(event.handlerTag);\n\n      switch (event.eventType) {\n        case TouchEventType.TOUCHES_DOWN:\n          (_handler$handlers7 = handler.handlers) === null || _handler$handlers7 === void 0 ? void 0 : (_handler$handlers7$on = _handler$handlers7.onTouchesDown) === null || _handler$handlers7$on === void 0 ? void 0 : _handler$handlers7$on.call(_handler$handlers7, event, manager);\n          break;\n\n        case TouchEventType.TOUCHES_MOVE:\n          (_handler$handlers8 = handler.handlers) === null || _handler$handlers8 === void 0 ? void 0 : (_handler$handlers8$on = _handler$handlers8.onTouchesMove) === null || _handler$handlers8$on === void 0 ? void 0 : _handler$handlers8$on.call(_handler$handlers8, event, manager);\n          break;\n\n        case TouchEventType.TOUCHES_UP:\n          (_handler$handlers9 = handler.handlers) === null || _handler$handlers9 === void 0 ? void 0 : (_handler$handlers9$on = _handler$handlers9.onTouchesUp) === null || _handler$handlers9$on === void 0 ? void 0 : _handler$handlers9$on.call(_handler$handlers9, event, manager);\n          break;\n\n        case TouchEventType.TOUCHES_CANCELLED:\n          (_handler$handlers10 = handler.handlers) === null || _handler$handlers10 === void 0 ? void 0 : (_handler$handlers10$o = _handler$handlers10.onTouchesCancelled) === null || _handler$handlers10$o === void 0 ? void 0 : _handler$handlers10$o.call(_handler$handlers10, event, manager);\n          break;\n      }\n    } else {\n      var _handler$handlers$onU, _handler$handlers11;\n\n      (_handler$handlers$onU = (_handler$handlers11 = handler.handlers).onUpdate) === null || _handler$handlers$onU === void 0 ? void 0 : _handler$handlers$onU.call(_handler$handlers11, event);\n\n      if (handler.handlers.onChange && handler.handlers.changeEventCalculator) {\n        var _handler$handlers$onC, _handler$handlers12, _handler$handlers$cha, _handler$handlers13;\n\n        (_handler$handlers$onC = (_handler$handlers12 = handler.handlers).onChange) === null || _handler$handlers$onC === void 0 ? void 0 : _handler$handlers$onC.call(_handler$handlers12, (_handler$handlers$cha = (_handler$handlers13 = handler.handlers).changeEventCalculator) === null || _handler$handlers$cha === void 0 ? void 0 : _handler$handlers$cha.call(_handler$handlers13, event, lastUpdateEvent[handler.handlers.handlerTag]));\n        lastUpdateEvent[handler.handlers.handlerTag] = event;\n      }\n    }\n  } else {\n    var oldHandler = findOldGestureHandler(event.handlerTag);\n\n    if (oldHandler) {\n      var nativeEvent = {\n        nativeEvent: event\n      };\n\n      if (isStateChangeEvent(event)) {\n        oldHandler.onGestureStateChange(nativeEvent);\n      } else {\n        oldHandler.onGestureEvent(nativeEvent);\n      }\n\n      return;\n    }\n  }\n}\nexport function startListening() {\n  stopListening();\n  gestureHandlerEventSubscription = DeviceEventEmitter.addListener('onGestureHandlerEvent', onGestureHandlerEvent);\n  gestureHandlerStateChangeEventSubscription = DeviceEventEmitter.addListener('onGestureHandlerStateChange', onGestureHandlerEvent);\n}\nexport function stopListening() {\n  if (gestureHandlerEventSubscription) {\n    gestureHandlerEventSubscription.remove();\n    gestureHandlerEventSubscription = null;\n  }\n\n  if (gestureHandlerStateChangeEventSubscription) {\n    gestureHandlerStateChangeEventSubscription.remove();\n    gestureHandlerStateChangeEventSubscription = null;\n  }\n}","map":{"version":3,"sources":["eventReceiver.ts"],"names":["gestureHandlerEventSubscription","gestureHandlerStateChangeEventSubscription","gestureStateManagers","lastUpdateEvent","event","handler","findHandler","isStateChangeEvent","State","isTouchEvent","GestureStateManager","manager","TouchEventType","oldHandler","findOldGestureHandler","nativeEvent","stopListening","DeviceEventEmitter"],"mappings":"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","sourcesContent":["import { DeviceEventEmitter, EmitterSubscription } from 'react-native';\nimport { State } from '../../State';\nimport { TouchEventType } from '../../TouchEventType';\nimport {\n  GestureTouchEvent,\n  GestureUpdateEvent,\n  GestureStateChangeEvent,\n} from '../gestureHandlerCommon';\nimport { findHandler, findOldGestureHandler } from '../handlersRegistry';\nimport { BaseGesture } from './gesture';\nimport {\n  GestureStateManager,\n  GestureStateManagerType,\n} from './gestureStateManager';\n\nlet gestureHandlerEventSubscription: EmitterSubscription | null = null;\nlet gestureHandlerStateChangeEventSubscription: EmitterSubscription | null =\n  null;\n\nconst gestureStateManagers: Map<number, GestureStateManagerType> = new Map<\n  number,\n  GestureStateManagerType\n>();\n\nconst lastUpdateEvent: (GestureUpdateEvent | undefined)[] = [];\n\nfunction isStateChangeEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n): event is GestureStateChangeEvent {\n  // @ts-ignore oldState doesn't exist on GestureTouchEvent and that's the point\n  return event.oldState != null;\n}\n\nfunction isTouchEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n): event is GestureTouchEvent {\n  return event.eventType != null;\n}\n\nexport function onGestureHandlerEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n) {\n  const handler = findHandler(event.handlerTag) as BaseGesture<\n    Record<string, unknown>\n  >;\n\n  if (handler) {\n    if (isStateChangeEvent(event)) {\n      if (\n        event.oldState === State.UNDETERMINED &&\n        event.state === State.BEGAN\n      ) {\n        handler.handlers.onBegin?.(event);\n      } else if (\n        (event.oldState === State.BEGAN ||\n          event.oldState === State.UNDETERMINED) &&\n        event.state === State.ACTIVE\n      ) {\n        handler.handlers.onStart?.(event);\n        lastUpdateEvent[handler.handlers.handlerTag] = event;\n      } else if (event.oldState !== event.state && event.state === State.END) {\n        if (event.oldState === State.ACTIVE) {\n          handler.handlers.onEnd?.(event, true);\n        }\n        handler.handlers.onFinalize?.(event, true);\n        lastUpdateEvent[handler.handlers.handlerTag] = undefined;\n      } else if (\n        (event.state === State.FAILED || event.state === State.CANCELLED) &&\n        event.oldState !== event.state\n      ) {\n        if (event.oldState === State.ACTIVE) {\n          handler.handlers.onEnd?.(event, false);\n        }\n        handler.handlers.onFinalize?.(event, false);\n        gestureStateManagers.delete(event.handlerTag);\n        lastUpdateEvent[handler.handlers.handlerTag] = undefined;\n      }\n    } else if (isTouchEvent(event)) {\n      if (!gestureStateManagers.has(event.handlerTag)) {\n        gestureStateManagers.set(\n          event.handlerTag,\n          GestureStateManager.create(event.handlerTag)\n        );\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const manager = gestureStateManagers.get(event.handlerTag)!;\n\n      switch (event.eventType) {\n        case TouchEventType.TOUCHES_DOWN:\n          handler.handlers?.onTouchesDown?.(event, manager);\n          break;\n        case TouchEventType.TOUCHES_MOVE:\n          handler.handlers?.onTouchesMove?.(event, manager);\n          break;\n        case TouchEventType.TOUCHES_UP:\n          handler.handlers?.onTouchesUp?.(event, manager);\n          break;\n        case TouchEventType.TOUCHES_CANCELLED:\n          handler.handlers?.onTouchesCancelled?.(event, manager);\n          break;\n      }\n    } else {\n      handler.handlers.onUpdate?.(event);\n\n      if (handler.handlers.onChange && handler.handlers.changeEventCalculator) {\n        handler.handlers.onChange?.(\n          handler.handlers.changeEventCalculator?.(\n            event,\n            lastUpdateEvent[handler.handlers.handlerTag]\n          )\n        );\n\n        lastUpdateEvent[handler.handlers.handlerTag] = event;\n      }\n    }\n  } else {\n    const oldHandler = findOldGestureHandler(event.handlerTag);\n    if (oldHandler) {\n      const nativeEvent = { nativeEvent: event };\n      if (isStateChangeEvent(event)) {\n        oldHandler.onGestureStateChange(nativeEvent);\n      } else {\n        oldHandler.onGestureEvent(nativeEvent);\n      }\n      return;\n    }\n  }\n}\n\nexport function startListening() {\n  stopListening();\n\n  gestureHandlerEventSubscription = DeviceEventEmitter.addListener(\n    'onGestureHandlerEvent',\n    onGestureHandlerEvent\n  );\n\n  gestureHandlerStateChangeEventSubscription = DeviceEventEmitter.addListener(\n    'onGestureHandlerStateChange',\n    onGestureHandlerEvent\n  );\n}\n\nexport function stopListening() {\n  if (gestureHandlerEventSubscription) {\n    gestureHandlerEventSubscription.remove();\n    gestureHandlerEventSubscription = null;\n  }\n\n  if (gestureHandlerStateChangeEventSubscription) {\n    gestureHandlerStateChangeEventSubscription.remove();\n    gestureHandlerStateChangeEventSubscription = null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}