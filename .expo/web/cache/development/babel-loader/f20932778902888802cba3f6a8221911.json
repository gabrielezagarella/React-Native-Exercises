{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport View from \"../../Components/View/View\";\nimport openFileInEditor from \"../../Core/Devtools/openFileInEditor\";\nimport StyleSheet from \"../../StyleSheet/StyleSheet\";\nimport Text from \"../../Text/Text\";\nimport LogBoxButton from \"./LogBoxButton\";\nimport LogBoxInspectorSection from \"./LogBoxInspectorSection\";\nimport LogBoxInspectorSourceMapStatus from \"./LogBoxInspectorSourceMapStatus\";\nimport LogBoxInspectorStackFrame from \"./LogBoxInspectorStackFrame\";\nimport * as LogBoxStyle from \"./LogBoxStyle\";\nimport * as React from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport function getCollapseMessage(stackFrames, collapsed) {\n  if (stackFrames.length === 0) {\n    return 'No frames to show';\n  }\n\n  var collapsedCount = stackFrames.reduce(function (count, _ref) {\n    var collapse = _ref.collapse;\n\n    if (collapse === true) {\n      return count + 1;\n    }\n\n    return count;\n  }, 0);\n\n  if (collapsedCount === 0) {\n    return 'Showing all frames';\n  }\n\n  var framePlural = \"frame\" + (collapsedCount > 1 ? 's' : '');\n\n  if (collapsedCount === stackFrames.length) {\n    return collapsed ? \"See\" + (collapsedCount > 1 ? ' all ' : ' ') + collapsedCount + \" collapsed \" + framePlural : \"Collapse\" + (collapsedCount > 1 ? ' all ' : ' ') + collapsedCount + \" \" + framePlural;\n  } else {\n    return collapsed ? \"See \" + collapsedCount + \" more \" + framePlural : \"Collapse \" + collapsedCount + \" \" + framePlural;\n  }\n}\n\nfunction LogBoxInspectorStackFrames(props) {\n  var _React$useState = React.useState(function () {\n    return props.log.getAvailableStack().some(function (_ref2) {\n      var collapse = _ref2.collapse;\n      return !collapse;\n    });\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      collapsed = _React$useState2[0],\n      setCollapsed = _React$useState2[1];\n\n  function getStackList() {\n    if (collapsed === true) {\n      return props.log.getAvailableStack().filter(function (_ref3) {\n        var collapse = _ref3.collapse;\n        return !collapse;\n      });\n    } else {\n      return props.log.getAvailableStack();\n    }\n  }\n\n  if (props.log.getAvailableStack().length === 0) {\n    return null;\n  }\n\n  return _jsxs(LogBoxInspectorSection, {\n    heading: \"Call Stack\",\n    action: _jsx(LogBoxInspectorSourceMapStatus, {\n      onPress: props.log.symbolicated.status === 'FAILED' ? props.onRetry : null,\n      status: props.log.symbolicated.status\n    }),\n    children: [props.log.symbolicated.status !== 'COMPLETE' && _jsx(View, {\n      style: stackStyles.hintBox,\n      children: _jsx(Text, {\n        style: stackStyles.hintText,\n        children: \"This call stack is not symbolicated. Some features are unavailable such as viewing the function name or tapping to open files.\"\n      })\n    }), _jsx(StackFrameList, {\n      list: getStackList(),\n      status: props.log.symbolicated.status\n    }), _jsx(StackFrameFooter, {\n      onPress: function onPress() {\n        return setCollapsed(!collapsed);\n      },\n      message: getCollapseMessage(props.log.getAvailableStack(), collapsed)\n    })]\n  });\n}\n\nfunction StackFrameList(props) {\n  return _jsx(_Fragment, {\n    children: props.list.map(function (frame, index) {\n      var file = frame.file,\n          lineNumber = frame.lineNumber;\n      return _jsx(LogBoxInspectorStackFrame, {\n        frame: frame,\n        onPress: props.status === 'COMPLETE' && file != null && lineNumber != null ? function () {\n          return openFileInEditor(file, lineNumber);\n        } : null\n      }, index);\n    })\n  });\n}\n\nfunction StackFrameFooter(props) {\n  return _jsx(View, {\n    style: stackStyles.collapseContainer,\n    children: _jsx(LogBoxButton, {\n      backgroundColor: {\n        default: 'transparent',\n        pressed: LogBoxStyle.getBackgroundColor(1)\n      },\n      onPress: props.onPress,\n      style: stackStyles.collapseButton,\n      children: _jsx(Text, {\n        style: stackStyles.collapse,\n        children: props.message\n      })\n    })\n  });\n}\n\nvar stackStyles = StyleSheet.create({\n  section: {\n    marginTop: 15\n  },\n  heading: {\n    alignItems: 'center',\n    flexDirection: 'row',\n    paddingHorizontal: 12,\n    marginBottom: 10\n  },\n  headingText: {\n    color: LogBoxStyle.getTextColor(1),\n    flex: 1,\n    fontSize: 20,\n    fontWeight: '600',\n    includeFontPadding: false,\n    lineHeight: 20\n  },\n  body: {\n    paddingBottom: 10\n  },\n  bodyText: {\n    color: LogBoxStyle.getTextColor(1),\n    fontSize: 14,\n    includeFontPadding: false,\n    lineHeight: 18,\n    fontWeight: '500',\n    paddingHorizontal: 27\n  },\n  hintText: {\n    color: LogBoxStyle.getTextColor(0.7),\n    fontSize: 13,\n    includeFontPadding: false,\n    lineHeight: 18,\n    fontWeight: '400',\n    marginHorizontal: 10\n  },\n  hintBox: {\n    backgroundColor: LogBoxStyle.getBackgroundColor(),\n    marginHorizontal: 10,\n    paddingHorizontal: 5,\n    paddingVertical: 10,\n    borderRadius: 5,\n    marginBottom: 5\n  },\n  collapseContainer: {\n    marginLeft: 15,\n    flexDirection: 'row'\n  },\n  collapseButton: {\n    borderRadius: 5\n  },\n  collapse: {\n    color: LogBoxStyle.getTextColor(0.7),\n    fontSize: 12,\n    fontWeight: '300',\n    lineHeight: 20,\n    marginTop: 0,\n    paddingHorizontal: 10,\n    paddingVertical: 5\n  }\n});\nexport default LogBoxInspectorStackFrames;","map":{"version":3,"names":["View","openFileInEditor","StyleSheet","Text","LogBoxButton","LogBoxInspectorSection","LogBoxInspectorSourceMapStatus","LogBoxInspectorStackFrame","LogBoxStyle","React","getCollapseMessage","stackFrames","collapsed","length","collapsedCount","reduce","count","collapse","framePlural","LogBoxInspectorStackFrames","props","useState","log","getAvailableStack","some","setCollapsed","getStackList","filter","symbolicated","status","onRetry","stackStyles","hintBox","hintText","StackFrameList","list","map","frame","index","file","lineNumber","StackFrameFooter","collapseContainer","default","pressed","getBackgroundColor","onPress","collapseButton","message","create","section","marginTop","heading","alignItems","flexDirection","paddingHorizontal","marginBottom","headingText","color","getTextColor","flex","fontSize","fontWeight","includeFontPadding","lineHeight","body","paddingBottom","bodyText","marginHorizontal","backgroundColor","paddingVertical","borderRadius","marginLeft"],"sources":["/Users/zagarellagabriele/Desktop/Progetti/React Native/React-Native-Exercises/node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorStackFrames.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {StackFrame} from '../../Core/NativeExceptionsManager';\nimport type LogBoxLog from '../Data/LogBoxLog';\nimport type {Stack} from '../Data/LogBoxSymbolication';\n\nimport View from '../../Components/View/View';\nimport openFileInEditor from '../../Core/Devtools/openFileInEditor';\nimport StyleSheet from '../../StyleSheet/StyleSheet';\nimport Text from '../../Text/Text';\nimport LogBoxButton from './LogBoxButton';\nimport LogBoxInspectorSection from './LogBoxInspectorSection';\nimport LogBoxInspectorSourceMapStatus from './LogBoxInspectorSourceMapStatus';\nimport LogBoxInspectorStackFrame from './LogBoxInspectorStackFrame';\nimport * as LogBoxStyle from './LogBoxStyle';\nimport * as React from 'react';\n\ntype Props = $ReadOnly<{|\n  log: LogBoxLog,\n  onRetry: () => void,\n|}>;\n\nexport function getCollapseMessage(\n  stackFrames: Stack,\n  collapsed: boolean,\n): string {\n  if (stackFrames.length === 0) {\n    return 'No frames to show';\n  }\n\n  const collapsedCount = stackFrames.reduce((count, {collapse}) => {\n    if (collapse === true) {\n      return count + 1;\n    }\n\n    return count;\n  }, 0);\n\n  if (collapsedCount === 0) {\n    return 'Showing all frames';\n  }\n\n  const framePlural = `frame${collapsedCount > 1 ? 's' : ''}`;\n  if (collapsedCount === stackFrames.length) {\n    return collapsed\n      ? `See${\n          collapsedCount > 1 ? ' all ' : ' '\n        }${collapsedCount} collapsed ${framePlural}`\n      : `Collapse${\n          collapsedCount > 1 ? ' all ' : ' '\n        }${collapsedCount} ${framePlural}`;\n  } else {\n    return collapsed\n      ? `See ${collapsedCount} more ${framePlural}`\n      : `Collapse ${collapsedCount} ${framePlural}`;\n  }\n}\n\nfunction LogBoxInspectorStackFrames(props: Props): React.Node {\n  const [collapsed, setCollapsed] = React.useState(() => {\n    // Only collapse frames initially if some frames are not collapsed.\n    return props.log.getAvailableStack().some(({collapse}) => !collapse);\n  });\n\n  function getStackList() {\n    if (collapsed === true) {\n      return props.log.getAvailableStack().filter(({collapse}) => !collapse);\n    } else {\n      return props.log.getAvailableStack();\n    }\n  }\n\n  if (props.log.getAvailableStack().length === 0) {\n    return null;\n  }\n\n  return (\n    <LogBoxInspectorSection\n      heading=\"Call Stack\"\n      action={\n        <LogBoxInspectorSourceMapStatus\n          onPress={\n            props.log.symbolicated.status === 'FAILED' ? props.onRetry : null\n          }\n          status={props.log.symbolicated.status}\n        />\n      }>\n      {props.log.symbolicated.status !== 'COMPLETE' && (\n        <View style={stackStyles.hintBox}>\n          <Text style={stackStyles.hintText}>\n            This call stack is not symbolicated. Some features are unavailable\n            such as viewing the function name or tapping to open files.\n          </Text>\n        </View>\n      )}\n      <StackFrameList\n        list={getStackList()}\n        status={props.log.symbolicated.status}\n      />\n      <StackFrameFooter\n        onPress={() => setCollapsed(!collapsed)}\n        message={getCollapseMessage(props.log.getAvailableStack(), collapsed)}\n      />\n    </LogBoxInspectorSection>\n  );\n}\n\nfunction StackFrameList(props: {\n  list: Stack | Array<StackFrame>,\n  status: string | 'COMPLETE' | 'FAILED' | 'NONE' | 'PENDING',\n}) {\n  return (\n    <>\n      {props.list.map((frame, index) => {\n        const {file, lineNumber} = frame;\n        return (\n          <LogBoxInspectorStackFrame\n            key={index}\n            frame={frame}\n            onPress={\n              props.status === 'COMPLETE' && file != null && lineNumber != null\n                ? () => openFileInEditor(file, lineNumber)\n                : null\n            }\n          />\n        );\n      })}\n    </>\n  );\n}\n\nfunction StackFrameFooter(\n  props: $TEMPORARY$object<{message: string, onPress: () => void}>,\n) {\n  return (\n    <View style={stackStyles.collapseContainer}>\n      <LogBoxButton\n        backgroundColor={{\n          default: 'transparent',\n          pressed: LogBoxStyle.getBackgroundColor(1),\n        }}\n        onPress={props.onPress}\n        style={stackStyles.collapseButton}>\n        <Text style={stackStyles.collapse}>{props.message}</Text>\n      </LogBoxButton>\n    </View>\n  );\n}\n\nconst stackStyles = StyleSheet.create({\n  section: {\n    marginTop: 15,\n  },\n  heading: {\n    alignItems: 'center',\n    flexDirection: 'row',\n    paddingHorizontal: 12,\n    marginBottom: 10,\n  },\n  headingText: {\n    color: LogBoxStyle.getTextColor(1),\n    flex: 1,\n    fontSize: 20,\n    fontWeight: '600',\n    includeFontPadding: false,\n    lineHeight: 20,\n  },\n  body: {\n    paddingBottom: 10,\n  },\n  bodyText: {\n    color: LogBoxStyle.getTextColor(1),\n    fontSize: 14,\n    includeFontPadding: false,\n    lineHeight: 18,\n    fontWeight: '500',\n    paddingHorizontal: 27,\n  },\n  hintText: {\n    color: LogBoxStyle.getTextColor(0.7),\n    fontSize: 13,\n    includeFontPadding: false,\n    lineHeight: 18,\n    fontWeight: '400',\n    marginHorizontal: 10,\n  },\n  hintBox: {\n    backgroundColor: LogBoxStyle.getBackgroundColor(),\n    marginHorizontal: 10,\n    paddingHorizontal: 5,\n    paddingVertical: 10,\n    borderRadius: 5,\n    marginBottom: 5,\n  },\n  collapseContainer: {\n    marginLeft: 15,\n    flexDirection: 'row',\n  },\n  collapseButton: {\n    borderRadius: 5,\n  },\n  collapse: {\n    color: LogBoxStyle.getTextColor(0.7),\n    fontSize: 12,\n    fontWeight: '300',\n    lineHeight: 20,\n    marginTop: 0,\n    paddingHorizontal: 10,\n    paddingVertical: 5,\n  },\n});\n\nexport default LogBoxInspectorStackFrames;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}