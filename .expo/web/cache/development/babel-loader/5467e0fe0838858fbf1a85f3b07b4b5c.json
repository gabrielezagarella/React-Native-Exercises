{"ast":null,"code":"'use strict';\n\nvar Platform = require(\"../Utilities/Platform\");\n\nvar normalizeColor = require(\"./normalizeColor\");\n\nfunction processColor(color) {\n  if (color === undefined || color === null) {\n    return color;\n  }\n\n  var normalizedColor = normalizeColor(color);\n\n  if (normalizedColor === null || normalizedColor === undefined) {\n    return undefined;\n  }\n\n  if (typeof normalizedColor === 'object') {\n    var processColorObject = require(\"./PlatformColorValueTypes\").processColorObject;\n\n    var processedColorObj = processColorObject(normalizedColor);\n\n    if (processedColorObj != null) {\n      return processedColorObj;\n    }\n  }\n\n  if (typeof normalizedColor !== 'number') {\n    return null;\n  }\n\n  normalizedColor = (normalizedColor << 24 | normalizedColor >>> 8) >>> 0;\n\n  if (Platform.OS === 'android') {\n    normalizedColor = normalizedColor | 0x0;\n  }\n\n  return normalizedColor;\n}\n\nmodule.exports = processColor;","map":{"version":3,"names":["Platform","require","normalizeColor","processColor","color","undefined","normalizedColor","processColorObject","processedColorObj","OS","module","exports"],"sources":["/Users/zagarellagabriele/Desktop/Progetti/React Native/React-Native-Exercises/node_modules/react-native/Libraries/StyleSheet/processColor.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n'use strict';\n\nimport type {NativeColorValue} from './PlatformColorValueTypes';\nimport type {ColorValue} from './StyleSheet';\n\nconst Platform = require('../Utilities/Platform');\nconst normalizeColor = require('./normalizeColor');\n\nexport type ProcessedColorValue = number | NativeColorValue;\n\n/* eslint no-bitwise: 0 */\nfunction processColor(color?: ?(number | ColorValue)): ?ProcessedColorValue {\n  if (color === undefined || color === null) {\n    return color;\n  }\n\n  let normalizedColor = normalizeColor(color);\n  if (normalizedColor === null || normalizedColor === undefined) {\n    return undefined;\n  }\n\n  if (typeof normalizedColor === 'object') {\n    const processColorObject =\n      require('./PlatformColorValueTypes').processColorObject;\n\n    const processedColorObj = processColorObject(normalizedColor);\n\n    if (processedColorObj != null) {\n      return processedColorObj;\n    }\n  }\n\n  if (typeof normalizedColor !== 'number') {\n    return null;\n  }\n\n  // Converts 0xrrggbbaa into 0xaarrggbb\n  normalizedColor = ((normalizedColor << 24) | (normalizedColor >>> 8)) >>> 0;\n\n  if (Platform.OS === 'android') {\n    // Android use 32 bit *signed* integer to represent the color\n    // We utilize the fact that bitwise operations in JS also operates on\n    // signed 32 bit integers, so that we can use those to convert from\n    // *unsigned* to *signed* 32bit int that way.\n    normalizedColor = normalizedColor | 0x0;\n  }\n  return normalizedColor;\n}\n\nmodule.exports = processColor;\n"],"mappings":"AAUA;;AAKA,IAAMA,QAAQ,GAAGC,OAAO,yBAAxB;;AACA,IAAMC,cAAc,GAAGD,OAAO,oBAA9B;;AAKA,SAASE,YAAT,CAAsBC,KAAtB,EAA4E;EAC1E,IAAIA,KAAK,KAAKC,SAAV,IAAuBD,KAAK,KAAK,IAArC,EAA2C;IACzC,OAAOA,KAAP;EACD;;EAED,IAAIE,eAAe,GAAGJ,cAAc,CAACE,KAAD,CAApC;;EACA,IAAIE,eAAe,KAAK,IAApB,IAA4BA,eAAe,KAAKD,SAApD,EAA+D;IAC7D,OAAOA,SAAP;EACD;;EAED,IAAI,OAAOC,eAAP,KAA2B,QAA/B,EAAyC;IACvC,IAAMC,kBAAkB,GACtBN,OAAO,6BAAP,CAAqCM,kBADvC;;IAGA,IAAMC,iBAAiB,GAAGD,kBAAkB,CAACD,eAAD,CAA5C;;IAEA,IAAIE,iBAAiB,IAAI,IAAzB,EAA+B;MAC7B,OAAOA,iBAAP;IACD;EACF;;EAED,IAAI,OAAOF,eAAP,KAA2B,QAA/B,EAAyC;IACvC,OAAO,IAAP;EACD;;EAGDA,eAAe,GAAG,CAAEA,eAAe,IAAI,EAApB,GAA2BA,eAAe,KAAK,CAAhD,MAAwD,CAA1E;;EAEA,IAAIN,QAAQ,CAACS,EAAT,KAAgB,SAApB,EAA+B;IAK7BH,eAAe,GAAGA,eAAe,GAAG,GAApC;EACD;;EACD,OAAOA,eAAP;AACD;;AAEDI,MAAM,CAACC,OAAP,GAAiBR,YAAjB"},"metadata":{},"sourceType":"script"}