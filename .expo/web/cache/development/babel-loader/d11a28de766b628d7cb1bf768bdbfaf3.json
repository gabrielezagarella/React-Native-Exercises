{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar _excluded = [\"enabled\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport { State } from \"../../State\";\nimport { PointerType, TouchEventType, EventTypes } from \"../interfaces\";\nimport GestureHandlerOrchestrator from \"../tools/GestureHandlerOrchestrator\";\nimport InteractionManager from \"../tools/InteractionManager\";\nimport PointerEventManager from \"../tools/PointerEventManager\";\nimport PointerTracker from \"../tools/PointerTracker\";\nimport TouchEventManager from \"../tools/TouchEventManager\";\nimport { isPointerInBounds } from \"../utils\";\n\nvar GestureHandler = function () {\n  function GestureHandler() {\n    var _this = this;\n\n    _classCallCheck(this, GestureHandler);\n\n    _defineProperty(this, \"lastSentState\", null);\n\n    _defineProperty(this, \"currentState\", State.UNDETERMINED);\n\n    _defineProperty(this, \"shouldCancellWhenOutside\", false);\n\n    _defineProperty(this, \"hasCustomActivationCriteria\", void 0);\n\n    _defineProperty(this, \"enabled\", false);\n\n    _defineProperty(this, \"ref\", void 0);\n\n    _defineProperty(this, \"propsRef\", void 0);\n\n    _defineProperty(this, \"handlerTag\", void 0);\n\n    _defineProperty(this, \"config\", {\n      enabled: false\n    });\n\n    _defineProperty(this, \"view\", void 0);\n\n    _defineProperty(this, \"eventManagers\", []);\n\n    _defineProperty(this, \"tracker\", new PointerTracker());\n\n    _defineProperty(this, \"activationIndex\", 0);\n\n    _defineProperty(this, \"awaiting\", false);\n\n    _defineProperty(this, \"active\", false);\n\n    _defineProperty(this, \"shouldResetProgress\", false);\n\n    _defineProperty(this, \"pointerType\", PointerType.NONE);\n\n    _defineProperty(this, \"sendEvent\", function (newState, oldState) {\n      var _this$propsRef$curren = _this.propsRef.current,\n          onGestureHandlerEvent = _this$propsRef$curren.onGestureHandlerEvent,\n          onGestureHandlerStateChange = _this$propsRef$curren.onGestureHandlerStateChange;\n\n      var resultEvent = _this.transformEventData(newState, oldState);\n\n      if (_this.lastSentState !== newState) {\n        _this.lastSentState = newState;\n        invokeNullableMethod(onGestureHandlerStateChange, resultEvent);\n      }\n\n      if (_this.currentState === State.ACTIVE) {\n        resultEvent.nativeEvent.oldState = undefined;\n        invokeNullableMethod(onGestureHandlerEvent, resultEvent);\n      }\n    });\n\n    this.hasCustomActivationCriteria = false;\n  }\n\n  _createClass(GestureHandler, [{\n    key: \"init\",\n    value: function init(ref, propsRef) {\n      this.propsRef = propsRef;\n      this.ref = ref;\n      this.currentState = State.UNDETERMINED;\n      this.setView();\n      this.addEventManager(new PointerEventManager(this.view));\n      this.addEventManager(new TouchEventManager(this.view));\n    }\n  }, {\n    key: \"setView\",\n    value: function setView() {\n      if (!this.ref) {\n        throw new Error(\"Cannot find HTML Element for handler \" + this.handlerTag);\n      }\n\n      this.view = findNodeHandle(this.ref);\n      this.view.style['touchAction'] = 'none';\n      this.view.style['WebkitTouchCallout'] = 'none';\n\n      if (!this.config.userSelect) {\n        this.view.style['webkitUserSelect'] = 'none';\n        this.view.style['userSelect'] = 'none';\n      } else {\n        this.view.style['webkitUserSelect'] = this.config.userSelect;\n        this.view.style['userSelect'] = this.config.userSelect;\n      }\n    }\n  }, {\n    key: \"addEventManager\",\n    value: function addEventManager(manager) {\n      manager.setOnPointerDown(this.onPointerDown.bind(this));\n      manager.setOnPointerAdd(this.onPointerAdd.bind(this));\n      manager.setOnPointerUp(this.onPointerUp.bind(this));\n      manager.setOnPointerRemove(this.onPointerRemove.bind(this));\n      manager.setOnPointerMove(this.onPointerMove.bind(this));\n      manager.setOnPointerEnter(this.onPointerEnter.bind(this));\n      manager.setOnPointerOut(this.onPointerOut.bind(this));\n      manager.setOnPointerCancel(this.onPointerCancel.bind(this));\n      manager.setOnPointerOutOfBounds(this.onPointerOutOfBounds.bind(this));\n      manager.setListeners();\n      this.eventManagers.push(manager);\n    }\n  }, {\n    key: \"onCancel\",\n    value: function onCancel() {}\n  }, {\n    key: \"onReset\",\n    value: function onReset() {}\n  }, {\n    key: \"resetProgress\",\n    value: function resetProgress() {}\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.tracker.resetTracker();\n      this.onReset();\n      this.resetProgress();\n      this.eventManagers.forEach(function (manager) {\n        return manager.resetManager();\n      });\n      this.currentState = State.UNDETERMINED;\n    }\n  }, {\n    key: \"moveToState\",\n    value: function moveToState(newState, sendIfDisabled) {\n      if (this.currentState === newState) {\n        return;\n      }\n\n      var oldState = this.currentState;\n      this.currentState = newState;\n\n      if (this.tracker.getTrackedPointersCount() > 0 && this.config.needsPointerData && this.isFinished()) {\n        this.cancelTouches();\n      }\n\n      GestureHandlerOrchestrator.getInstance().onHandlerStateChange(this, newState, oldState, sendIfDisabled);\n      this.onStateChange(newState, oldState);\n    }\n  }, {\n    key: \"onStateChange\",\n    value: function onStateChange(_newState, _oldState) {}\n  }, {\n    key: \"begin\",\n    value: function begin() {\n      if (!this.checkHitSlop()) {\n        return;\n      }\n\n      if (this.currentState === State.UNDETERMINED) {\n        this.moveToState(State.BEGAN);\n      }\n    }\n  }, {\n    key: \"fail\",\n    value: function fail(sendIfDisabled) {\n      if (this.currentState === State.ACTIVE || this.currentState === State.BEGAN) {\n        this.moveToState(State.FAILED, sendIfDisabled);\n        this.view.style.cursor = 'auto';\n      }\n\n      this.resetProgress();\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel(sendIfDisabled) {\n      if (this.currentState === State.ACTIVE || this.currentState === State.UNDETERMINED || this.currentState === State.BEGAN) {\n        this.onCancel();\n        this.moveToState(State.CANCELLED, sendIfDisabled);\n        this.view.style.cursor = 'auto';\n      }\n    }\n  }, {\n    key: \"activate\",\n    value: function activate() {\n      var _force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (this.currentState === State.UNDETERMINED || this.currentState === State.BEGAN) {\n        this.moveToState(State.ACTIVE);\n        this.view.style.cursor = 'grab';\n      }\n    }\n  }, {\n    key: \"end\",\n    value: function end() {\n      if (this.currentState === State.BEGAN || this.currentState === State.ACTIVE) {\n        this.moveToState(State.END);\n        this.view.style.cursor = 'auto';\n      }\n\n      this.resetProgress();\n    }\n  }, {\n    key: \"isAwaiting\",\n    value: function isAwaiting() {\n      return this.awaiting;\n    }\n  }, {\n    key: \"setAwaiting\",\n    value: function setAwaiting(value) {\n      this.awaiting = value;\n    }\n  }, {\n    key: \"isActive\",\n    value: function isActive() {\n      return this.active;\n    }\n  }, {\n    key: \"setActive\",\n    value: function setActive(value) {\n      this.active = value;\n    }\n  }, {\n    key: \"getShouldResetProgress\",\n    value: function getShouldResetProgress() {\n      return this.shouldResetProgress;\n    }\n  }, {\n    key: \"setShouldResetProgress\",\n    value: function setShouldResetProgress(value) {\n      this.shouldResetProgress = value;\n    }\n  }, {\n    key: \"getActivationIndex\",\n    value: function getActivationIndex() {\n      return this.activationIndex;\n    }\n  }, {\n    key: \"setActivationIndex\",\n    value: function setActivationIndex(value) {\n      this.activationIndex = value;\n    }\n  }, {\n    key: \"shouldWaitForHandlerFailure\",\n    value: function shouldWaitForHandlerFailure(handler) {\n      if (handler === this) {\n        return false;\n      }\n\n      return InteractionManager.getInstance().shouldWaitForHandlerFailure(this, handler);\n    }\n  }, {\n    key: \"shouldRequireToWaitForFailure\",\n    value: function shouldRequireToWaitForFailure(handler) {\n      if (handler === this) {\n        return false;\n      }\n\n      return InteractionManager.getInstance().shouldRequireHandlerToWaitForFailure(this, handler);\n    }\n  }, {\n    key: \"shouldRecognizeSimultaneously\",\n    value: function shouldRecognizeSimultaneously(handler) {\n      if (handler === this) {\n        return true;\n      }\n\n      return InteractionManager.getInstance().shouldRecognizeSimultaneously(this, handler);\n    }\n  }, {\n    key: \"shouldBeCancelledByOther\",\n    value: function shouldBeCancelledByOther(handler) {\n      if (handler === this) {\n        return false;\n      }\n\n      return InteractionManager.getInstance().shouldHandlerBeCancelledBy(this, handler);\n    }\n  }, {\n    key: \"onPointerDown\",\n    value: function onPointerDown(event) {\n      GestureHandlerOrchestrator.getInstance().recordHandlerIfNotPresent(this);\n      this.pointerType = event.pointerType;\n\n      if (this.pointerType === PointerType.TOUCH) {\n        GestureHandlerOrchestrator.getInstance().cancelMouseAndPenGestures(this);\n      }\n\n      if (this.config.needsPointerData) {\n        this.sendTouchEvent(event);\n      }\n    }\n  }, {\n    key: \"onPointerAdd\",\n    value: function onPointerAdd(event) {\n      if (this.config.needsPointerData) {\n        this.sendTouchEvent(event);\n      }\n    }\n  }, {\n    key: \"onPointerUp\",\n    value: function onPointerUp(event) {\n      if (this.config.needsPointerData) {\n        this.sendTouchEvent(event);\n      }\n    }\n  }, {\n    key: \"onPointerRemove\",\n    value: function onPointerRemove(event) {\n      if (this.config.needsPointerData) {\n        this.sendTouchEvent(event);\n      }\n    }\n  }, {\n    key: \"onPointerMove\",\n    value: function onPointerMove(event) {\n      this.tryToSendMoveEvent(false);\n\n      if (this.config.needsPointerData) {\n        this.sendTouchEvent(event);\n      }\n    }\n  }, {\n    key: \"onPointerOut\",\n    value: function onPointerOut(event) {\n      if (this.shouldCancellWhenOutside) {\n        switch (this.currentState) {\n          case State.ACTIVE:\n            this.cancel();\n            break;\n\n          case State.BEGAN:\n            this.fail();\n            break;\n        }\n\n        return;\n      }\n\n      if (this.config.needsPointerData) {\n        this.sendTouchEvent(event);\n      }\n    }\n  }, {\n    key: \"onPointerEnter\",\n    value: function onPointerEnter(event) {\n      if (this.config.needsPointerData) {\n        this.sendTouchEvent(event);\n      }\n    }\n  }, {\n    key: \"onPointerCancel\",\n    value: function onPointerCancel(event) {\n      if (this.config.needsPointerData) {\n        this.sendTouchEvent(event);\n      }\n    }\n  }, {\n    key: \"onPointerOutOfBounds\",\n    value: function onPointerOutOfBounds(event) {\n      this.tryToSendMoveEvent(true);\n\n      if (this.config.needsPointerData) {\n        this.sendTouchEvent(event);\n      }\n    }\n  }, {\n    key: \"tryToSendMoveEvent\",\n    value: function tryToSendMoveEvent(out) {\n      if (this.enabled && this.active && (!out || out && !this.shouldCancellWhenOutside)) {\n        this.sendEvent(this.currentState, this.currentState);\n      }\n    }\n  }, {\n    key: \"sendTouchEvent\",\n    value: function sendTouchEvent(event) {\n      if (!this.enabled) {\n        return;\n      }\n\n      var onGestureHandlerEvent = this.propsRef.current.onGestureHandlerEvent;\n      var touchEvent = this.transformTouchEvent(event);\n\n      if (touchEvent) {\n        invokeNullableMethod(onGestureHandlerEvent, touchEvent);\n      }\n    }\n  }, {\n    key: \"transformEventData\",\n    value: function transformEventData(newState, oldState) {\n      return {\n        nativeEvent: _objectSpread(_objectSpread({\n          numberOfPointers: this.tracker.getTrackedPointersCount(),\n          state: newState,\n          pointerInside: isPointerInBounds(this.view, {\n            x: this.tracker.getLastAvgX(),\n            y: this.tracker.getLastAvgY()\n          })\n        }, this.transformNativeEvent()), {}, {\n          handlerTag: this.handlerTag,\n          target: this.ref,\n          oldState: newState !== oldState ? oldState : undefined\n        }),\n        timeStamp: Date.now()\n      };\n    }\n  }, {\n    key: \"transformTouchEvent\",\n    value: function transformTouchEvent(event) {\n      var _this2 = this;\n\n      var _event$touchEventType;\n\n      var rect = this.view.getBoundingClientRect();\n      var all = [];\n      var changed = [];\n      var trackerData = this.tracker.getData();\n\n      if (trackerData.size === 0 || !trackerData.has(event.pointerId)) {\n        return;\n      }\n\n      trackerData.forEach(function (element, key) {\n        var id = _this2.tracker.getMappedTouchEventId(key);\n\n        all.push({\n          id: id,\n          x: element.lastX - rect.left,\n          y: element.lastY - rect.top,\n          absoluteX: element.lastX,\n          absoluteY: element.lastY\n        });\n      });\n\n      if (event.eventType !== EventTypes.CANCEL) {\n        changed.push({\n          id: this.tracker.getMappedTouchEventId(event.pointerId),\n          x: event.x - rect.left,\n          y: event.y - rect.top,\n          absoluteX: event.x,\n          absoluteY: event.y\n        });\n      } else {\n        trackerData.forEach(function (element, key) {\n          var id = _this2.tracker.getMappedTouchEventId(key);\n\n          changed.push({\n            id: id,\n            x: element.lastX - rect.left,\n            y: element.lastY - rect.top,\n            absoluteX: element.lastX,\n            absoluteY: element.lastY\n          });\n        });\n      }\n\n      var eventType = TouchEventType.UNDETERMINED;\n\n      switch (event.eventType) {\n        case EventTypes.DOWN:\n        case EventTypes.ADDITIONAL_POINTER_DOWN:\n          eventType = TouchEventType.DOWN;\n          break;\n\n        case EventTypes.UP:\n        case EventTypes.ADDITIONAL_POINTER_UP:\n          eventType = TouchEventType.UP;\n          break;\n\n        case EventTypes.MOVE:\n          eventType = TouchEventType.MOVE;\n          break;\n\n        case EventTypes.CANCEL:\n          eventType = TouchEventType.CANCELLED;\n          break;\n      }\n\n      var numberOfTouches = all.length;\n\n      if (event.eventType === EventTypes.UP || event.eventType === EventTypes.ADDITIONAL_POINTER_UP) {\n        --numberOfTouches;\n      }\n\n      return {\n        nativeEvent: {\n          handlerTag: this.handlerTag,\n          state: this.currentState,\n          eventType: (_event$touchEventType = event.touchEventType) !== null && _event$touchEventType !== void 0 ? _event$touchEventType : eventType,\n          changedTouches: changed,\n          allTouches: all,\n          numberOfTouches: numberOfTouches\n        },\n        timeStamp: Date.now()\n      };\n    }\n  }, {\n    key: \"cancelTouches\",\n    value: function cancelTouches() {\n      var _this3 = this;\n\n      var rect = this.view.getBoundingClientRect();\n      var all = [];\n      var changed = [];\n      var trackerData = this.tracker.getData();\n\n      if (trackerData.size === 0) {\n        return;\n      }\n\n      trackerData.forEach(function (element, key) {\n        var id = _this3.tracker.getMappedTouchEventId(key);\n\n        all.push({\n          id: id,\n          x: element.lastX - rect.left,\n          y: element.lastY - rect.top,\n          absoluteX: element.lastX,\n          absoluteY: element.lastY\n        });\n        changed.push({\n          id: id,\n          x: element.lastX - rect.left,\n          y: element.lastY - rect.top,\n          absoluteX: element.lastX,\n          absoluteY: element.lastY\n        });\n      });\n      var cancelEvent = {\n        nativeEvent: {\n          handlerTag: this.handlerTag,\n          state: this.currentState,\n          eventType: TouchEventType.CANCELLED,\n          changedTouches: changed,\n          allTouches: all,\n          numberOfTouches: all.length\n        },\n        timeStamp: Date.now()\n      };\n      var onGestureHandlerEvent = this.propsRef.current.onGestureHandlerEvent;\n      invokeNullableMethod(onGestureHandlerEvent, cancelEvent);\n    }\n  }, {\n    key: \"transformNativeEvent\",\n    value: function transformNativeEvent() {\n      return {};\n    }\n  }, {\n    key: \"updateGestureConfig\",\n    value: function updateGestureConfig(_ref) {\n      var _ref$enabled = _ref.enabled,\n          enabled = _ref$enabled === void 0 ? true : _ref$enabled,\n          props = _objectWithoutProperties(_ref, _excluded);\n\n      this.config = _objectSpread({\n        enabled: enabled\n      }, props);\n      this.enabled = enabled;\n\n      if (this.config.shouldCancelWhenOutside !== undefined) {\n        this.setShouldCancelWhenOutside(this.config.shouldCancelWhenOutside);\n      }\n\n      this.validateHitSlops();\n\n      if (this.enabled) {\n        return;\n      }\n\n      switch (this.currentState) {\n        case State.ACTIVE:\n          this.fail(true);\n          break;\n\n        case State.UNDETERMINED:\n          GestureHandlerOrchestrator.getInstance().removeHandlerFromOrchestrator(this);\n          break;\n\n        default:\n          this.cancel(true);\n          break;\n      }\n    }\n  }, {\n    key: \"checkCustomActivationCriteria\",\n    value: function checkCustomActivationCriteria(criterias) {\n      for (var key in this.config) {\n        if (criterias.indexOf(key) >= 0) {\n          this.hasCustomActivationCriteria = true;\n        }\n      }\n    }\n  }, {\n    key: \"validateHitSlops\",\n    value: function validateHitSlops() {\n      if (!this.config.hitSlop) {\n        return;\n      }\n\n      if (this.config.hitSlop.left !== undefined && this.config.hitSlop.right !== undefined && this.config.hitSlop.width !== undefined) {\n        throw new Error('HitSlop Error: Cannot define left, right and width at the same time');\n      }\n\n      if (this.config.hitSlop.width !== undefined && this.config.hitSlop.left === undefined && this.config.hitSlop.right === undefined) {\n        throw new Error('HitSlop Error: When width is defined, either left or right has to be defined');\n      }\n\n      if (this.config.hitSlop.height !== undefined && this.config.hitSlop.top !== undefined && this.config.hitSlop.bottom !== undefined) {\n        throw new Error('HitSlop Error: Cannot define top, bottom and height at the same time');\n      }\n\n      if (this.config.hitSlop.height !== undefined && this.config.hitSlop.top === undefined && this.config.hitSlop.bottom === undefined) {\n        throw new Error('HitSlop Error: When height is defined, either top or bottom has to be defined');\n      }\n    }\n  }, {\n    key: \"checkHitSlop\",\n    value: function checkHitSlop() {\n      if (!this.config.hitSlop) {\n        return true;\n      }\n\n      var width = this.view.getBoundingClientRect().width;\n      var height = this.view.getBoundingClientRect().height;\n      var left = 0;\n      var top = 0;\n      var right = width;\n      var bottom = height;\n\n      if (this.config.hitSlop.horizontal !== undefined) {\n        left -= this.config.hitSlop.horizontal;\n        right += this.config.hitSlop.horizontal;\n      }\n\n      if (this.config.hitSlop.vertical !== undefined) {\n        top -= this.config.hitSlop.vertical;\n        bottom += this.config.hitSlop.vertical;\n      }\n\n      if (this.config.hitSlop.left !== undefined) {\n        left = -this.config.hitSlop.left;\n      }\n\n      if (this.config.hitSlop.right !== undefined) {\n        right = width + this.config.hitSlop.right;\n      }\n\n      if (this.config.hitSlop.top !== undefined) {\n        top = -this.config.hitSlop.top;\n      }\n\n      if (this.config.hitSlop.bottom !== undefined) {\n        bottom = width + this.config.hitSlop.bottom;\n      }\n\n      if (this.config.hitSlop.width !== undefined) {\n        if (this.config.hitSlop.left !== undefined) {\n          right = left + this.config.hitSlop.width;\n        } else if (this.config.hitSlop.right !== undefined) {\n          left = right - this.config.hitSlop.width;\n        }\n      }\n\n      if (this.config.hitSlop.height !== undefined) {\n        if (this.config.hitSlop.top !== undefined) {\n          bottom = top + this.config.hitSlop.height;\n        } else if (this.config.hitSlop.bottom !== undefined) {\n          top = bottom - this.config.hitSlop.height;\n        }\n      }\n\n      var rect = this.view.getBoundingClientRect();\n      var offsetX = this.tracker.getLastX() - rect.left;\n      var offsetY = this.tracker.getLastY() - rect.top;\n\n      if (offsetX >= left && offsetX <= right && offsetY >= top && offsetY <= bottom) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"isPointerInBounds\",\n    value: function isPointerInBounds(_ref2) {\n      var x = _ref2.x,\n          y = _ref2.y;\n      var rect = this.view.getBoundingClientRect();\n      return x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n    }\n  }, {\n    key: \"resetConfig\",\n    value: function resetConfig() {}\n  }, {\n    key: \"getTag\",\n    value: function getTag() {\n      return this.handlerTag;\n    }\n  }, {\n    key: \"setTag\",\n    value: function setTag(tag) {\n      this.handlerTag = tag;\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return this.config;\n    }\n  }, {\n    key: \"getShouldEnableGestureOnSetup\",\n    value: function getShouldEnableGestureOnSetup() {\n      throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n    }\n  }, {\n    key: \"getView\",\n    value: function getView() {\n      return this.view;\n    }\n  }, {\n    key: \"getEventManagers\",\n    value: function getEventManagers() {\n      return this.eventManagers;\n    }\n  }, {\n    key: \"getTracker\",\n    value: function getTracker() {\n      return this.tracker;\n    }\n  }, {\n    key: \"getTrackedPointersID\",\n    value: function getTrackedPointersID() {\n      return this.tracker.getTrackedPointersID();\n    }\n  }, {\n    key: \"getState\",\n    value: function getState() {\n      return this.currentState;\n    }\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return this.enabled;\n    }\n  }, {\n    key: \"isFinished\",\n    value: function isFinished() {\n      return this.currentState === State.END || this.currentState === State.FAILED || this.currentState === State.CANCELLED;\n    }\n  }, {\n    key: \"setShouldCancelWhenOutside\",\n    value: function setShouldCancelWhenOutside(shouldCancel) {\n      this.shouldCancellWhenOutside = shouldCancel;\n    }\n  }, {\n    key: \"getShouldCancelWhenOutside\",\n    value: function getShouldCancelWhenOutside() {\n      return this.shouldCancellWhenOutside;\n    }\n  }, {\n    key: \"getPointerType\",\n    value: function getPointerType() {\n      return this.pointerType;\n    }\n  }]);\n\n  return GestureHandler;\n}();\n\nexport { GestureHandler as default };\n\nfunction invokeNullableMethod(method, event) {\n  if (!method) {\n    return;\n  }\n\n  if (typeof method === 'function') {\n    method(event);\n    return;\n  }\n\n  if ('__getHandler' in method && typeof method.__getHandler === 'function') {\n    var handler = method.__getHandler();\n\n    invokeNullableMethod(handler, event);\n    return;\n  }\n\n  if (!('__nodeConfig' in method)) {\n    return;\n  }\n\n  var argMapping = method.__nodeConfig.argMapping;\n\n  if (!Array.isArray(argMapping)) {\n    return;\n  }\n\n  for (var _ref5 of argMapping.entries()) {\n    var _ref4 = _slicedToArray(_ref5, 2);\n\n    var index = _ref4[0];\n\n    var _ref4$ = _slicedToArray(_ref4[1], 2);\n\n    var key = _ref4$[0];\n    var value = _ref4$[1];\n\n    if (!(key in event.nativeEvent)) {\n      continue;\n    }\n\n    var nativeValue = event.nativeEvent[key];\n\n    if (value !== null && value !== void 0 && value.setValue) {\n      value.setValue(nativeValue);\n    } else {\n      method.__nodeConfig.argMapping[index] = [key, nativeValue];\n    }\n  }\n\n  return;\n}","map":{"version":3,"sources":["GestureHandler.ts"],"names":["State","UNDETERMINED","enabled","PointerType","NONE","constructor","init","setView","findNodeHandle","addEventManager","manager","onCancel","onReset","resetProgress","reset","moveToState","oldState","GestureHandlerOrchestrator","onStateChange","begin","fail","cancel","activate","_force","end","isAwaiting","setAwaiting","isActive","setActive","getShouldResetProgress","setShouldResetProgress","getActivationIndex","setActivationIndex","shouldWaitForHandlerFailure","handler","InteractionManager","shouldRequireToWaitForFailure","shouldRecognizeSimultaneously","shouldBeCancelledByOther","onPointerDown","event","onPointerAdd","onPointerUp","onPointerRemove","onPointerMove","onPointerOut","onPointerEnter","onPointerCancel","onPointerOutOfBounds","tryToSendMoveEvent","out","sendTouchEvent","onGestureHandlerEvent","touchEvent","invokeNullableMethod","onGestureHandlerStateChange","resultEvent","transformEventData","nativeEvent","numberOfPointers","state","pointerInside","isPointerInBounds","x","y","handlerTag","target","newState","undefined","timeStamp","Date","transformTouchEvent","rect","all","changed","trackerData","id","element","absoluteX","absoluteY","lastY","EventTypes","eventType","TouchEventType","numberOfTouches","changedTouches","allTouches","cancelTouches","cancelEvent","length","transformNativeEvent","updateGestureConfig","props","checkCustomActivationCriteria","criterias","validateHitSlops","checkHitSlop","width","height","left","top","right","bottom","offsetX","offsetY","resetConfig","getTag","setTag","getConfig","getShouldEnableGestureOnSetup","getView","getEventManagers","getTracker","getTrackedPointersID","getState","isEnabled","isFinished","setShouldCancelWhenOutside","getShouldCancelWhenOutside","getPointerType","method","argMapping","Array","key","nativeValue","value"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-empty-function */\nimport { findNodeHandle } from 'react-native';\nimport { State } from '../../State';\nimport {\n  Config,\n  AdaptedEvent,\n  PropsRef,\n  ResultEvent,\n  PointerData,\n  ResultTouchEvent,\n  PointerType,\n  TouchEventType,\n  EventTypes,\n} from '../interfaces';\nimport EventManager from '../tools/EventManager';\nimport GestureHandlerOrchestrator from '../tools/GestureHandlerOrchestrator';\nimport InteractionManager from '../tools/InteractionManager';\nimport PointerEventManager from '../tools/PointerEventManager';\nimport PointerTracker, { TrackerElement } from '../tools/PointerTracker';\nimport TouchEventManager from '../tools/TouchEventManager';\nimport { isPointerInBounds } from '../utils';\n\nexport default abstract class GestureHandler {\n  private lastSentState: State | null = null;\n  protected currentState: State = State.UNDETERMINED;\n\n  protected shouldCancellWhenOutside = false;\n  protected hasCustomActivationCriteria: boolean;\n  protected enabled = false;\n\n  private ref!: number;\n  private propsRef!: React.RefObject<unknown>;\n  private handlerTag!: number;\n  protected config: Config = { enabled: false };\n  protected view!: HTMLElement;\n\n  protected eventManagers: EventManager[] = [];\n  protected tracker: PointerTracker = new PointerTracker();\n\n  // Orchestrator properties\n  protected activationIndex = 0;\n  protected awaiting = false;\n  protected active = false;\n  protected shouldResetProgress = false;\n  protected pointerType: PointerType = PointerType.NONE;\n\n  public constructor() {\n    this.hasCustomActivationCriteria = false;\n  }\n\n  //\n  // Initializing handler\n  //\n\n  protected init(ref: number, propsRef: React.RefObject<unknown>) {\n    this.propsRef = propsRef;\n    this.ref = ref;\n\n    this.currentState = State.UNDETERMINED;\n\n    this.setView();\n    this.addEventManager(new PointerEventManager(this.view));\n    this.addEventManager(new TouchEventManager(this.view));\n  }\n\n  private setView() {\n    if (!this.ref) {\n      throw new Error(\n        `Cannot find HTML Element for handler ${this.handlerTag}`\n      );\n    }\n\n    this.view = findNodeHandle(this.ref) as unknown as HTMLElement;\n    this.view.style['touchAction'] = 'none';\n    //@ts-ignore This one disables default events on Safari\n    this.view.style['WebkitTouchCallout'] = 'none';\n\n    if (!this.config.userSelect) {\n      this.view.style['webkitUserSelect'] = 'none';\n      this.view.style['userSelect'] = 'none';\n    } else {\n      this.view.style['webkitUserSelect'] = this.config.userSelect;\n      this.view.style['userSelect'] = this.config.userSelect;\n    }\n  }\n\n  private addEventManager(manager: EventManager): void {\n    manager.setOnPointerDown(this.onPointerDown.bind(this));\n    manager.setOnPointerAdd(this.onPointerAdd.bind(this));\n    manager.setOnPointerUp(this.onPointerUp.bind(this));\n    manager.setOnPointerRemove(this.onPointerRemove.bind(this));\n    manager.setOnPointerMove(this.onPointerMove.bind(this));\n    manager.setOnPointerEnter(this.onPointerEnter.bind(this));\n    manager.setOnPointerOut(this.onPointerOut.bind(this));\n    manager.setOnPointerCancel(this.onPointerCancel.bind(this));\n    manager.setOnPointerOutOfBounds(this.onPointerOutOfBounds.bind(this));\n    manager.setListeners();\n\n    this.eventManagers.push(manager);\n  }\n\n  //\n  // Resetting handler\n  //\n\n  protected onCancel(): void {}\n  protected onReset(): void {}\n  protected resetProgress(): void {}\n\n  public reset(): void {\n    this.tracker.resetTracker();\n    this.onReset();\n    this.resetProgress();\n    this.eventManagers.forEach((manager: EventManager) =>\n      manager.resetManager()\n    );\n    this.currentState = State.UNDETERMINED;\n  }\n\n  //\n  // State logic\n  //\n\n  public moveToState(newState: State, sendIfDisabled?: boolean) {\n    if (this.currentState === newState) {\n      return;\n    }\n\n    const oldState = this.currentState;\n    this.currentState = newState;\n\n    if (\n      this.tracker.getTrackedPointersCount() > 0 &&\n      this.config.needsPointerData &&\n      this.isFinished()\n    ) {\n      this.cancelTouches();\n    }\n\n    GestureHandlerOrchestrator.getInstance().onHandlerStateChange(\n      this,\n      newState,\n      oldState,\n      sendIfDisabled\n    );\n\n    this.onStateChange(newState, oldState);\n  }\n\n  protected onStateChange(_newState: State, _oldState: State): void {}\n\n  public begin(): void {\n    if (!this.checkHitSlop()) {\n      return;\n    }\n\n    if (this.currentState === State.UNDETERMINED) {\n      this.moveToState(State.BEGAN);\n    }\n  }\n\n  /**\n   * @param {boolean} sendIfDisabled - Used when handler becomes disabled. With this flag orchestrator will be forced to send fail event\n   */\n  public fail(sendIfDisabled?: boolean): void {\n    if (\n      this.currentState === State.ACTIVE ||\n      this.currentState === State.BEGAN\n    ) {\n      this.moveToState(State.FAILED, sendIfDisabled);\n      this.view.style.cursor = 'auto';\n    }\n\n    this.resetProgress();\n  }\n\n  /**\n   * @param {boolean} sendIfDisabled - Used when handler becomes disabled. With this flag orchestrator will be forced to send cancel event\n   */\n  public cancel(sendIfDisabled?: boolean): void {\n    if (\n      this.currentState === State.ACTIVE ||\n      this.currentState === State.UNDETERMINED ||\n      this.currentState === State.BEGAN\n    ) {\n      this.onCancel();\n      this.moveToState(State.CANCELLED, sendIfDisabled);\n      this.view.style.cursor = 'auto';\n    }\n  }\n\n  public activate(_force = false) {\n    if (\n      this.currentState === State.UNDETERMINED ||\n      this.currentState === State.BEGAN\n    ) {\n      this.moveToState(State.ACTIVE);\n      this.view.style.cursor = 'grab';\n    }\n  }\n\n  public end() {\n    if (\n      this.currentState === State.BEGAN ||\n      this.currentState === State.ACTIVE\n    ) {\n      this.moveToState(State.END);\n      this.view.style.cursor = 'auto';\n    }\n\n    this.resetProgress();\n  }\n\n  //\n  // Methods for orchestrator\n  //\n\n  public isAwaiting(): boolean {\n    return this.awaiting;\n  }\n  public setAwaiting(value: boolean): void {\n    this.awaiting = value;\n  }\n\n  public isActive(): boolean {\n    return this.active;\n  }\n  public setActive(value: boolean): void {\n    this.active = value;\n  }\n\n  public getShouldResetProgress(): boolean {\n    return this.shouldResetProgress;\n  }\n  public setShouldResetProgress(value: boolean): void {\n    this.shouldResetProgress = value;\n  }\n\n  public getActivationIndex(): number {\n    return this.activationIndex;\n  }\n  public setActivationIndex(value: number): void {\n    this.activationIndex = value;\n  }\n\n  public shouldWaitForHandlerFailure(handler: GestureHandler): boolean {\n    if (handler === this) {\n      return false;\n    }\n\n    return InteractionManager.getInstance().shouldWaitForHandlerFailure(\n      this,\n      handler\n    );\n  }\n\n  public shouldRequireToWaitForFailure(handler: GestureHandler): boolean {\n    if (handler === this) {\n      return false;\n    }\n\n    return InteractionManager.getInstance().shouldRequireHandlerToWaitForFailure(\n      this,\n      handler\n    );\n  }\n\n  public shouldRecognizeSimultaneously(handler: GestureHandler): boolean {\n    if (handler === this) {\n      return true;\n    }\n\n    return InteractionManager.getInstance().shouldRecognizeSimultaneously(\n      this,\n      handler\n    );\n  }\n\n  public shouldBeCancelledByOther(handler: GestureHandler): boolean {\n    if (handler === this) {\n      return false;\n    }\n\n    return InteractionManager.getInstance().shouldHandlerBeCancelledBy(\n      this,\n      handler\n    );\n  }\n\n  //\n  // Event actions\n  //\n\n  protected onPointerDown(event: AdaptedEvent): void {\n    GestureHandlerOrchestrator.getInstance().recordHandlerIfNotPresent(this);\n    this.pointerType = event.pointerType;\n\n    if (this.pointerType === PointerType.TOUCH) {\n      GestureHandlerOrchestrator.getInstance().cancelMouseAndPenGestures(this);\n    }\n\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  // Adding another pointer to existing ones\n  protected onPointerAdd(event: AdaptedEvent): void {\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  protected onPointerUp(event: AdaptedEvent): void {\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  // Removing pointer, when there is more than one pointers\n  protected onPointerRemove(event: AdaptedEvent): void {\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  protected onPointerMove(event: AdaptedEvent): void {\n    this.tryToSendMoveEvent(false);\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  protected onPointerOut(event: AdaptedEvent): void {\n    if (this.shouldCancellWhenOutside) {\n      switch (this.currentState) {\n        case State.ACTIVE:\n          this.cancel();\n          break;\n        case State.BEGAN:\n          this.fail();\n          break;\n      }\n      return;\n    }\n\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  protected onPointerEnter(event: AdaptedEvent): void {\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  protected onPointerCancel(event: AdaptedEvent): void {\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  protected onPointerOutOfBounds(event: AdaptedEvent): void {\n    this.tryToSendMoveEvent(true);\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  private tryToSendMoveEvent(out: boolean): void {\n    if (\n      this.enabled &&\n      this.active &&\n      (!out || (out && !this.shouldCancellWhenOutside))\n    ) {\n      this.sendEvent(this.currentState, this.currentState);\n    }\n  }\n\n  public sendTouchEvent(event: AdaptedEvent): void {\n    if (!this.enabled) {\n      return;\n    }\n\n    const { onGestureHandlerEvent }: PropsRef = this.propsRef\n      .current as PropsRef;\n\n    const touchEvent: ResultTouchEvent | undefined =\n      this.transformTouchEvent(event);\n\n    if (touchEvent) {\n      invokeNullableMethod(onGestureHandlerEvent, touchEvent);\n    }\n  }\n\n  //\n  // Events Sending\n  //\n\n  public sendEvent = (newState: State, oldState: State): void => {\n    const { onGestureHandlerEvent, onGestureHandlerStateChange }: PropsRef =\n      this.propsRef.current as PropsRef;\n\n    const resultEvent: ResultEvent = this.transformEventData(\n      newState,\n      oldState\n    );\n\n    // In the new API oldState field has to be undefined, unless we send event state changed\n    // Here the order is flipped to avoid workarounds such as making backup of the state and setting it to undefined first, then changing it back\n    // Flipping order with setting oldState to undefined solves issue, when events were being sent twice instead of once\n    // However, this may cause trouble in the future (but for now we don't know that)\n\n    if (this.lastSentState !== newState) {\n      this.lastSentState = newState;\n      invokeNullableMethod(onGestureHandlerStateChange, resultEvent);\n    }\n    if (this.currentState === State.ACTIVE) {\n      resultEvent.nativeEvent.oldState = undefined;\n      invokeNullableMethod(onGestureHandlerEvent, resultEvent);\n    }\n  };\n\n  private transformEventData(newState: State, oldState: State): ResultEvent {\n    return {\n      nativeEvent: {\n        numberOfPointers: this.tracker.getTrackedPointersCount(),\n        state: newState,\n        pointerInside: isPointerInBounds(this.view, {\n          x: this.tracker.getLastAvgX(),\n          y: this.tracker.getLastAvgY(),\n        }),\n        ...this.transformNativeEvent(),\n        handlerTag: this.handlerTag,\n        target: this.ref,\n        oldState: newState !== oldState ? oldState : undefined,\n      },\n      timeStamp: Date.now(),\n    };\n  }\n\n  private transformTouchEvent(\n    event: AdaptedEvent\n  ): ResultTouchEvent | undefined {\n    const rect = this.view.getBoundingClientRect();\n\n    const all: PointerData[] = [];\n    const changed: PointerData[] = [];\n\n    const trackerData = this.tracker.getData();\n\n    // This if handles edge case where all pointers have been cancelled\n    // When pointercancel is triggered, reset method is called. This means that tracker will be reset after first pointer being cancelled\n    // The problem is, that handler will receive another pointercancel event from the rest of the pointers\n    // To avoid crashing, we don't send event if tracker tracks no pointers, i.e. has been reset\n    if (trackerData.size === 0 || !trackerData.has(event.pointerId)) {\n      return;\n    }\n\n    trackerData.forEach((element: TrackerElement, key: number): void => {\n      const id: number = this.tracker.getMappedTouchEventId(key);\n\n      all.push({\n        id: id,\n        x: element.lastX - rect.left,\n        y: element.lastY - rect.top,\n        absoluteX: element.lastX,\n        absoluteY: element.lastY,\n      });\n    });\n\n    // Each pointer sends its own event, so we want changed touches to contain only the pointer that has changed.\n    // However, if the event is cancel, we want to cancel all pointers to avoid crashes\n    if (event.eventType !== EventTypes.CANCEL) {\n      changed.push({\n        id: this.tracker.getMappedTouchEventId(event.pointerId),\n        x: event.x - rect.left,\n        y: event.y - rect.top,\n        absoluteX: event.x,\n        absoluteY: event.y,\n      });\n    } else {\n      trackerData.forEach((element: TrackerElement, key: number): void => {\n        const id: number = this.tracker.getMappedTouchEventId(key);\n\n        changed.push({\n          id: id,\n          x: element.lastX - rect.left,\n          y: element.lastY - rect.top,\n          absoluteX: element.lastX,\n          absoluteY: element.lastY,\n        });\n      });\n    }\n\n    let eventType: TouchEventType = TouchEventType.UNDETERMINED;\n\n    switch (event.eventType) {\n      case EventTypes.DOWN:\n      case EventTypes.ADDITIONAL_POINTER_DOWN:\n        eventType = TouchEventType.DOWN;\n        break;\n      case EventTypes.UP:\n      case EventTypes.ADDITIONAL_POINTER_UP:\n        eventType = TouchEventType.UP;\n        break;\n      case EventTypes.MOVE:\n        eventType = TouchEventType.MOVE;\n        break;\n      case EventTypes.CANCEL:\n        eventType = TouchEventType.CANCELLED;\n        break;\n    }\n\n    // Here, when we receive up event, we want to decrease number of touches\n    // That's because we want handler to send information that there's one pointer less\n    // However, we still want this pointer to be present in allTouches array, so that its data can be accessed\n    let numberOfTouches: number = all.length;\n\n    if (\n      event.eventType === EventTypes.UP ||\n      event.eventType === EventTypes.ADDITIONAL_POINTER_UP\n    ) {\n      --numberOfTouches;\n    }\n\n    return {\n      nativeEvent: {\n        handlerTag: this.handlerTag,\n        state: this.currentState,\n        eventType: event.touchEventType ?? eventType,\n        changedTouches: changed,\n        allTouches: all,\n        numberOfTouches: numberOfTouches,\n      },\n      timeStamp: Date.now(),\n    };\n  }\n\n  private cancelTouches(): void {\n    const rect = this.view.getBoundingClientRect();\n\n    const all: PointerData[] = [];\n    const changed: PointerData[] = [];\n\n    const trackerData = this.tracker.getData();\n\n    if (trackerData.size === 0) {\n      return;\n    }\n\n    trackerData.forEach((element: TrackerElement, key: number): void => {\n      const id: number = this.tracker.getMappedTouchEventId(key);\n\n      all.push({\n        id: id,\n        x: element.lastX - rect.left,\n        y: element.lastY - rect.top,\n        absoluteX: element.lastX,\n        absoluteY: element.lastY,\n      });\n\n      changed.push({\n        id: id,\n        x: element.lastX - rect.left,\n        y: element.lastY - rect.top,\n        absoluteX: element.lastX,\n        absoluteY: element.lastY,\n      });\n    });\n\n    const cancelEvent: ResultTouchEvent = {\n      nativeEvent: {\n        handlerTag: this.handlerTag,\n        state: this.currentState,\n        eventType: TouchEventType.CANCELLED,\n        changedTouches: changed,\n        allTouches: all,\n        numberOfTouches: all.length,\n      },\n      timeStamp: Date.now(),\n    };\n\n    const { onGestureHandlerEvent }: PropsRef = this.propsRef\n      .current as PropsRef;\n\n    invokeNullableMethod(onGestureHandlerEvent, cancelEvent);\n  }\n\n  protected transformNativeEvent() {\n    return {};\n  }\n\n  //\n  // Handling config\n  //\n\n  public updateGestureConfig({ enabled = true, ...props }: Config): void {\n    this.config = { enabled: enabled, ...props };\n    this.enabled = enabled;\n\n    if (this.config.shouldCancelWhenOutside !== undefined) {\n      this.setShouldCancelWhenOutside(this.config.shouldCancelWhenOutside);\n    }\n\n    this.validateHitSlops();\n\n    if (this.enabled) {\n      return;\n    }\n\n    switch (this.currentState) {\n      case State.ACTIVE:\n        this.fail(true);\n        break;\n      case State.UNDETERMINED:\n        GestureHandlerOrchestrator.getInstance().removeHandlerFromOrchestrator(\n          this\n        );\n        break;\n      default:\n        this.cancel(true);\n        break;\n    }\n  }\n\n  protected checkCustomActivationCriteria(criterias: string[]): void {\n    for (const key in this.config) {\n      if (criterias.indexOf(key) >= 0) {\n        this.hasCustomActivationCriteria = true;\n      }\n    }\n  }\n\n  private validateHitSlops(): void {\n    if (!this.config.hitSlop) {\n      return;\n    }\n\n    if (\n      this.config.hitSlop.left !== undefined &&\n      this.config.hitSlop.right !== undefined &&\n      this.config.hitSlop.width !== undefined\n    ) {\n      throw new Error(\n        'HitSlop Error: Cannot define left, right and width at the same time'\n      );\n    }\n\n    if (\n      this.config.hitSlop.width !== undefined &&\n      this.config.hitSlop.left === undefined &&\n      this.config.hitSlop.right === undefined\n    ) {\n      throw new Error(\n        'HitSlop Error: When width is defined, either left or right has to be defined'\n      );\n    }\n\n    if (\n      this.config.hitSlop.height !== undefined &&\n      this.config.hitSlop.top !== undefined &&\n      this.config.hitSlop.bottom !== undefined\n    ) {\n      throw new Error(\n        'HitSlop Error: Cannot define top, bottom and height at the same time'\n      );\n    }\n\n    if (\n      this.config.hitSlop.height !== undefined &&\n      this.config.hitSlop.top === undefined &&\n      this.config.hitSlop.bottom === undefined\n    ) {\n      throw new Error(\n        'HitSlop Error: When height is defined, either top or bottom has to be defined'\n      );\n    }\n  }\n\n  private checkHitSlop(): boolean {\n    if (!this.config.hitSlop) {\n      return true;\n    }\n\n    const width = this.view.getBoundingClientRect().width;\n    const height = this.view.getBoundingClientRect().height;\n\n    let left = 0;\n    let top = 0;\n    let right: number = width;\n    let bottom: number = height;\n\n    if (this.config.hitSlop.horizontal !== undefined) {\n      left -= this.config.hitSlop.horizontal;\n      right += this.config.hitSlop.horizontal;\n    }\n\n    if (this.config.hitSlop.vertical !== undefined) {\n      top -= this.config.hitSlop.vertical;\n      bottom += this.config.hitSlop.vertical;\n    }\n\n    if (this.config.hitSlop.left !== undefined) {\n      left = -this.config.hitSlop.left;\n    }\n\n    if (this.config.hitSlop.right !== undefined) {\n      right = width + this.config.hitSlop.right;\n    }\n\n    if (this.config.hitSlop.top !== undefined) {\n      top = -this.config.hitSlop.top;\n    }\n\n    if (this.config.hitSlop.bottom !== undefined) {\n      bottom = width + this.config.hitSlop.bottom;\n    }\n    if (this.config.hitSlop.width !== undefined) {\n      if (this.config.hitSlop.left !== undefined) {\n        right = left + this.config.hitSlop.width;\n      } else if (this.config.hitSlop.right !== undefined) {\n        left = right - this.config.hitSlop.width;\n      }\n    }\n\n    if (this.config.hitSlop.height !== undefined) {\n      if (this.config.hitSlop.top !== undefined) {\n        bottom = top + this.config.hitSlop.height;\n      } else if (this.config.hitSlop.bottom !== undefined) {\n        top = bottom - this.config.hitSlop.height;\n      }\n    }\n\n    const rect: DOMRect = this.view.getBoundingClientRect();\n    const offsetX: number = this.tracker.getLastX() - rect.left;\n    const offsetY: number = this.tracker.getLastY() - rect.top;\n\n    if (\n      offsetX >= left &&\n      offsetX <= right &&\n      offsetY >= top &&\n      offsetY <= bottom\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  public isPointerInBounds({ x, y }: { x: number; y: number }): boolean {\n    const rect: DOMRect = this.view.getBoundingClientRect();\n\n    return (\n      x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom\n    );\n  }\n\n  protected resetConfig(): void {}\n\n  //\n  // Getters and setters\n  //\n\n  public getTag(): number {\n    return this.handlerTag;\n  }\n  public setTag(tag: number): void {\n    this.handlerTag = tag;\n  }\n\n  protected getConfig() {\n    return this.config;\n  }\n\n  public getShouldEnableGestureOnSetup(): boolean {\n    throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n  }\n\n  public getView(): HTMLElement {\n    return this.view;\n  }\n\n  public getEventManagers(): EventManager[] {\n    return this.eventManagers;\n  }\n\n  public getTracker(): PointerTracker {\n    return this.tracker;\n  }\n\n  public getTrackedPointersID(): number[] {\n    return this.tracker.getTrackedPointersID();\n  }\n\n  public getState(): State {\n    return this.currentState;\n  }\n\n  public isEnabled(): boolean {\n    return this.enabled;\n  }\n\n  private isFinished(): boolean {\n    return (\n      this.currentState === State.END ||\n      this.currentState === State.FAILED ||\n      this.currentState === State.CANCELLED\n    );\n  }\n\n  protected setShouldCancelWhenOutside(shouldCancel: boolean) {\n    this.shouldCancellWhenOutside = shouldCancel;\n  }\n  protected getShouldCancelWhenOutside(): boolean {\n    return this.shouldCancellWhenOutside;\n  }\n\n  public getPointerType(): PointerType {\n    return this.pointerType;\n  }\n}\n\nfunction invokeNullableMethod(\n  method:\n    | ((event: ResultEvent | ResultTouchEvent) => void)\n    | { __getHandler: () => (event: ResultEvent | ResultTouchEvent) => void }\n    | { __nodeConfig: { argMapping: unknown[] } },\n  event: ResultEvent | ResultTouchEvent\n): void {\n  if (!method) {\n    return;\n  }\n\n  if (typeof method === 'function') {\n    method(event);\n    return;\n  }\n\n  if ('__getHandler' in method && typeof method.__getHandler === 'function') {\n    const handler = method.__getHandler();\n    invokeNullableMethod(handler, event);\n    return;\n  }\n\n  if (!('__nodeConfig' in method)) {\n    return;\n  }\n\n  const { argMapping } = method.__nodeConfig;\n  if (!Array.isArray(argMapping)) {\n    return;\n  }\n\n  for (const [index, [key, value]] of argMapping.entries()) {\n    if (!(key in event.nativeEvent)) {\n      continue;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    const nativeValue = event.nativeEvent[key];\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    if (value?.setValue) {\n      //Reanimated API\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n      value.setValue(nativeValue);\n    } else {\n      //RN Animated API\n      method.__nodeConfig.argMapping[index] = [key, nativeValue];\n    }\n  }\n\n  return;\n}\n"]},"metadata":{},"sourceType":"module"}